<%doc>
=head1 NAME

stock_pedigree.mas

=head1 DESCRIPTION

This component displays a pedigree

=head1 AUTHOR

Jeremy Edwards <jde22@cornell.edu>

=head1 ARGUMENTS

=over 1

=item stock

$stock_id - the id of the stock for which pedigree information will be displayed

$has_pedigree - whether the stock has pedigree information.

=back
=cut

</%doc>

<%args>
$stock_id
$has_pedigree
</%args>

<style>
.ui-autocomplete {
    z-index: 2147483647;
}
</style>

<div class="modal fade" id="add_parent_dialog" name="add_parent_dialog" tabindex="-1" role="dialog" aria-labelledby="addParentDialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header" style="text-align: center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="addParentDialog">Add Parent</h4>
            </div>
            <div class="modal-body">
                <div class="container-fluid">

                    <form class="form-horizontal" role="form" method="post" id="add_parent_dialog_form" name="add_parent_dialog_form">
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Stock Name: </label>
                            <div class="col-sm-9" >
                                <input name="stock_autocomplete" id="stock_autocomplete" class="form-control" type="text" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-3 control-label">Parent is: </label>
                            <div class="col-sm-9" >
                                <input type="radio" id="female" name="parent_type" value="female" checked="1"  /> female<br />
                                <input type="radio" id="male" name="parent_type" value="male" /> male<br />
                            </div>
                        </div>
                        <div class="form-group" id="add_parent_cross_type_div">
                            <label class="col-sm-3 control-label">Cross Type: </label>
                            <div class="col-sm-9" >
                                <select class="form-control" id="add_parent_cross_type">
                                    <option value="biparental">biparental</option>
                                    <option value="self">self</option>
                                    <option value="open">open pollinated</option>
                                    <option value="bulk">bulk</option>
                                    <option value="bulk_self">bulk selfed</option>
                                    <option value="bulk_open">bulk and open pollinated</option>
                                    <option value="doubled_haploid">doubled haploid</option>
                                    <option value="polycross">polycross</option>
                                    <option value="reciprocal">reciprocal</option>
                                    <option value="multicross">multicross</option>
                                </select>
                            </div>
                        </div>
                    </form>

                </div>
            </div>
            <div class="modal-footer">
                <button id="close_add_parent_dialog" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" name="add_parent_submit" id="add_parent_submit" title="Save Parent">Save</button>
            </div>
        </div>
    </div>
</div>

<script>

    jQuery('#add_parent_submit').click(function(){
        associate_parent();
    });

    jQuery("#add_parent_link").click( function () { 
        jQuery("#add_parent_dialog" ).modal("show");
    });

    jQuery("#stock_autocomplete").autocomplete({
        source: '/ajax/stock/accession_autocomplete'
    });

    jQuery('input:radio[name="parent_type"]').change(function(){
        var type = jQuery("input:radio[name='parent_type']:checked").val();
        if(type == 'female'){
            jQuery('#add_parent_cross_type_div').show();
        } else {
            jQuery('#add_parent_cross_type_div').hide();
            jQuery('#add_parent_cross_type').val('');
        }
    });

    function associate_parent() { 
      var parentType = "";
      parentType = jQuery("#add_parent_dialog").find("input:checked").val();
      //alert("PARENTTYPE="+parentType);
      var parentName = jQuery("#stock_autocomplete").val();
      //alert("Parent name = "+parentName);

      if (!parentName) { alert("We need a name here, sorry!"); return; }

      var cross_type = jQuery('#add_parent_cross_type').val();
      //alert(cross_type);

      var stock_id = "<% $stock_id %>";
      jQuery.ajax({
        url: '/ajax/stock/add_stock_parent',
        dataType: "json",
        type: 'GET',
        async: false,
        data: 'stock_id='+stock_id+'&parent_name='+parentName+'&parent_type='+parentType+'&cross_type='+cross_type,
        error: function(response) {
            alert("An error occurred. Please try again later!"+response);
        },
        parseerror: function(response) {
            alert("A parse error occurred. Please try again."+response);
        },
        success: function(response) { 
          if (response.error) { alert(response.error); }
          else {
            alert("The parent has been added. ["+response.error+"]");
            jQuery("#add_parent_dialog").modal("hide");
            document.location.reload(); // reload the entire page, because pedigree info is in several places. 
          }
        }, 
      });
 

   }

</script>




<!-- # % if (!$has_pedigree) { return; } -->

<& /util/import_javascript.mas, classes => [ 'jqueryui' ] &>


<div>
    <span style="white-space:nowrap;">
        <svg style="display:inline-block;" width="20px" height="16px">
            <rect x="0" y="8" width="20" height="7" fill="red"/>
        </svg> Female Parent
    </span>&nbsp;&nbsp;
    <span style="white-space:nowrap;">
        <svg style="display:inline-block;" width="20px" height="16px">
            <rect x="0" y="8" width="20" height="7" fill="blue"/>
        </svg> Male Parent
    </span>&nbsp;&nbsp;
    <span style="white-space:nowrap;">
        <span class="glyphicon glyphicon-circle-arrow-right" style="color:purple;" aria-hidden="true">
        </span> Expand Pedigree
    </span>
    
</div>
<center>
<!-- <div name="stock_pedigree" style="max-width:700px;max-height:400px;overflow:auto">


<object target="_top" 
   xmlns="http://www.w3.org/2000/svg"
	xmlns:xlink="http://www.w3.org/1999/xlink"
	pluginspage="http://www.adobe.com/svg/viewer/install/"
	width="700px"
	max-height="400px"
	min-height="200px"
	height="400px"
	overflow="auto"
	data="/pedigree/svg/<% $stock_id %>?<% rand() %>" type="image/svg+xml">
</object>


</div> -->
<svg class="pdgtree-canv" style="border:solid thin black;width:100%;height:80vh;"></svg>
</center>

<& /util/import_javascript.mas, classes => [ 'd3.d3v4Min', 'd3.d3-pedigree-tree' ] &>
<script type="text/javascript">
;
(function(){
    var STOCK_ID = "<% $stock_id %>";
    var loaded_nodes = {};
    d3.json('/ajax/pedigrees/get_full?stock_id='+STOCK_ID,function(nodes){
        console.log(nodes);
        nodes.forEach(function(node){
            loaded_nodes[node.id] = node;
        })
        jQuery(document).ready(function(){
            main(nodes);
        });
    });
    function load_nodes(to_load,callback){
        if (to_load.length<1) return;
        var req_url = "/ajax/pedigrees/get_relationships?stock_id=";
        req_url+=to_load.join("&stock_id=");
        console.log(req_url);
        d3.json(req_url,function(loaded){
            var nodes = loaded.filter(function(node){
                if (!loaded_nodes.hasOwnProperty(node.id)){
                    loaded_nodes[node.id] = node;
                    return true;
                }
                return false;
            });
            callback(nodes);
        });
    };
    
    function main(start_nodes) {  
        var tree = d3.pedigreeTree()
          .levelWidth(200)
          .levelMidpoint(50)
          .nodePadding(220)
          .nodeWidth(10)
          .linkPadding(25)
          .vertical(true)
          .parentsOrdered(true)
          .parents(function(node){
            return [loaded_nodes[node.parents.mother],loaded_nodes[node.parents.father]].filter(Boolean);
          })
          .id(function(node){
            return node.id;
          })
          .groupChildless(true)
          .iterations(10)
          .data(start_nodes);
        drawTree(tree(),".pdgtree-canv");
    }
    
    function drawTree(layout,svg_selector,trans){
        
        //set default change-transtion to no duration
        trans = trans || d3.transition().duration(0);
        
        //make wrapper(pdg)
        // console.log(layout);
        var canv = d3.select(svg_selector);
        var cbbox = canv.node().getBoundingClientRect();
        var canvw = cbbox.width, 
            canvh = cbbox.height;
        var pdg = canv.select('.pedigreeTree');
        if (pdg.empty()){
          pdg = canv.append('g').classed('pedigreeTree',true);
        }
      
        //make background
        var bg = pdg.select('.pdg-bg');
        if (bg.empty()){
          bg = pdg.append('rect')
            .classed('pdg-bg',true)
            .attr("x",-canvw*500)
            .attr("y",-canvh*500)
            .attr('width',canvw*1000)
            .attr('height',canvh*1000)
            .attr('fill',"white")
            .attr('stroke','none');
        }
        
        // console.log(layout.x,layout.y);
        //make scaled content/zoom groups
        var padding = 50;
        var pdgtree_width = d3.max([500,layout.x[1]-layout.x[0]]);
        var pdgtree_height = d3.max([500,layout.y[1]-layout.y[0]]);
        var centeringx = d3.max([0,(500 - (layout.x[1]-layout.x[0]))/2]);
        var centeringy = d3.max([0,(500 - (layout.y[1]-layout.y[0]))/2]);
        var scale = get_fit_scale(canvw,canvh,pdgtree_width,pdgtree_height,padding);
        var offsetx = (canvw-(pdgtree_width)*scale)/2 + centeringx*scale;
        var offsety = (canvh-(pdgtree_height)*scale)/2 + centeringy*scale;
        
        var content = pdg.select('.pdg-content');
        if (content.empty()){
          var zoom = d3.zoom();
          var zoom_group = pdg.append('g').classed('pdg-zoom',true).data([zoom]);
          
          content = zoom_group.append('g').classed('pdg-content',true);
          content.datum({'zoom':zoom})
          zoom.on("zoom",function(){
            zoom_group.attr('transform',d3.event.transform);
          });
          bg.style("cursor", "all-scroll").call(zoom).call(zoom.transform, d3.zoomIdentity);
          bg.on("dblclick.zoom",function(){
            zoom.transform(bg.transition(),d3.zoomIdentity);
            return false;
          });
          
          content.attr('transform',
              d3.zoomIdentity
                .translate(offsetx,offsety)
                .scale(scale)
            );
        }
        content.datum().zoom.scaleExtent([0.5,d3.max([pdgtree_height,pdgtree_width])/200])
        content.transition(trans)
          .attr('transform',
            d3.zoomIdentity
              .translate(offsetx,offsety)
              .scale(scale)
          );
        
        
        //set up draw layers
        var linkLayer = content.select('.link-layer');
        if(linkLayer.empty()){
            linkLayer = content.append('g').classed('link-layer',true);
        }
        var nodeLayer = content.select('.node-layer');
        if(nodeLayer.empty()){
            nodeLayer = content.append('g').classed('node-layer',true);
        }
        
        //link curve generators
        var stepline = d3.line().curve(d3.curveStepAfter);
        var curveline = d3.line().curve(d3.curveBasis);
        var build_curve = function(d){
          if (d.type=="parent->mid") return curveline(d.path);
          if (d.type=="mid->child") return stepline(d.path);
        };
        
        //draw nodes
        var nodes = nodeLayer.selectAll('.node')
          .data(layout.nodes,function(d){return d.id;});
        var newNodes = nodes.enter().append('g')
          .classed('node',true)
          .attr('transform',function(d){
            var begin = d;
            if(d3.event && d3.event.type=="click"){
              begin = d3.select(d3.event.target).datum();
            }
            return 'translate('+begin.x+','+begin.y+')'
          });
        var nodeNodes = newNodes.filter(function(d){
            return d.type=="node";
        });
        var groupNodes = newNodes.filter(function(d){
            return d.type=="node-group";
        });
        groupNodes.append("circle")
          .attr("fill","purple")
          .attr("stroke","purple")
          .attr("cy",0)
          .attr("r",10);
        groupNodes.append('text')
          .attr('y',6.5)
          .attr("font-size","14px")
          .attr("font-weight","bold")
          .attr('text-anchor',"middle")
          .attr('class', 'glyphicon')
          .html("&#xe092;")
          .attr('fill',"white");
        nodeNodes.append('rect')
          .attr('fill',function(d){
            if (d.id==STOCK_ID){
              return "pink";
            }
            return d.type=='node'?'white':'purple';
          })
          .attr('stroke',function(d){
            return d.type=='node'?'grey':'purple';
          })
          .attr('stroke-width',2)
          .attr("width",200)
          .attr("height",20)
          .attr("y",0)
          .attr("rx",10)
          .attr("ry",10)
          .attr("x",-100);
        nodeNodes.append('text')
          .attr('y',15)
          .attr('text-anchor',"middle")
          .html(function(d){
            return d.type=='node'?d.value.name:'Expand...';
          })
          .attr('fill',function(d){
            return d.type=='node'?'black':'white';
          });
        nodeNodes.each(function(d){
            var nn = d3.select(this);
            var ctl = nn.select('text').node().getComputedTextLength();
            var w = ctl+20;
            nn.select('rect')
                .attr("width",w)
                .attr("x",-w/2);
        });
        var expanders = nodeNodes.append('g').classed("expanders",true);
        var child_expander = expanders.append("g").classed("child-expander",true)
        child_expander.append("path")
          .attr("fill","none")
          .attr("stroke","purple")
          .attr("stroke-width",4)
          .attr("d",curveline([[0,20],[0,40]]));
        child_expander.append("circle")
          .attr("fill","purple")
          .attr("stroke","purple")
          .attr("cy",45)
          .attr("r",10);
        child_expander.append('text')
          .attr('y',52)
          .attr('x',-0.5)
          .attr("font-size","14px")
          .attr("font-weight","bold")
          .attr('text-anchor',"middle")
          .attr('class', 'glyphicon')
          .html("&#xe094;")
          .attr('fill',"white");
        child_expander.on("click",function(d){
            var end_blink = load_blink(d3.select(this).select("circle").node());
            var to_load = d.value.children.mother_of.concat(d.value.children.father_of).filter(Boolean).map(String);
            load_nodes(to_load,function(nodes){
                end_blink();
                layout.pdgtree.add(nodes);
                drawTree(layout.pdgtree(),".pdgtree-canv",d3.transition().duration(700));
            });
        });
        var parent_expander = expanders.append("g").classed("parent-expander",true)
        parent_expander.append("path")
          .attr("fill","none")
          .attr("stroke","purple")
          .attr("stroke-width",4)
          .attr("d",curveline([[0,0],[0,-40]]));
        parent_expander.append("circle")
          .attr("fill","purple")
          .attr("stroke","purple")
          .attr("cy",-45)
          .attr("r",10);
        parent_expander.append('text')
          .attr('y',-39)
          .attr('x',-0.5)
          .attr("font-size","14px")
          .attr("font-weight","bold")
          .attr('text-anchor',"middle")
          .attr('class', 'glyphicon')
          .html("&#xe093;")
          .attr('fill',"white");
        parent_expander.on("click",function(d){
            var end_blink = load_blink(d3.select(this).select("circle").node());
            var to_load = [d.value.parents.mother,d.value.parents.father].filter(Boolean).map(String);
            load_nodes(to_load,function(nodes){
                end_blink();
                layout.pdgtree.add(nodes);
                drawTree(layout.pdgtree(),".pdgtree-canv",d3.transition().duration(700));
            });
        });
        var allNodes = newNodes.merge(nodes);
        allNodes.each(function(d){
            if (d.type=="node"){
                var parents_unloaded = [d.value.parents.mother,d.value.parents.father]
                    .filter(function(node_id){
                        return !!node_id && !loaded_nodes.hasOwnProperty(node_id);
                    });
                var children_unloaded = d.value.children.mother_of.concat(d.value.children.father_of)
                    .filter(function(node_id){
                        return !!node_id && !loaded_nodes.hasOwnProperty(node_id);
                    });
                if (parents_unloaded.length<1){
                    d3.select(this).selectAll(".parent-expander").remove();
                }
                if (children_unloaded.length<1){
                    d3.select(this).selectAll(".child-expander").remove();
                }
            }
        });
        allNodes.transition(trans).attr('transform',function(d){
          return 'translate('+d.x+','+d.y+')'
        });
        allNodes.filter(function(d){return d.type=="node-group"})
          .style("cursor", "pointer")
          .on("click",function(d){
            layout.pdgtree.excludeFromGrouping(d.value.slice(0,10).map(function(d){return d.id;}));
            drawTree(layout.pdgtree(),".pdgtree-canv",d3.transition().duration(700).ease(d3.easeLinear));
        });
        var oldNodes = nodes.exit().remove();

        
        //link colors
        var link_color = function(d){
          if (d.type=="mid->child") return 'purple';
          if (d.type=="parent->mid"){
            //if its the first parent, red. Otherwise, blue.
            // console.log(d);
            var representative = d.sinks[0].type=="node-group"?
                    d.sinks[0].value[0].value 
                    : d.sinks[0].value;
            if (representative.parents.mother == d.source.id){
                return "red";
            } 
            else {
                return "blue";
            }
          }
          return 'gray';
        }
        
        //make links
        var links = linkLayer.selectAll('.link')
          .data(layout.links,function(d){return d.id;});
        var newLinks = links.enter().append('g')
          .classed('link',true);
        newLinks.append('path')
          .attr('d',function(d){
            var begin = (d.sink || d.source);
            if(d3.event && d3.event.type=="click"){
              begin = d3.select(d3.event.target).datum();
            }
            return curveline([[begin.x,begin.y],[begin.x,begin.y],[begin.x,begin.y],[begin.x,begin.y]]);
          })
          .attr('fill','none')
          .attr('stroke',link_color)
          .attr('opacity',function(d){
            if (d.type=="parent->mid") return 0.7;
            return 0.999;
          })
          .attr('stroke-width',4);
        var allLinks = newLinks.merge(links);
        allLinks.transition(trans).select('path').attr('d',build_curve);
        var oldNodes = links.exit().remove();
    }
      
    function load_blink(node){
        var stop = false;
        var original_fill = d3.select(node).style("fill");
        function blink(){
            if (!stop) d3.select(node)
                .transition()
                .duration(300)
                .style("fill", "white")
                .transition()
                .duration(300)
                .style("fill", original_fill)
                .on("end", blink);
        }
        blink();
        return function(){
            stop = true;
        }
    }
      
      
      
    function get_fit_scale(w1,h1,w2,h2,pad){
        w1 -= pad*2;
        h1 -= pad*2;  
        if (w1/w2<h1/h2){
            return w1/w2;
        } else {
            return h1/h2;
        }
    }
})();
</script>
  
