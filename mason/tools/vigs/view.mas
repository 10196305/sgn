
<%args>
$query
#$raw_blast_url => undef
$graph_url => undef
#$click_map_html => undef
@regions => ()  # list of listrefs, index is coverage level
$error => undef
$fragment_size => undef
$messages => ""
$errors => ""
$coverage => 0
$image_map => ""
@ids => ()
</%args>

<%perl>
use strict;

use Data::Dumper;
use JSON::Any;
my $json = JSON::Any->new;

if ($errors) { print "An error occurred. $error." }
if ($messages) { print $messages; }



#foreach my $s (@coords) { 
#	@ids = map { $_->id() } @$s;
#}


print STDERR Dumper(\@regions);

</%perl>

<& /util/import_javascript.mas, classes => 'Text.Markup' &>

<& /page/page_title.mas, title=>"VIGS Tool Results" &>

<% $messages %><br /><br />

Coverage: <% $coverage %><br />


<&| /page/info_section.mas, title=>"Distribution of $fragment_size-mers",    collapsible => 1,    collapsed   => 0 &>

<div align="center" style="color: #777777">
<img src="<% $graph_url %>" usemap="#blabla" />
</div>

<% $image_map %>

</&>

% #print "QUERY: $query. ID=".$query->id()." SEQUENCE:".$query->seq()."<br />";
% foreach my $level (@regions) {
% #print STDERR "LEVEL!\n";
%   foreach my $r (@$level) { 
%  #     print STDERR "REF:". ref($r)."\n";
%      if (ref($r)) { print join ("&nbsp;", $r->start, $r->end)."<br />"; 
%     }
%   }
% } 
<br /><br />

<script>
	function hilite_sequence() { 

	    var markup = new Text.Markup( { 'highlight' : [ '<span class="highlighted">', '</span>' ], 'break' : [ '<br />', '' ], 'space' : [ '<span>&nbsp;</span>', '' ] });
	    
	    var source_el = document.getElementById('query');
	    var markup_el = document.getElementById('markup');
	    var regions = <% $json->encode(\@regions) %>;


	    var hilite_regions = [];


	    for (var i=0; i<regions.length; i++) { 
		//alert("HERE " + regions[i]); //regions[i].join('X'));
		hilite_regions[i]=[ 'highlight', regions[i][0]-1, regions[i][1]-1 ];
            }	       

	    var sequence = source_el.innerHTML;

	    var break_regions = [];
	    for (var i=0; i<sequence.length; i=i+60) { 
	        break_regions.push([ 'break', i, i ]);
 	    }

            var space_regions = [];
	    for (var i =0; i<sequence.length; i=i+6) { 
	       space_regions.push(['space', i, i]);
            }	       
	    	    
	    var all_regions = break_regions.concat(hilite_regions, space_regions);

	    var markedup_seq = markup.markup(all_regions, sequence);
					      //alert('Markedup Seq: '+markedup_seq);
	    markup_el.innerHTML='<font face="courier" size="2">'+markedup_seq+'</font>';

	}


</script>

<&| /page/info_section.mas, title=>"Sequence overview", collapsible => 1, collapsed   => 0 &>
<center>
<span id="query" style="display:none" ><% $query->seq() %></span>
<span id="markup"></span>
</center>
</&>

<&| /page/info_section.mas, title=>"Sequences with perfect matches of $fragment_size-mers",    collapsible => 1,    collapsed   => 0 &>
% foreach my $id (@ids) { 
% print $id->[0]." (".$id->[1].")<br />";
% }

</&>
<script>
	hilite_sequence();
</script>
