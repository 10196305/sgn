
<%doc>


</%doc>

<%args>

</%args>

<& '/page/page_title.mas', title => "Compare trials" &>

<& '/util/import_javascript.mas', classes => [ 'jquery', 'jqueryui', 'popup', 'CXGN.List', 'CXGN.Login', 'd3.d3Min.js' ] &>

<div class="row">
  <center>
    <form class = "col-md-offset-3 col-md-6">
      <div class="form-group">
        <label for="trials_list_select">Choose a list of trials:</label>
        <div id="trials_list_select_container">
          <select disabled class="form-control input-sm" id="trials_list_select">
            <option selected="selected">Loading...</option>
          </select>
        </div>
        <small hidden="true" id = "trials_list_info" class="form-text text-muted">
          Trials contain a total of <span id="total_accession_count">?</span> accessions, with <span id="common_accession_count">?</span> common accessions, phenotyped for <span id="common_trait_count">?</span> common traits.
        </small>
      </div>
      <div class="form-group">
        <label for="formGroupExampleInput2">Choose a trait to compare:</label>
        <select disabled class="form-control input-sm" id="trait_select">
          <option selected="selected" value=""> </option>
        </select>
      </div>
      <span disabled id="submit_trial_list" class="btn btn-primary">Compare</span>
    </form>
  </center>
</div>

<div id="result_div" class="row">
  <center>
    <div hidden="true" class="tc-canv"></div>
  </center>
</div>

<script>

$(document).ready(function(){
  if (isLoggedIn()) { 
    var list = new CXGN.List();
    var select_html = list.listSelect('trials', ['trials'], ' ');
    $('#trials_list_select_container').html(select_html);
    $('#trials_list_select').change(function(){
      var trial_list_id = $('#trials_list_select').val();
      if (trial_list_id === "") {
        $("#trials_list_info").hide(400);
        $('#trait_select').attr("disabled",true).html('<option selected="selected" value=""> </option>');
        toggleSubmitButton(false);
        return;
      } else {
        $("#trials_list_info").show(400);
      }
      var item_data = list.getListData(trial_list_id);
      var items = item_data.elements;
      var params = "";
      for (n=0; n<items.length; n++) { 
        params += 'trial_name='+items[n][1]+'&';
      }
      $.ajax({ 
        url: '/ajax/trial/common_traits?'+params,
        success: function(response) { 
          if (response.error) { 
            $('#trait_select').val('error'); 
          }
          else {
            var option_html = '<option selected="selected" value=""> </option>';
            for (var i =0 ; i < response.options.length; i++) {
              option_html += '<option value="'+response.options[i][0]+'">'+(response.options[i][1])+'</option>';
            }
            $('#trait_select').attr("disabled",false).html(option_html);
            $('#total_accession_count').html(response.total_accession_count);
            $('#common_accession_count').html(response.common_accession_count);
            $('#common_trait_count').html(response.common_trait_count);
           }
        },
        error: function(response) { 
          //alert("An error occurred, the service may temporarily be unavailable");
        }

      });
    })
  }
  else { 
    $('#trials_list_select').html('<option selected="selected">You must be logged in to use lists.</option>');
  }
})

$('#trait_select').change(function(event) {
  if ($('#trait_select').val() == ""){
    toggleSubmitButton(false);
  } else {
    toggleSubmitButton(true);
  }
});



function toggleSubmitButton(state){
  if (state) {
    $('#submit_trial_list').on("click",fetchAndBuildGraphs);
    $('#submit_trial_list').attr("disabled",false);
  } else {
    $('#submit_trial_list').off("click");
    $('#submit_trial_list').attr("disabled",true);
  }
}

function fetchAndBuildGraphs() { 
  var list_id = $('#trials_list_select').val();
  $(".tc-canv").show();
  $.ajax( { 
   url: '/ajax/trial/compare_list_data',
   data: { 'cvterm_id' : $('#trait_select').val(), 'list_id': list_id },
   success: function(response) { 
      if (response.error) { 
         alert(response.error);
      }
      else { 
          d3.select('.tc-canv').html("");
          console.log(response);
          createGraphs(response);
          createHistogram(response);
      }
    }
  });
}

var view_size = 650;

function createHistogram(response){
    var variable_name = $('#trait_select option:selected').text();
    if (response.cvterm_id=="TEST_TEST"){
      variable_name = "Variable";
    }
    //parse the data
    var data = d3.csv.parse(response.csv,
        function(d) {
            var dp = {
                study: d.studyDbId,
                studyName: d.studyName,
                accession: d.germplasmDbId,
                accessionName:d.germplasmName,
                value: ((d[variable_name]==="") ? null : +d[variable_name])
            };
            return dp;
        }, 
        function(error, rows) {
            console.log(rows);
            console.log(error);
    });

    //nest it by study
    var studies = d3.nest().key(function(d) {return d.study;}).entries(data);
    var num_studies = studies.length;

    //generate all the grid SVGs and pairs of studies
    var canv = d3.select('.tc-canv');

    var hist = canv.append('svg').attr({
      width:"100%",
      "viewBox": "0 0 "+view_size+" "+view_size
    }).classed(".tc-histogram",true);
}

function createGraphs(response){
    var variable_name = $('#trait_select option:selected').text();
    if (response.cvterm_id=="TEST_TEST"){
      variable_name = "Variable";
    }
    //parse the data
    var data = d3.csv.parse(response.csv,
        function(d) {
            var dp = {
                study: d.studyDbId,
                studyName: d.studyName,
                accession: d.germplasmDbId,
                accessionName:d.germplasmName,
                value: ((d[variable_name]==="") ? null : +d[variable_name])
            };
            return dp;
        }, 
        function(error, rows) {
            console.log(rows);
            console.log(error);
    });

    //nest it by study
    var studies = d3.nest().key(function(d) {return d.study;}).entries(data);
    var num_studies = studies.length;

    //generate all the grid SVGs and pairs of studies
    var canv = d3.select('.tc-canv');
    var grid_size = 96/(num_studies-1) - (1+1/(num_studies));
    var pairwise_data = [];
    for (var i = 0; i<num_studies-1; i++){
        var row = canv.append("div").classed("tc-grid-row", true);
        for (var j = 1; j<num_studies; j++){
            if (i<j){
                pairwise_data.push({"a":studies[j],"b":studies[i]});
                row.append("svg")
                    .classed("tc-grid-box", true)
                    .classed("tc-graph", true)
                    .attr("viewBox","0 0 "+view_size+" "+view_size)
                    .style("width",grid_size+"%");
            } else {
                row.append("svg")
                    .classed("tc-grid-box", true)
                    .attr("viewBox","0 0 "+view_size+" "+view_size)
                    .style("width",grid_size+"%");
            }
        }
    }
    canv.append("div").classed("tc-grid-row", true);

    //set up layout
    var graphSVGs = d3.selectAll(".tc-graph");
    var graphs = graphSVGs.append("g");
    graphs.append("rect")
        .classed("tc-background",true)
        .attr("x","0")
        .attr("y","0")
        .attr("width",view_size)
        .attr("height",view_size);
    if (num_studies>2){
        //set up transition on click
        graphs.on('click', function(d,i){
            var graph = d3.select(this.parentNode);
            var duration = 250;
            if (graph.classed("tc-expanded") && !graph.attr("inTrans")){
                var placeholder = canv.selectAll(".tc-grid-row").select(".placeholder");
                var graphPos = placeholder.node().getBoundingClientRect();
                var canvPos = canv.node().getBoundingClientRect();
                var graphWidth = graphPos.right-graphPos.left;
                var canvWidth = (canvPos.right-canvPos.left);
                graph.attr("inTrans",true)
                     .style("width",canvWidth*0.99+"px");
                graph.transition()
                     .style("top",(graphPos.top-canvPos.top)+"px")
                     .style("left",(graphPos.left-canvPos.left)+"px")
                     .style("width",graphWidth+"px")
                     .duration(duration);
                setTimeout(function(){ 
                    graph.attr("inTrans",null);
                    placeholder.remove();
                    graph.classed("tc-expanded",false)
                         .style("width",grid_size+"%"); }, duration+30);
            } else if (!graph.attr("inTrans")) {
                var graphPos = graph.node().getBoundingClientRect();
                var canvPos = canv.node().getBoundingClientRect();
                var graphWidth = graphPos.right-graphPos.left;
                var canvWidth = (canvPos.right-canvPos.left);
                graph.style("top",(graphPos.top-canvPos.top)+"px")
                     .style("left",(graphPos.left-canvPos.left)+"px")
                     .style("width",graphWidth+"px");
                graph.classed("tc-expanded",true)
                     .transition()
                     .style("width",canvWidth*0.99+"px")
                     .style("top",canvWidth*0.005+"px")
                     .style("left",canvWidth*0.005+"px")
                     .duration(duration);
                var pn = canv.selectAll(".tc-grid-row").select(".tc-expanded").select(function(d){return this.parentNode;})
                    .insert('svg',".tc-expanded + *")
                    .classed("tc-grid-box", true)
                    .classed("placeholder", true)
                    .attr("viewBox","0 0 "+view_size+" "+view_size)
                    .style("width",grid_size+"%");
                setTimeout(function(){ 
                    graph.style("width","99%")
                         .style("top","0.5%")
                         .style("left","0.5%"); }, duration+30);
            }
        });
    } else{
      graphs.each(function(d){
        d3.select(this.parentNode).classed("tc-expanded",true).style("position","static");
      });
    }

    //assign grid locations study pairs
    graphs.data(pairwise_data);

    //draw graphs
    graphs.each(function(study_pair){
        var axis_offset = 70;
        var current_graph = d3.select(this);
        var Xscale = d3.scale.linear().range([0, view_size-axis_offset*2]);
        var Yscale = d3.scale.linear().range([view_size-axis_offset*2, 0]);
        var color = d3.scale.category10();
        var Xaxis = d3.svg.axis().scale(Xscale).orient("bottom").ticks(10);
        var Yaxis = d3.svg.axis().scale(Yscale).orient("left").ticks(10);
        var xBounds = d3.extent(study_pair.a.values.concat(study_pair.b.values), function(d) { return d.value; });
        var yBounds = xBounds;
        Xscale.domain(xBounds).nice();
        Yscale.domain(yBounds).nice();
        console.log(Xscale.domain());

        //axes!
        current_graph.append("g")
          .classed("tc-graph-axis",true)
          .attr("transform", "translate("+axis_offset+"," + (view_size-axis_offset) + ")")
          .call(Xaxis)
          .append("text")
          .attr("x", view_size/2-axis_offset)
          .attr("y", 50)
          .text(study_pair.a.values[0].studyName+": "+variable_name);
        current_graph.append("g")
          .classed("tc-graph-axis",true)
          .attr("transform", "translate("+axis_offset+","+axis_offset+")")
          .call(Yaxis)
          .append("text")
          .attr("transform", "rotate(-90)")
          .attr("x", -view_size/2+axis_offset)
          .attr("y", -40)
          .text(study_pair.b.values[0].studyName+": "+variable_name);

        //parse/filter data!
        var accessions = d3.nest().key(function(d) {return d.accession;})
                           .entries(study_pair.a.values.concat(study_pair.b.values))
                           .filter(function(d) {
                              var uniqueStudies = {}
                              for (var i = d.values.length - 1; i >= 0; i--) {
                                uniqueStudies[d.values[i].study]=1;
                              }
                              return Object.keys(uniqueStudies).length>1;
                           })
                           .map(function(d) {
                              var firstStudy = d.values[0].study;
                              var x = d.values[0].value
                              var name = d.values[0].accessionName
                              for (var i = d.values.length - 1; i >= 0; i--) {
                                if (d.values[i].study!=firstStudy){
                                  y = d.values[i].value
                                  break;
                                }
                              }
                              return {
                               key:d.key,
                               name:name,
                               x:x,
                               y:y
                             }
                           });     
        //create plot points using data        
        var plotpoints = current_graph.selectAll(".tc-scatter-point")
          .data(accessions)
          .enter().append("g").classed("tc-scatter-point",true)
        plotpoints.append("circle")
          .attr("r", 4)
          .attr("cx", function(d) { return Xscale(d.x)+axis_offset; })
          .attr("cy", function(d) { return Yscale(d.y)+axis_offset; });
        plotpoints.append("circle")
          .attr("r", 15)
          .attr("cx", function(d) { return Xscale(d.x)+axis_offset; })
          .attr("cy", function(d) { return Yscale(d.y)+axis_offset; })
          .style("opacity","0");

        //add line of best fit and rsquared
        
        var best_fit = lineOfBestFit(accessions);
        console.log(best_fit);

        var x1 = Xscale.domain()[0];
        var y1 = best_fit.slope*x1+best_fit.yIntercept;
        if (y1<Yscale.domain()[0]){
          y1 = Yscale.domain()[0];
          x1 = (y1-best_fit.yIntercept)/best_fit.slope;
        }

        var x2 = Xscale.domain()[1];
        var y2 = best_fit.slope*x2+best_fit.yIntercept;
        if (y2>Yscale.domain()[1]){
          y2 = Yscale.domain()[1];
          x2 = (y2-best_fit.yIntercept)/best_fit.slope;
        }

        current_graph.insert('line',".tc-scatter-point")
          .classed('tc-fit-line',true)
          .attr({
            x1: Xscale(x1)+axis_offset+1,
            y1: Yscale(y1)+axis_offset+1,
            x2: Xscale(x2)+axis_offset-1,
            y2: Yscale(y2)+axis_offset-1
          });
        current_graph.append('text')
          .classed("tc-info-text",true)
          .attr('x',view_size- axis_offset )
          .attr('y',30)
          .text("r^2 = "+best_fit.rsquared.toFixed(3));
        current_graph.append('text')
          .classed("tc-info-text",true)
          .attr('x',view_size- axis_offset )
          .attr('y',50)
          .text("y = "+best_fit.slope.toFixed(3)+"x + "+best_fit.yIntercept.toFixed(3));

        //tooltip
        var tooltip = current_graph.append('g')
          .classed("tc-tool-tip",true)
        tooltip.append('rect').classed("tc-tool-tip-rect",true)
          .attr({
            x:-15,
            y:-38,
            width: 100,
            height: 30
          });
        tooltip.append('text').classed("tc-tool-tip-text",true)
          .attr({
            x:10-15,
            y:20-38
          })
          .text("");
        var trianglePoints = "-5 -8.5, 0 0, 5 -8.5"
        tooltip.append('polyline')
          .attr('points', trianglePoints)
          .classed("tc-tool-tip-point",true);

        tooltip.setTip = function (visible,text,x,y){
          if (!visible){
            this.hoverlock = false;
            var this_tooltip = this;
            setTimeout(function(){
              if (!this_tooltip.hoverlock){
                this_tooltip.attr("transform", "translate("+0+"," +0+")")
                  .transition().style("opacity",0);
              } 
            },100);
          } else{
            this.hoverlock = true;
            var width = this.attr("transform", "translate("+x+"," +y+")")
              .select("text")
              .html(text).node().getComputedTextLength();
            this.select("text").selectAll("*").attr("fill","#fff");
            this.select("rect").attr("width",width+20);
            this.transition().style("opacity",1);
          }
        }
        tooltip.hoverlock = false;
        tooltip.on("mouseover",function(d){
          tooltip.hoverlock = true;
        });
        tooltip.on("mouseout",function(d){
          tooltip.hoverlock = false;
          tooltip.setTip(false);
        });
        tooltip.on("click",function(d){d3.event.stopPropagation();});
        tooltip.setTip(false);

        plotpoints.on("mouseover",function(d){
          if (d3.select(this.parentNode.parentNode).classed("tc-expanded")){
            tooltip.setTip(true,"<a target='_blank' href='/stock/"+d.key+"/view'>"+d.name+"</a>",Xscale(d.x)+axis_offset,Yscale(d.y)+axis_offset);
          }
        });
        plotpoints.on("mouseout",function(d){
          tooltip.setTip(false)
        });
    });

    //draw graph-grid label axes!
    var label_width = grid_size;
    var label_height = 3;
    var tops = d3.select('.tc-canv').insert('div',":first-child")
                 .classed("tc-grid-row",true)
                 .classed("label-row",true)
                 .selectAll(".tc-top-label")
                 .data(studies.slice(1,studies.length)).enter()
                 .append('svg').classed("tc-top-label",true)
                 .attr("viewBox","0 0 "+label_width*10+" "+label_height*10)
                 .style("width",grid_size+"%")
                 .append('g')
                 .append("text")
                 .classed("tc-label-text",true)
                 .attr("x", label_width*10/2)
                 .attr("y", label_height*10/2+6)
                 .text(function(d){return d.values[0].studyName;});
    var lefts = d3.select('.tc-canv').selectAll(".tc-grid-row:not(.label-row)")
                 .insert('svg',":first-child")
                 .data(studies.slice(0,studies.length-1))
                 .classed("tc-left-label",true)
                 .attr("viewBox","0 0 "+label_height*10+" "+label_width*10)
                 .style("width","3%")//.style("background","lightblue")
                 .append('g')
                 .attr("transform", "rotate(-90)")
                 .append("text")
                 .classed("tc-label-text",true)
                 .attr("x", -label_width*10/2)
                 .attr("y", label_height*10/2+6)
                 .text(function(d){return d.values[0].studyName;});

}

function lineOfBestFit(points){
  var xbar = 0;
  var ybar = 0;
  for (var i in points){
    xbar+=points[i].x;
    ybar+=points[i].y;
  }
  xbar = xbar/points.length;
  ybar = ybar/points.length;
  var sum1 = 0;
  var sum2 = 0;
  for (var i in points){
    sum1+=(points[i].x-xbar)*(points[i].y-ybar);
    sum2+=(points[i].x-xbar)*(points[i].x-xbar);
  }
  var slope = sum1/sum2;
  var yIntercept = ybar-slope*xbar;

  var SSE = 0;
  var SSTO = 0;
  for (var i in points){
    SSE+=Math.pow(points[i].y-(slope*points[i].x+yIntercept),2);
    SSTO+=Math.pow(points[i].y-ybar,2);
  }

  return {
    slope:slope,
    yIntercept:yIntercept,
    xIntercept:(-yIntercept)/slope,
    rsquared: 1-(SSE/SSTO)
  };
}
			
</script>
