
<%args>
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery', 'jqueryui', 'jquery.iframe-post-form' ] &>

<div class="modal fade" id="upload_sequence_metadata_workflow_modal" name="upload_high_dim_phenotypes_spreadsheet_dialog" tabindex="-1" role="dialog" aria-labelledby="addHighDimDataDialog">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="addHighDimDataDialog">Upload Sequence Metadata</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            
          <&| /util/workflow.mas, id=> "upload_sequence_metadata_workflow" &>
            
            <!-- Step 1: Intro -->
            <&| /util/workflow.mas:step, title=> "Intro" &>
              <& /page/page_title.mas, title=>"Upload Sequence Metadata" &>
              <div class="well">
                  <p>This workflow will guide you through the process of uploading sequence metadata to the database using a 
                  <a href="https://m.ensembl.org/info/website/upload/gff3.html">gff3-formatted</a> file.</p>
                  <p>The following gff3 columns are used by the sequence metadata uploader:</p>
                  <ul>
                    <li>
                      <strong>#1 / seqid:</strong> The name of the database feature (ie chromosome) the metadata is associated with<br />
                      <em>The names in this column must match existing features in the database.</em>
                    </li>
                    <li><strong>#4 / start:</strong> The metadata's start position</li>
                    <li><strong>#5 / end:</strong> The metadata's end position</li>
                    <li><strong>#6 / score:</strong> The primary score attribute of the metadata</li>
                    <li>
                      <strong>#9 / attributes:</strong> Secondary key/value attributes to be saved with the score<br />
                      <em>The attribute key cannot be either <strong>score</strong>, <strong>start</strong>, or <strong>end</strong>.</em>
                    </li>
                  </ul>
              </div>

              <div class="center">
                <button class="btn btn-primary" id="sequence_metadata_intro_step">Go to Next Step</button>
              </div>
            </&>
            <!-- End Intro -->


            <!-- Step 2: Data Type -->
            <&| /util/workflow.mas:step, title=> "Data Type" &>
              <& /page/page_title.mas, title=>"Select the type of sequence metadata" &>
              <br /><br />
              <form class="form-horizontal">
                <div class="form-group">
                  <label class="col-sm-3 control-label">Data Type:&nbsp;</label>
                  <div class="col-sm-9">
                    <div id="sequence_metadata_upload_type_select_div">Loading...</div>
                    <br />
                    <div class="well">
                      <p><span class="glyphicon glyphicon-info-sign"></span>&nbsp;<span id="sequence_metadata_upload_type_definition"></span></p>
                    </div>
                  </div>
                </div>
              </form>
              <p><span class="glyphicon glyphicon-question-sign"></span>&nbsp;If your data is not one of the above data types, please <a href="/contact/form">contact us</a> about adding a new data type.</p>
              
              <br /><br />

              <div class="center">
                <button class="btn btn-primary" id="sequence_metadata_upload_type_step">Go to Next Step</button>
              </div>
            </&>
            <!-- End Data Type -->


            <!-- Step 3: Protocol Info -->
            <&| /util/workflow.mas:step, title=> "Protocol Info" &>
              <& /page/page_title.mas, title=>"Select a protocol for how your data was generated or create a new protocol" &>

              <!-- Will be filled with existing protocol table -->
              <div id="sequence_metadata_upload_protocol_select"></div>
              
              <!-- Form for creating a new protocol -->
              <div id="sequence_metadata_upload_protocol_div" style="display:none">
                <form class="form-horizontal" id="sequence_metadata_upload_protocol_form" name="sequence_metadata_upload_file_form">

                  <h3>Protocol Information</h3>
                  
                  <!-- Protocol Name -->
                  <div class="form-group">
                    <label class="col-sm-3 control-label">Protocol Name: </label>
                    <div class="col-sm-9">
                      <input class="form-control" id="sequence_metadata_upload_protocol_name" type="text">
                    </div>
                  </div>

                  <!-- Protocol Description -->
                  <div class="form-group">
                    <label class="col-sm-3 control-label">Protocol Description: </label>
                    <div class="col-sm-9">
                      <textarea class="form-control" id="sequence_metadata_upload_protocol_description" rows="5" placeholder="Include a description of the methods used to generate the data"></textarea>
                    </div>
                  </div>

                  <!-- Sequence Metadata Type -->
                  <div class="form-group">
                    <label class="col-sm-3 control-label">Sequence Metadata Type: </label>
                    <div class="col-sm-9">
                      <input class="form-control" id="sequence_metadata_upload_protocol_sequence_metadata_type" type="text" disabled>
                    </div>
                  </div>
                  
                  <!-- Reference Genome -->
                  <div class="form-group">
                    <label class="col-sm-3 control-label">Reference Genome: </label>
                    <div class="col-sm-9">
                      <select class="form-control" id="sequence_metadata_upload_protocol_reference_genome" disabled>
                        <option value="">Loading...</option>
                      </select>
                    </div>
                  </div>

                  <!-- Attribute Descriptions -->
                  <h3>Attribute Descriptions</h3>

                  <div class="form-group">
                    <label class="col-sm-3 control-label">Score Description: </label>
                    <div class="col-sm-9">
                      <input class="form-control" id="sequence_metadata_upload_score_description" type="text" placeholder="Include a description of the values in the 'score' column">
                    </div>
                  </div>

                  <br />
                  <p><strong>Add a description for each of the key/value pairs included in the attributes column.</strong></p>

                  <div class="form-group">
                    <label class="col-sm-3 control-label">Attribute Key: </label>
                    <div class="col-sm-9">
                      <input class="form-control" id="sequence_metadata_upload_new_attribute_key" type="text" placeholder="Enter attribute key">
                    </div>
                  </div>

                  <div class="form-group">
                    <label class="col-sm-3 control-label">Attribute Description: </label>
                    <div class="col-sm-9">
                      <input class="form-control" id="sequence_metadata_upload_new_attribute_description" type="text" placeholder="Enter a description of this attribute">
                    </div>
                  </div>

                  <div class="form-group center">
                    <button class="btn btn-info" id="sequence_metadata_upload_new_attribute_submit">Save Attribute</button>
                  </div>

                  <div>
                    <p><strong>Saved Attributes:</strong></p>
                    <table id="sequence_metadata_upload_new_attributes_table" class="table table-striped table-hover">
                      <tr>
                        <th>Key</th>
                        <th>Description</th>
                        <th></th>
                      </tr>
                    </table>
                  </div>

                </form>
              </div>
              <!-- End new protocol form -->

              <br /><br />

              <!-- Toggle New / Existing Protocol -->
              <div class="center">
                <button class="btn btn-info" id="sequence_metadata_upload_new_protocol"><span class="glyphicon glyphicon-plus"></span>&nbsp;Create New Protocol</button>
              </div>

              <br /><br />

              <div class="center">
                <button class="btn btn-primary" id="sequence_metadata_upload_protocol_step">Go to Next Step</button>
              </div>

            </&>
            <!-- End Protocol Info -->


            <!-- Step 4: Upload -->
            <&| /util/workflow.mas:step, title=> "Upload" &>
              <& /page/page_title.mas, title=>"Upload your gff3 file" &>
              <br /><br />

              <p>Select your gff3 file to upload.  Then, click the <strong>Verify</strong> button to upload your file and check its format and contents.  If 
              successfully verified, click the <strong>Store</strong> button to store the data in the database.</p>

              <br /><br />

              <form id="sequence_metadata_upload_file_form" class="form-horizontal" enctype="multipart/form-data">
                <div class="form-group">
                  <label class="col-sm-3 control-label">Select GFF3 File: </label>
                  <div class="col-sm-9" >
                      <input type="file" id="sequence_metadata_upload_file_input" name="sequence_metadata_upload_file_input" encoding="multipart/form-data" />
                  </div>
                </div>
              </form>

              <br /><br />

              <div class="center">
                <button id="sequence_metadata_upload_verify" class="btn btn-info">Verify</button>
                <button id="sequence_metadata_upload_store" class="btn btn-primary" disabled>Store</button>
              </div>

              <br /><br />

              <div id="sequence_metdata_upload_messages"></div>
            </&>
            <!-- End Upload -->

          </&>

        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<style>
  div.center {
    text-align: center
  }
</style>

<script>
jQuery(document).ready(function() {

    // Start SMD Upload Workflow
    jQuery('#upload_smd').click( function() {
        jQuery('#upload_sequence_metadata_workflow_modal').modal("show");
    });


    // Complete the Intro Step
    var sequence_metadata_data_types = [];
    jQuery('#sequence_metadata_intro_step').click(function() {

      // Get and set the data types
      jQuery.ajax({
        type: 'GET',
        dataType: 'json',
        url: '/ajax/html/select/sequence_metadata_types?id=sequence_metadata_upload_type_select',
        success: function(data) {
          if ( data && data.select && data.json ) {
            sequence_metadata_data_types = data.json;
            jQuery('#sequence_metadata_upload_type_select_div').html(data.select);
            jQuery('#sequence_metadata_upload_type_select').on('change', function() {
              setDataTypeDefinition(this.value);
            });
            setDataTypeDefinition(data.json[0].id);
          }
          else {
            alert("ERROR: Could not load data types!");
          }
        },
        error: function() {
          alert("ERROR: Could not load data types!");
        }
      });

      Workflow.complete('#sequence_metadata_intro_step');
      Workflow.focus('#upload_sequence_metadata_workflow', 1);
    });


    // Update Data Type Definition
    function setDataTypeDefinition(id) {
      for ( let i = 0; i < sequence_metadata_data_types.length; i++ ) {
        if ( parseInt(sequence_metadata_data_types[i].id) === parseInt(id) ) {
          jQuery('#sequence_metadata_upload_type_definition').html(sequence_metadata_data_types[i].definition);
        }
      }
    }


    // Complete the Data Type Step
    var sequence_metadata_upload_type_id = undefined;
    jQuery('#sequence_metadata_upload_type_step').click(function() {
      sequence_metadata_upload_type_id = jQuery('#sequence_metadata_upload_type_select').val();

      // Set the existing protocol list
      get_select_box('sequence_metadata_protocols', 'sequence_metadata_upload_protocol_select', {'checkbox_name': 'sequence_metadata_upload_protocol_id', 'sequence_metadata_data_type_id': sequence_metadata_upload_type_id});
      for ( let i = 0; i < sequence_metadata_data_types.length; i++ ) {
        if ( parseInt(sequence_metadata_data_types[i].id) === parseInt(sequence_metadata_upload_type_id) ) {
          jQuery('#sequence_metadata_upload_protocol_sequence_metadata_type:text').val(sequence_metadata_data_types[i].name);
        }
      }

      // Set the reference genome list
      jQuery.ajax({
        type: 'GET',
        dataType: 'json',
        url: '/ajax/sequence_metadata/reference_genomes',
        success: function(data) {
          if ( data && data.maps ) {
            let options = "";
            for ( let i = 0; i < data.maps.length; i++ ) {
              let map_id = data.maps[i].map_id;
              let map_name = data.maps[i].long_name ? data.maps[i].long_name : data.maps[i].short_name;
              let map_label = map_name;
              if ( data.maps[i].parent1_genus || data.maps[i].parent1_species ) {
                map_label += " (" + data.maps[i].parent1_genus + " " + data.maps[i].parent1_species;
                if ( data.maps[i].parent2_genus || data.maps[i].parent2_species ) {
                  map_label += " x " + data.maps[i].parent2_genus + " " + data.maps[i].parent2_species;
                }
                map_label += ")";
              }
              options += "<option value='" + map_id + "'>" + map_label + "</option>";
            }
            jQuery('#sequence_metadata_upload_protocol_reference_genome').html(options);
            jQuery('#sequence_metadata_upload_protocol_reference_genome').prop('disabled', false);
          }
          else {
            alert("ERROR: Could not load reference genomes!");
          }
        },
        error: function() {
          alert("ERROR: Could not load reference genomes");
        }
      });

      Workflow.complete("#sequence_metadata_upload_type_step");
      Workflow.focus('#upload_sequence_metadata_workflow', 2);
    });


    // Toggle the existing protocol table / new protocol form
    jQuery('#sequence_metadata_upload_new_protocol').click(function() {
      jQuery('#sequence_metadata_upload_protocol_div').toggle();
      jQuery('#sequence_metadata_upload_protocol_select').toggle();
      jQuery('#sequence_metadata_upload_new_protocol').html(jQuery('#sequence_metadata_upload_protocol_select').is(':visible') ? "<span class='glyphicon glyphicon-plus'></span>&nbsp;Create New Protocol" : "<span class='glyphicon glyphicon-ok'></span>&nbsp;Select Existing Protocol");
    });


    // Save a new attribute description
    var new_attribute_count = 0;
    jQuery('#sequence_metadata_upload_new_attribute_submit').click(function() {
      new_attribute_count++;

      let key = jQuery('#sequence_metadata_upload_new_attribute_key').val();
      let description = jQuery('#sequence_metadata_upload_new_attribute_description').val();
      if ( !key || key === "" || !description || description === "" ) {
        alert("An attribute key and description are required!");
        return false;
      }

      let html = "<tr id='sequence_metadata_upload_new_attributes_table_row_" + new_attribute_count + "'>";
      html += "<td>" + key + "<input type='hidden' name='sequence_metadata_upload_attribute_key_" + new_attribute_count + "' id='sequence_metadata_upload_attribute_key_" + new_attribute_count + "' value='" + key + "'></td>";
      html += "<td>" + description + "<input type='hidden' name='sequence_metadata_upload_attribute_description_" + new_attribute_count + "' id='sequence_metadata_upload_attribute_description_" + new_attribute_count + "' value='" + description + "'</td>";
      html += "<td style='text-align: right'><button id='sequence_metadata_upload_new_attributes_table_remove_" + new_attribute_count + "' data-row='" + new_attribute_count + "' class='btn btn-danger btn-xs'><span class='glyphicon glyphicon-remove'></span></button></td>";
      html += "</tr>";

      jQuery('#sequence_metadata_upload_new_attribute_key').val("");
      jQuery('#sequence_metadata_upload_new_attribute_description').val("");
      jQuery('#sequence_metadata_upload_new_attributes_table').append(html);
      jQuery('#sequence_metadata_upload_new_attributes_table_remove_' + new_attribute_count).click(function() {
        let row = jQuery(this).attr('data-row');
        jQuery('#sequence_metadata_upload_new_attributes_table_row_' + row).remove();
      });

      return false;
    });

    // Complete Protocol Step
    var use_existing_protocol = undefined;
    var new_protocol_name = undefined;
    var new_protocol_description = undefined;
    jQuery('#sequence_metadata_upload_protocol_step').click(function() {
      use_existing_protocol = jQuery('#sequence_metadata_upload_protocol_select').is(':visible');
      if ( use_existing_protocol ) {
        if ( jQuery('input[name="sequence_metadata_upload_protocol_id"]:checked').length !== 1 ) {
          alert('Please select one existing protocol!');
          return false;
        }
      }
      else {
        new_protocol_name = jQuery('#sequence_metadata_upload_protocol_name').val();
        new_protocol_description = jQuery('#sequence_metadata_upload_protocol_description').val();
        if ( !new_protocol_name || new_protocol_name === "" ) {
          alert('Please enter a name for the new protocol');
          return false;
        }
        if ( !new_protocol_description || new_protocol_description === "" ) {
          alert('Please enter a description for the new protocol');
          return false;
        }
      }

      jQuery('#sequence_metadata_upload_verify').attr('disabled', false);
      jQuery('#sequence_metadata_upload_store').attr('disabled', true);

      Workflow.complete("#sequence_metadata_upload_protocol_step");
      Workflow.focus('#upload_sequence_metadata_workflow', 3);
    });


    // Upload and Verify File
    jQuery('#sequence_metadata_upload_verify').click(function() {
      let file = jQuery('#sequence_metadata_upload_file_input').val();
      if ( !file || file === '' ) {
        alert("Please select your gff file");
        return false;
      }

      jQuery('#working_msg').html("Uploading GFF File");
      jQuery('#working_modal_progress').css('width', 0).attr('aria-valuenow', 0);
      jQuery('#working_modal_progress_div').css('display', 'block');
      jQuery('#working_modal').modal("show");
      jQuery('#sequence_metdata_upload_messages').empty();
      
      
      // Build the FormData to pass as POST arguments
      let formData = new FormData();
      formData.append('file', jQuery('#sequence_metadata_upload_file_input').prop('files')[0]);
      formData.append('use_existing_protocol', use_existing_protocol);
      if ( use_existing_protocol ) {
        formData.append('existing_protocol_id', jQuery('input[name="sequence_metadata_upload_protocol_id"]:checked').val());
      }
      else {
        formData.append('new_protocol_name', new_protocol_name);
        formData.append('new_protocol_description', new_protocol_description);
        formData.append('new_protocol_sequence_metadata_type', jQuery('#sequence_metadata_upload_type_select option:selected').val());
        formData.append('new_protocol_reference_genome', jQuery('#sequence_metadata_upload_protocol_reference_genome option:selected').val());
        formData.append('new_protocol_score_description', jQuery('#sequence_metadata_upload_score_description').val());
        formData.append('new_protocol_attribute_count', new_attribute_count);
        for ( let i = 1; i <= new_attribute_count; i++ ) {
          formData.append('new_protocol_attribute_key_' + i, jQuery('#sequence_metadata_upload_attribute_key_' + i).val());
          formData.append('new_protocol_attribute_description_' + i, jQuery('#sequence_metadata_upload_attribute_description_' + i).val());
        }
      }

      // Make the POST request
      jQuery.ajax({
        url: '/ajax/sequence_metadata/file_upload_verify',
        type: 'POST',
        data: formData,
        cache: false,
        contentType: false,
        processData: false,
        xhr: function () {
          var myXhr = jQuery.ajaxSettings.xhr();
          if (myXhr.upload) {
            myXhr.upload.addEventListener('progress', function (e) {
              if (e.lengthComputable) {
                let prog = (e.loaded / e.total)*100;
                jQuery('#working_modal_progress').css('width', prog + "%").attr('aria-valuenow', prog);
                if ( prog >= 100 ) {
                  jQuery('#working_msg').html("Verifying GFF File");
                }
              }
            }, false);
          }
          return myXhr;
        },
        success: function(response) {
          jQuery('#working_msg').html("");
          jQuery('#working_modal_progress').css('width', 0).attr('aria-valuenow', 0);
          jQuery('#working_modal_progress_div').css('display', 'none');
          jQuery('#working_modal').modal("hide");

          console.log("RESPONSE");
          console.log(response);

          // Build Response Messages
          let message_text = "<hr><ul class='list-group'>";
          if ( response && response.error ) {
            message_text += "<li class='list-group-item list-group-item-danger'>";
            message_text += "<span class='badge'><span class='glyphicon glyphicon-remove'></span></span>";
            message_text += response.error;
            message_text += "</li>";
          }
          else if ( response && response.success ) {
            if ( response.success.processed === 1 ) {
              message_text += "<li class='list-group-item list-group-item-success'>";
              message_text += "<span class='badge'><span class='glyphicon glyphicon-ok'></span></span>";
              message_text += "File successfully uploaded and processed";
              message_text += "</li>";
            }
            else {
              message_text += "<li class='list-group-item list-group-item-danger'>";
              message_text += "<span class='badge'><span class='glyphicon glyphicon-remove'></span></span>";
              message_text += "ERROR: File not successfully uploaded and processed!";
              message_text += "</li>";
            }
            
            if ( response.success.verified === 1 ) {
              message_text += "<li class='list-group-item list-group-item-success'>";
              message_text += "<span class='badge'><span class='glyphicon glyphicon-ok'></span></span>";
              message_text += "File successfully verified";
              message_text += "</li>";
            }
            else {
              message_text += "<li class='list-group-item list-group-item-danger'>";
              message_text += "<span class='badge'><span class='glyphicon glyphicon-remove'></span></span>";
              message_text += "ERROR: File not successfully verfied!";
              message_text += "</li>";
            }

            if ( response.success.missing_features && response.success.missing_features.length > 0 ) {
              message_text += "<li class='list-group-item list-group-item-danger'>";
              message_text += "<span class='badge'><span class='glyphicon glyphicon-remove'></span></span>";
              message_text += "ERROR: The following features do not exist in the database.  Contact us to have them added or change the feature names to match existing features.";
              message_text += "<ul>";
              for ( let i = 0; i < response.success.missing_features.length; i++ ) {
                message_text += "<li>" + response.success.missing_features[i] + "</li>";
              }
              message_text += "</ul>";
              message_text += "</li>";
            }
          }
          message_text += "</ul>";

          // Enable the Store button if processed and verified
          if ( response && response.success && response.success.processed && response.success.processed === 1 && response.success.verified && response.success.verified === 1 ) {
            jQuery('#sequence_metadata_upload_verify').attr('disabled', true);
            jQuery('#sequence_metadata_upload_store').attr('disabled', false);
            message_text += "<br /><br />";
            message_text += "<p><strong>Next, click the <em>Store</em> button to save the data to the database.</p>";
          }

          jQuery('#sequence_metdata_upload_messages').html(message_text);

        },
        error: function() {
          jQuery('#working_msg').html("");
          jQuery('#working_modal_progress').css('width', 0).attr('aria-valuenow', 0);
          jQuery('#working_modal_progress_div').css('display', 'none');
          jQuery('#working_modal').modal("hide");

          alert("ERROR: Could not upload and verify gff file due to server error!");
        }
      });

    }); 

});
</script>