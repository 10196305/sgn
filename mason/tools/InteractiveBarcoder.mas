
<%doc>


</%doc>

<%args>

</%args>

<& '/page/page_title.mas', title => "Barcoder" &>

<& '/util/import_javascript.mas', classes => [ 'jquery', 'jqueryui', 'popup', 'd3.d3Min.js' ] &>


<div class="row">
  <div class="col-md-3">
    <div>
      <label>Grid</label>
      <div class="form-group">
        <input id="d3-grid-slider" class="input-sm" type="range"> 
        <span><input id="d3-snapping-check" type="checkbox" checked> Snap&nbsp;&nbsp;&nbsp;</span><input id="d3-grid-number" class="input-sm" type="number">
      </div>
      <br>
      <label>Barcode</label>
      <select id="d3-barcode-select" class="input-sm form-group"></select>
      <br>
      <label>Text</label>
      <div class="form-group">
        <input id="d3-font-size-input" class="input-sm" type="number" min="5" max="72" suffix="px">
        <input id="d3-text-content" class="input-sm" type="text">
        <button id="d3-new-textbox" class="btn form-group"> New </button>
      </div>
    </div>
    <div class="panel">
      <div class="panel-body">
        List of placeholders: <br>
        %trial  <br>
        %program <br>
        %plot <br>
      </div>
    </div>
    <button id="d3-save-button" class="btn btn-primary form-group"> Save </button>
    <a id="link"> link </a>
  </div>
  <div class="d3-draw-area"></div>
</div>


<script>
var barcode_types = [
  {name:"barc_type A",width:1*72,height:0.5*72},
  {name:"barc_type B",width:1*72,height:72},
  {name:"barc_type C",width:1*72,height:0.25*72}
];

//set up drag behaviour
var drag_behaviour = d3.behavior.drag().on(
  "drag", function(){
    var o = d3.select(this)
    var ox = parseFloat(o.attr("t-x"));
    var oy = parseFloat(o.attr("t-y"));
    var newX = ox+d3.event.dx;
    var newY = oy+d3.event.dy;
    o.attr({
      "transform": "translate("+newX+","+newY+")",
      "t-x": newX,
      "t-y": newY
    });
});
function draggable(d,i){
  this.attr({
      "t-x": 0,
      "t-y": 0
    })
    .call(drag_behaviour);
}

function outlineable(d,i){
  this.on("mouseover", function(){
    var o = d3.select(this);
    var bb = this.getBBox();
    o.append("rect")
      .classed("d3-outline",true)
      .attr({
        x:bb.x,
        y:bb.y,
        width:bb.width,
        height:bb.height,
        fill:"none",
        stroke: "red",
        "stroke-width":1
      })
  }).on("mouseout",function(){
    d3.select(this)
      .selectAll(".d3-outline")
      .remove()
  })
}

$(document).ready(function($) {
  //begin settings
  var draw_height = 144;
  var draw_width = 288;
  //end settings
  
  //create svg canvas
  var svg = d3.select(".d3-draw-area")
    .append('svg')
    .attr({
      id: "svg-object-1",
      width: 600,
      height: draw_height/draw_width*600,
      viewBox: "0 0 "+draw_width+" "+draw_height
  });

  //set up background
  svg.append('rect')
    .classed("d3-bg",true)
    .attr({
      x:0,
      y:0,
      width:draw_width,
      height:draw_height,
      fill:"#eee"
    })
  
  //set up grid and grid slider/input
  var grid = svg.append("g").classed("d3-bg-grid",true);
  var grid_slider = d3.select("#d3-grid-slider");
  var grid_number = d3.select("#d3-grid-number");
  grid_slider.attr({
    min:10,
    max: 0.5*(draw_height<draw_width ? draw_height : draw_width),
    step: 1
  });
  grid_number.attr({
    min:10,
    max: 0.5*(draw_height<draw_width ? draw_height : draw_width),
    step: 1
  });
  grid_number.property("value",18);
  grid_slider.property("value",18);
  grid_slider.on("input",function(){
    grid_number.property("value",this.value)
    updateGrid();});
  grid_number.on("input",function(){
    grid_slider.node().value=this.value;
    updateGrid();});
  var grid_size = parseInt(grid_slider.node().value);
  updateGrid();

  //set up barcode and barcode select
  var barcode_select = d3.select("#d3-barcode-select");
  var barcode_g = svg.append("g")
    .classed("barcode",true)
    .classed("draggable",true)
    .classed("outlineable",true)
    .call(outlineable)
    .call(draggable)
    .on("mouseup", snapToGrid);
  barcode_select.selectAll("option")
    .data(barcode_types)
    .enter().append("option")
    .text(function(d){return d.name})
    .attr("value",function(d,i){return i});
  barcode_select.insert("option","*")
    .attr({"selected":true,"value":-1});
  barcode_select.on("input",function(){
    var val = d3.select(this).node().value;
    if (val>=0){
      barcode_g.html("")
      .append('rect')
        .attr({
          x:0,
          y:0,
          width:barcode_types[val].width,
          height:barcode_types[val].height,
          fill:"#333"
        })
    }

  });

  //set up text boxes
  d3.select("#d3-new-textbox").on("click",function(){
    var newTB = svg.append("g")
      .classed("text-box",true)
      .classed("draggable",true)
      .classed("outlineable",true)
      .call(draggable)
      .call(outlineable)
      .on("mouseup", snapToGrid);
    var fontSize = parseInt(d3.select("#d3-font-size-input").node().value);
    var newText = newTB.append("text")
      .attr({
        y:fontSize,
        "font-size":fontSize,
        "dominant-baseline": "mathematical",
      })
      .text(d3.select("#d3-text-content").node().value);
  })

});

function updateGrid(){
  console.log(true);
  var grid = d3.select(".d3-bg-grid").html("");
  var grid_size = parseInt(d3.select("#d3-grid-slider").node().value);
  var bg = d3.select(".d3-bg");
  var height = parseInt(bg.attr("height"));
  var width = parseInt(bg.attr("width"));
  for (var y = grid_size; y < height; y+=grid_size) {
    grid.append('line')
      .attr({
        x1: 0,
        x2: width,
        y1: y,
        y2: y,
        stroke: "rgba(0,0,0,0.2)",
        "stroke-width": 1
      });
  }
  for (var x = grid_size; x < width; x+=grid_size) {
    grid.append('line')
      .attr({
        x1: x,
        x2: x,
        y1: 0,
        y2: height,
        stroke: "rgba(0,0,0,0.2)",
        "stroke-width": 1
      });
  }
}

function snapToGrid(){
  if (d3.select("#d3-snapping-check").property("checked")){
    var grid_size = parseInt(d3.select("#d3-grid-slider").node().value);
    var o = d3.select(this);
    var ox = parseFloat(o.attr("t-x"));
    var oy = parseFloat(o.attr("t-y"));
    var bb = this.getBBox()
    var left_snap = Math.round(ox/grid_size)*grid_size
    var right_snap = Math.round((ox+bb.width)/grid_size)*grid_size-bb.width
    var top_snap = Math.round(oy/grid_size)*grid_size
    var bottom_snap = Math.round((oy+bb.height)/grid_size)*grid_size-bb.height
    var newX = (Math.abs(left_snap-ox) < Math.abs(right_snap-ox)) ? left_snap : right_snap;
    var newY = (Math.abs(top_snap-oy) < Math.abs(bottom_snap-oy)) ? top_snap : bottom_snap;
    o.attr({
      "transform": "translate("+newX+","+newY+")",
      "t-x": newX,
      "t-y": newY
    });
  }
}

$("#d3-save-button").on("click",function(event) {
  //get svg element.
  
  var svg = document.getElementById("svg-object-1");

  //get svg source.
  var serializer = new XMLSerializer();
  var source = serializer.serializeToString(svg);

  //add name spaces.
  if(!source.match(/^<svg[^>]+xmlns="http\:\/\/www\.w3\.org\/2000\/svg"/)){
      source = source.replace(/^<svg/, '<svg xmlns="http://www.w3.org/2000/svg"');
  }
  if(!source.match(/^<svg[^>]+"http\:\/\/www\.w3\.org\/1999\/xlink"/)){
      source = source.replace(/^<svg/, '<svg xmlns:xlink="http://www.w3.org/1999/xlink"');
  }

  //add xml declaration
  source = '<?xml version="1.0" standalone="no"?>\r\n' + source;
    
  //convert svg source to URI data scheme.
  var url = "data:image/svg+xml;charset=utf-8,"+encodeURIComponent(source);


  //set url value to a element's href attribute.
  document.getElementById("link").href = url;
  //you can download svg file by right click menu.
});
</script>
