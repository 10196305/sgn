
<%args>
$trial_id
</%args>

 <& /util/import_javascript.mas, classes => [ 'kinetics.kinetic.js', 'jqueryui.js', 'jquery.js', 'jstree.dist.jstree', 'd3.d3v4Min.js' ] &>

<style>
    #trait_heatmap {display: inline; }
    #trial_no_phenoMSG {display: none; }
    #traitdiv {display: none; }
    #chart {display: none; }
    
    #container_heatmap {
        //border:2px dashed #000;
        height: 390px;
        width: 700px;
        overflow: auto;
        //overflow: scroll;
        display: none;
        margin: 10px;
    }
    
    rect.bordered {
        stroke: #E6E6E6;
        stroke-width:2px;   
      }

      text.mono {
        font-size: 9pt;
        font-family: Consolas, courier;
        fill: #aaa;
      }

      text.axis-workweek {
        fill: #000;
      }

      text.axis-worktime {
        fill: #000;
      }
</style>

<div class="form-group form-group-sm" id="traitdiv" >
    <label for="trial_list_dropdown" class="col-sm-2 control-label">Select:</label>
    <div class="col-sm-10">
        <div id="traits_assayed_dropdown">
        </div>
    </div>
</div>

<div id="container_heatmap" ></div>
<div id="trait_heatmap" >loading...</div>
<div id="trial_no_phenoMSG" >Upload trial phenotypes to view trait assayed heatmap</div>
<div id="chart"></div>
<div class="col-sm-10" id="d_button" style="display:none";>
 <!-- <a id="delete_trait" class="btn btn-primary">Delete Selected Trait</a> &nbsp; --> 
</div>

<script defer="defer" type="text/javascript" >
var trial_id = <% $trial_id %>;
var value = 'plot';
var selected_trait;
jQuery(document).ready( function() {

    jQuery('#pheno_heatmap_onswitch').click( function() {
        jQuery.ajax ( {
            url : '/ajax/breeders/trial/'+ <% $trial_id %> + '/traits_assayed?stock_type='+value,
            beforeSend: function() {
              jQuery("#working_modal").modal("show");
            },
            success: function(response){
                if (response.traits_assayed[0][0]) {
                    var traits_assayed_html = "<select class='form-control' id='trial_list_dropdown'>";
                    traits_assayed_html = traits_assayed_html + "<option value=''>select trait to show heatmap</option>";
                    for (i=0; i<response.traits_assayed[0].length; i++) {
                        traits_assayed_html = traits_assayed_html + "<option value="+ response.traits_assayed[0][i][0] + " >" + response.traits_assayed[0][i][1] + "</option>";
                    }
                    traits_assayed_html = traits_assayed_html +"</select>";
                    jQuery("#trait_heatmap").css("display", "none");                    
                    jQuery("#traits_assayed_dropdown").html(traits_assayed_html);
                    jQuery("#traitdiv").css("display", "inline-block");
                    jQuery("#working_modal").modal("hide");
                } 
                else {
                    jQuery("#working_modal").modal("hide");
                    jQuery("#trait_heatmap").css("display", "none"); 
                    jQuery("#traitdiv").css("display", "none");
                    jQuery("#trial_no_phenoMSG").css("display", "inline-block");
                    
                }
            },
            error: function(response){
                alert('Error retrieving traits assayed in this trial');
            }

        });
        
    });
    

  jQuery(document).on('change', '#trial_list_dropdown', function () {
    d3.select("svg").remove(); //Remove already created heatmap.
    var selected = jQuery("#trial_list_dropdown").val();
    if (selected == ''){ }
    else {
        jQuery.ajax( {
             url: '/ajax/breeders/trial/'+trial_id+'/heatmap?selected='+selected, 
             beforeSend: function() {
               jQuery("#working_modal").modal("show");
             },
             success: function(response) {
                if (response.phenotypes.col != "" && response.phenotypes.row != ""){
                    for (i=0; i<response.phenotypes.col.length; i++) {
                        if (response.phenotypes.col[i] && response.phenotypes.row[i]){
                            //console.log(response.phenotypes.col[i]);
                        }
                    }
                    
                    jQuery("#working_modal").modal("hide");
                    jQuery("#chart").css({"display": "inline-block"});
                    jQuery("#container_heatmap").css({"display": "inline-block", "overflow": "auto"});
                    jQuery("#trait_heatmap").css("display", "none");
                    jQuery("#d_button").css("display", "inline-block");

                  var margin = { top: 50, right: 0, bottom: 100, left: 30 },
                      width = 960 - margin.left - margin.right,
                      height = 900 - margin.top - margin.bottom,
                      gridSize = Math.floor(width / 24),
                      gridSize2 = Math.floor(width / 22),
                      legendElementWidth = gridSize*2,
                      buckets = 9,
                      colors = ["#ffffd9","#edf8b1","#c7e9b4","#7fcdbb","#41b6c4","#1d91c0","#225ea8","#253494","#081d58"], // alternatively colorbrewer.YlGnBu[9]
                      rows = response.phenotypes.unique_row,
                      columns = response.phenotypes.unique_col;
                      datasets = response.phenotypes.result;
                
                  var svg = d3.select("#container_heatmap").append("svg")
                      .attr("width", width + margin.left + margin.right)
                      .attr("height", height + margin.top + margin.bottom)
                      .append("g")
                      .attr("transform", "translate(" + margin.left + "," + 100 + ")");

                  var rowLabels = svg.selectAll(".rowLabel")
                      .data(rows)
                      .enter().append("text")
                        .text(function (d) { return d; })
                        .attr("x", 0 )
                        .attr("y", function (d, i) { return i * gridSize; })
                        .style("text-anchor", "end")
                        .attr("transform", "translate(-6," + gridSize / 1.5 + ")")
                        .attr("class", function (d, i) { return ((i >= 0 && i <= 4) ? "rowLabel mono axis axis-workweek" : "rowLabel mono axis"); });

                  var columnLabels = svg.selectAll(".columnLabel")
                      .data(columns)
                      .enter().append("text")
                        .text(function(d) { return d; })
                        .attr("x", function(d, i) { return i * gridSize; })
                        .attr("y", 0 )
                        .style("text-anchor", "middle")
                        .attr("transform", "translate(" + gridSize / 2 + ", -6)")
                        .attr("class", function(d, i) { return ((i >= 7 && i <= 16) ? "columnLabel mono axis axis-worktime" : "columnLabel mono axis"); });                
                  
                  var heatmapChart = function(datasets) {
                    
                    datasets.forEach(function(d) { 

                        d.row = +d.row;
                        d.col = +d.col;
                        d.pheno = +d.pheno;    

                      var colorScale = d3.scale.quantile()
                          .domain([0, buckets - 1, d3.max(datasets, function (d) { return d.pheno; })])
                          .range(colors);
                                                
                      var cards = svg.selectAll(".col")
                          .data(datasets, function(d) {return d.row+':'+d.col;});

                      cards.append("title");                  

                      cards.enter().append("rect")
                          .attr("x", function(d) { return (d.col - 1) * gridSize; })
                          .attr("y", function(d) { return (d.row - 1) * gridSize; })
                          .attr("rx", 4)
                          .attr("ry", 4)
                          .attr("class", "col bordered")
                          .attr("width", gridSize)
                          .attr("height", gridSize)
                          .style("fill", colors[0])
                          .on("mouseover", function(d) { d3.select(this).style('fill', 'green'); console.log('over');})
                          .on("mouseout", function(d) { 
                                                          var cards = svg.selectAll(".col")
                                                              .data(datasets, function(d) {return d.row+':'+d.col;});

                                                          cards.append("title");
                                                          
                                                          cards.enter().append("rect")
                                                            .attr("x", function(d) { return (d.col - 1) * gridSize; })
                                                            .attr("y", function(d) { return (d.row - 1) * gridSize; })
                                                            .attr("rx", 4)
                                                            .attr("ry", 4)
                                                            .attr("class", "col bordered")
                                                            .attr("width", gridSize)
                                                            .attr("height", gridSize)
                                                            .style("fill", colors[0]); 
                                                            
                                                            cards.transition().duration(1000)
                                                                .style("fill", function(d) { return colorScale(d.pheno); }) ;                          

                                                            cards.select("title").text(function(d) { return d.plot_msg; }) ;
                                                            
                                                            cards.exit().remove();
                                                            console.log('out');
                                                            });

                      cards.transition().duration(1000)
                          .style("fill", function(d) { return colorScale(d.pheno); }) ;                          

                      cards.select("title").text(function(d) { return d.plot_msg; }) ;
                      
                      cards.exit().remove();
             
                      var legend = svg.selectAll(".legend")
                          .data([0].concat(colorScale.quantiles()), function(d) { return d; });
                     
                      legend.enter().append("g")
                          .attr("class", "legend");

                      legend.append("rect")
                        .attr("x", function(d, i) { return legendElementWidth * i; })
                        .attr("y", 0 - 90)
                        .attr("width", legendElementWidth)
                        .attr("height", gridSize / 2)
                        .style("fill", function(d, i) { return colors[i]; });

                      legend.append("text")
                        .attr("class", "mono")
                        .text(function(d) { return ">= " + Math.round(d); })
                        .attr("x", function(d, i) { return legendElementWidth * i; })
                        .attr("y", 0 - 90 + gridSize);

                      legend.exit().remove();
                    
                     });  
                    } ; 
                  
                  heatmapChart(datasets);
              
                }
                else  {
                
                }
             },
             error: function(reponse) {
                alert('Error displaying traits assayed heatmap');   
             }
        });
    }
    
  });
      
});

</script>
