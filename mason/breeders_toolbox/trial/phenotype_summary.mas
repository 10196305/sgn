
<%args>
$trial_id
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery', 'jquery.dataTables', 'd3.d3v4Min'] &>

<style>

.bar rect {
  fill: steelblue;
  shape-rendering: crispEdges;
}

.bar text {
  fill: #fff;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>


<div class="well well-sm table-responsive">
    <center><h4>Raw Data Statistics</h4></center>
    <br/>

    <form class="form-horizontal" role="form" >
        <div class="form-group form-group-sm">
            <label class="col-sm-3 control-label">Display: </label>
            <div class="col-sm-9" >
                <select class="form-control" id="display_trial_phenosummary">
                    <option value="plots">Trait Values for Plots in this Trial</option>
                    <option value="plants">Trait Values for Plants in this Trial</option>
                    <option value="plots_accession">Trait Values for Plots in this Trial grouped by Accession</option>
                    <option value="plants_accession">Trait Values for Plants in this Trial grouped by Accession</option>
                </select>
            </div>
        </div>
    </form>
    <hr>

    <div id="pheno_summary_table_div">
        <table id="phenotype_summary_data" class="display">
        <thead>
        <tr>
        <th>Trait</th>
        <th>Mean</th>
        <th>Min</th>
        <th>Max</th>
        <th>Std Dev</th>
        <th>CV</th>
        <th>Count</th>
        <th>Percent Missing</th>
        <th>Histogram</th>
        </tr>
        </thead>
        <tbody>
        </tbody>
        </table>
    </div>
</div>

<div class="well well-sm" id="raw_data_histogram_well">
    <center><h4>Raw Data Histogram</h4></center><hr>
    <div id="trial_summary_hist_div">
        <div class="row">
            <div class="col-sm-8">
                <form class="form-horizontal">
                    <div class="form-group form-group-sm">
                        <label for="trial_summary_hist_dropdown" class="col-sm-2 control-label">Select:</label>
                        <div class="col-sm-10">
                            <div id="traits_assayed_dropdown">
                            </div>
                        </div>
                    </div>
                    <div class="form-group form-group-sm">
                        <label class="col-sm-2 control-label">Display: </label>
                        <div class="col-sm-10" >
                            <select class="form-control" id="display_trial_phenosummary_hist">
                                <option value="plot">Values for Plots in this Trial</option>
                                <option value="plant">Values for Plants in this Trial</option>
                            </select>
                        </div>
                    </div>
                </form>
                <br/>

            </div>
            <div class="col-sm-4" id="traits_assayed_histogram_cvterm_link">
            </div>
        </div>

        <div id="trial_summary_hist">
        </div>

    </div>
</div>


<link rel="stylesheet" type="text/css" href="/documents/inc/datatables/jquery.dataTables.css">

<script>
// wrap code in an immediately invoked function, so we can use d3v4 as d3;
(function(){
var d3 = d3v4;
jQuery(document).ready(function () {
    jQuery("#display_trial_phenosummary_hist").change(function(){
      trait_summary_hist_display_change(this.value);
    });
    jQuery('#trial_detail_traits_assayed_onswitch').click( function() {

        datatables_display_phenosummary();

        jQuery(document).on('change', '#display_trial_phenosummary', function() {
            var html = '';
            var display = jQuery('#display_trial_phenosummary').val();
            if (display == 'plots' || display == 'plants') {
                html = html +'<table id="phenotype_summary_data" class="display"><thead><tr><th>Trait</th><th>Mean</th><th>Min</th><th>Max</th><th>Std Dev</th><th>CV</th><th>Count</th><th>Percent Missing</th><th>Histogram</th></tr></thead><tbody></tbody></table>';
            }
            if (display == 'plots_accession' || display == 'plants_accession') {
                html = html +'<table id="phenotype_summary_data" class="display"><thead><tr><th>Accession</th><th>Trait</th><th>Mean</th><th>Min</th><th>Max</th><th>Std Dev</th><th>CV</th><th>Count</th><th>Percent Missing</th><th>Histogram</th></tr></thead><tbody></tbody></table>';
            }
            jQuery('#pheno_summary_table_div').empty().html(html);
            datatables_display_phenosummary();
        });

        trait_summary_hist_display_change('plot');

    });

    jQuery('#phenotype_summary_data').on('click', 'a[href^="#"]', function(event) {
        //console.log("scrolling histo into view");
        var offset = jQuery(window).height() - jQuery('#raw_data_histogram_well').height() - 40;
        var target = jQuery(this.getAttribute('href'));
        if( target.length ) {
            event.preventDefault();
            jQuery('html, body').stop().animate({
                scrollTop: target.offset().top - offset
            }, 1500);
        }
    });

});

function datatables_display_phenosummary() {
    jQuery('#phenotype_summary_data').DataTable( {
        "retrieve": true,
        "ajax": '/ajax/breeders/trial/'+ <% $trial_id %> + '/phenotypes?display='+jQuery('#display_trial_phenosummary').val(),
    });
}

function trait_summary_hist_display_change(value) {
    jQuery.ajax ( {
        url : '/ajax/breeders/trial/'+ <% $trial_id %> + '/traits_assayed?stock_type='+value,
        beforeSend: function() {
            jQuery("#working_modal").modal("show");
        },
        success: function(response){
            //console.log(response);
            if (response.traits_assayed[0][0]) {
                var traits_assayed_html = "<select class='form-control' id='trial_summary_hist_dropdown'>";
                for (i=0; i<response.traits_assayed[0].length; i++) {
                    traits_assayed_html = traits_assayed_html + "<option value="+ response.traits_assayed[0][i][0] + " >" + response.traits_assayed[0][i][1] + "</option>";
                }
                traits_assayed_html = traits_assayed_html +"</select>";
                jQuery("#traits_assayed_dropdown").html(traits_assayed_html);
                jQuery("#traits_assayed_dropdown>select").change(function(){
                  trait_summary_hist_change(this.value);
                });

                jQuery('#traits_assayed_histogram_cvterm_link').html("<a href='/cvterm/"+response.traits_assayed[0][0][0]+"/view'>Definition</a>");

                jQuery.ajax( {
                    url : '/ajax/breeders/trial/'+ <% $trial_id %> +'/trait_phenotypes/?trait='+jQuery("#trial_summary_hist_dropdown").val()+'&display='+value,
                    type: 'POST',
                    success: function(response){
                        jQuery("#working_modal").modal("hide");
                        if (response.error) {
                            alert(response.error);
                        }
                        else {
                            draw_histogram(response.data, d3.select("#trial_summary_hist").node());
                        }
                    },
                    error: function(response) {
                        jQuery("#working_modal").modal("hide");
                        alert('An error occured retrieving trait histogram data.');
                    }
                });
            } else {
                jQuery("#working_modal").modal("hide");
                jQuery("#trial_summary_hist").html("<center><h4>There is no data to plot.</h4></center>");
            }

        },
        error: function(response){
            alert('Error retrieving traits assayed in this trial');
        }

    });
}

function trait_summary_hist_change(value) {
    jQuery("#trial_summary_hist_dropdown").val(value);
    jQuery('#traits_assayed_histogram_cvterm_link').html("<a href='/cvterm/"+value+"/view'>Definition</a>");
    console.log("value",value);
    jQuery.ajax( {
        url : '/ajax/breeders/trial/'+ <% $trial_id %> +'/trait_phenotypes/?trait='+value+'&display='+jQuery('#display_trial_phenosummary_hist').val(),
        type: 'POST',
        beforeSend: function() {
            jQuery("#working_modal").modal("show");
        },
        success: function(response){
            jQuery("#working_modal").modal("hide");
            if (response.error) {
                alert(response.error);
            }
            else {
                draw_histogram(response.data, d3.select("#trial_summary_hist").node());
            }
        },
        error: function(response) {
            jQuery("#working_modal").modal("hide");
            alert('An error occured retrieving trait histogram data.');
        }
    });
}

function draw_histogram(data,loc){
  var layout = {
    "width":800,
    "height":300,
    "margin":{
      "top":24,
      "left":36,
      "bottom":36,
      "right":24
    }
  }
  var histLoc = d3.select(loc);
  var header = data[0];
  var traitName = header[header.length-1];
  
  var plots = data.slice(1).map(function(d){
    var o = {};
    header.forEach(function(h,i){
      o[h==traitName?"value":h] = h==traitName?parseFloat(d[i]):d[i];
    });
    return o;
  });
  var allValues = plots.map(function(d){
    return d.value;
  });
  var accessions = {};
  var emptyBlocks = {};
  plots.forEach(function(plot){
    accessions[plot.germplasmDbId] = plot.germplasmName;
    emptyBlocks[plot.germplasmDbId] = 0;
  })
  
  var extent = d3.extent(allValues);
  console.log(d3.version);
  var x = d3.scaleLinear()
    .domain(extent)
    .range([layout.margin.left, layout.width-layout.margin.right])
    .nice(11);
  var boundaries = x.ticks(11);
  var xaxis = d3.axisBottom(x).tickValues(boundaries);
  console.log(boundaries);
  var binner = d3.histogram()
    .domain(x.domain())
    .thresholds(boundaries.slice(0,boundaries.length-1))
    .value(function(d){
      return d.value;
    });
  
  var bins = binner(plots).map(function(bin){
    var blocks = draw_histogram.accNest
      .rollup(function(v){return v.length})
      .object(bin);
    var empty = Object.assign({"bin":bin},emptyBlocks);
    return Object.assign(empty,blocks);
  });
  
  var ymax = d3.max(bins,function(d){
    return d.bin.length;
  });
  var y = d3.scaleLinear()
    .domain([0,ymax])
    .range([layout.height-layout.margin.bottom, layout.margin.top]);
  var yaxis = d3.axisLeft(y).ticks(ymax<6?ymax:6);
  
  console.log("ymax",ymax);
  
  var stacker = d3.stack()
    .keys(Object.keys(accessions))
    .order(d3.stackOrderNone)
    .offset(d3.stackOffsetNone);
  
  var series = stacker(bins);
  
  var color = d3.scaleSequential(d3.interpolateViridis)
    .domain([0,series.length]);
  
  console.log(bins,series);
  
  histLoc.style("overflow-x","scroll");
  var hist = histLoc.selectAll(".histogram").data([series]);
  newHist = hist.enter()
    .append("svg")
    .classed("histogram",true)
    .style("width","100%")
    .style("min-width",layout.width)
    .attr("viewBox","0 0 "+layout.width+" "+layout.height)
    .style("background","#fff");
  newHist.append("g").classed("series-groups",true);
  newHist.append("g").classed("xaxis",true);
  newHist.append("g").classed("yaxis",true);
  hist = hist.merge(newHist);
  
  hist.select(".xaxis")
    .attr('transform', 'translate(0,' + (layout.height-layout.margin.bottom) + ')')
    .call(xaxis)
    .attr("font-size",16);
  hist.select(".yaxis")
    .attr('transform', 'translate(' + layout.margin.left + ',0)')
    .call(yaxis)
    .attr("font-size",16);
  
  var groups = hist.select(".series-groups").selectAll(".series")
    .data(function(d){return d;},function(d){return d.key;});
  groups.exit().remove();
  var newGroups = groups.enter().append("g").classed("series",true);
  var allGroups = newGroups.merge(groups).style("fill",function(d){
    return color(d.index);
  });
  
  var bits = allGroups.selectAll(".bit").data(function(d){return d;});
  bits.exit().remove()
  var newBits = bits.enter().append("rect").classed("bit",true);
  var allBits = newBits.merge(bits)
    .attr("x",function(d){return x(d.data.bin.x0)+1})
    .attr("width",function(d){return x(d.data.bin.x1)-x(d.data.bin.x0)-1})
    .attr("y",function(d){return y(d[1])})
    .attr("height",function(d){return y(d[0])-y(d[1])});
  
  
  
}
draw_histogram.accNest = d3.nest().key(function(d){
  return d.germplasmDbId;
}).rollup(function(plots){
  return plots.map(function(d){
    return d.value;
  });
});

//end of immediately inoked function
})();

</script>
