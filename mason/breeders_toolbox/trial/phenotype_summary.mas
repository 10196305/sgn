
<%args>
$trial_id
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery', 'jquery.dataTables', 'd3.d3Min' ] &>

<div class="well">
<table id="phenotype_summary_data" class="display">
<thead>
  <tr>
    <th>Trait</th>
    <th>Average</th>
    <th>Min</th>
    <th>Max</th>
    <th>Std Dev</th>
    <th>Count</th>
    <th>More Info</th>
</tr>
</thead>

</table>
</div>

<div class="well">

<style>

.bar rect {
  fill: steelblue;
  shape-rendering: crispEdges;
}

.bar text {
  fill: #fff;
}

.axis path, .axis line {
  fill: none;
  stroke: #000;
  shape-rendering: crispEdges;
}

</style>
<div id="test_hist">
</div>

</div>


<link rel="stylesheet" type="text/css" href="/documents/inc/datatables/jquery.dataTables.css">

<script>

jQuery(document).ready(function () {

   jQuery('#trial_detail_traits_assayed_onswitch').click( function() {

      jQuery('#phenotype_summary_data').DataTable( { 
      	  'retrieve': true,
          'ajax': '/ajax/breeders/trial/'+ <% $trial_id %> + '/phenotypes',
      });

      //jQuery.ajax( {
      //	    url : '/ajax/breeders/trial/'+ <% $trial_id %> +'/trait_histogram'+,
      //    type: 'POST',
	//    success: function(response){ 
	//	if (response.error) { 
	//	    alert(response.error);
	//	}
	//	else { 
	//	    alert("Successfully stored planting date.");
	//	    display_planting_date();
	//	    jQuery('#change_planting_date_dialog').dialog("close");
	//	}
	//    },
	//    error: function(response) { 
	//	alert('An error test.');
	//    }
	//});

      // Generate a Bates distribution of 10 random variables.
      var values = d3.range(1000).map(d3.random.bates(10));

      console.log(values);

      // A formatter for counts.
      var formatCount = d3.format(",.0f");

      var div_width = document.getElementById("test_hist").offsetWidth;

      var margin = {top: 10, right: 30, bottom: 30, left: 30},
      width = div_width - margin.left - margin.right,
      height = 200 - margin.top - margin.bottom;

      var x = d3.scale.linear()
      .domain([0, 1])
      .range([0, width]);

      // Generate a histogram using twenty uniformly-spaced bins.
      var data = d3.layout.histogram()
      .bins(x.ticks(20))
      (values);

      var y = d3.scale.linear()
      .domain([0, d3.max(data, function(d) { return d.y; })])
      .range([height, 0]);

      var xAxis = d3.svg.axis()
      .scale(x)
      .orient("bottom");

      var svg = d3.select("#test_hist").append("svg")
      .attr("width", width + margin.left + margin.right)
      .attr("height", height + margin.top + margin.bottom)
      .append("g")
      .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

      var bar = svg.selectAll(".bar")
      .data(data)
      .enter().append("g")
      .attr("class", "bar")
      .attr("transform", function(d) { return "translate(" + x(d.x) + "," + y(d.y) + ")"; });

      bar.append("rect")
      .attr("x", 1)
      .attr("width", x(data[0].dx) - 1)
      .attr("height", function(d) { return height - y(d.y); });

      bar.append("text")
      .attr("dy", ".75em")
      .attr("y", 6)
      .attr("x", x(data[0].dx) / 2)
      .attr("text-anchor", "middle")
      .text(function(d) { return formatCount(d.y); });

      svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis);


   });

});


  
</script>
