
<%args>
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery.iframe-post-form', 'CXGN.BreederSearch', 'd3.d3v4Min.js', 'CXGN.BreedersToolbox.DroneImagery', 'CXGN.BreedersToolbox.DroneImagery.DragAndDrop', "opencv.opencv" ] &>

<style>
.ui-autocomplete { z-index:2147483647; }

.straightLine, .hrLine{
  position: absolute;
  background-color: red;
  transition: transform .05s ease-in-out;
}
</style>

<div id="manage_drone_imagery_top_div">

    <& /page/page_title.mas, title=>"Manage Drone Imagery" &>

    <& /page/detail_page_2_col_section.mas, info_section_collapsed => 0, info_section_title => "<h4 style='display:inline'>Drone Imagery</h4>", info_section_subtitle => 'Upload and view field drone imagery', buttons_html => "<button class='btn btn-primary' style='margin:3px' id='upload_drone_imagery_link'>Upload Drone Imagery</button><button class='btn btn-primary' style='margin:3px' id='keras_cnn_drone_imagery_link'>Train Keras CNN Model</button>", icon_class => "glyphicon glyphicon-th", info_section_id => "manage_drone_imagery_main" &>

</div>

<div id="manage_drone_imagery_standard_process_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Run A Standard Process" &>
    
    <&| /util/workflow.mas, id=> "manage_drone_imagery_standard_process_workflow" &>
        <&| /util/workflow.mas:step, title=> "Intro" &>
            <& /page/page_title.mas, title=>"This workflow will guide you through applying a standard process to your drone run bands" &>
            <p>Here you can take one of the drone run bands you uploaded all the way through the process to plot image saving. This will require manual steps such as image rotation, cropping, and plot polygon templating. After you have completed this process for one drone run band, you can apply it to all other drone run bands and other calculated vegetative indices.</p>
            <br/><br/>
            <center>
            <button class="btn btn-primary" onclick="Workflow.complete(this); return false;">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Drone Run Band" &>
            <& /page/page_title.mas, title=>"Select a drone run band" &>

            <div class="well well-sm">
                <p>Please select one drone run band to take through the process. It is recommended to select a band that has high contrast, such as a NIR band.</p>
            </div>

            <div class="well well-sm">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <table class="table table-bordered table-hover" id="manage_drone_imagery_standard_process_drone_run_bands_table">
                            <thead>
                                <tr>
                                    <th>Select</th>
                                    <th>Drone Run Band Name</th>
                                    <th>Drone Run Band Description</th>
                                    <th>Drone Run Band Type</th>
                                    <th>Drone Run Name</th>
                                    <th>Drone Run Description</th>
                                    <th>Drone Run Date</th>
                                    <th>Field Trial Name</th>
                                    <th>Field Trial Description</th>
                                </tr>
                            </thead>
                        </table>

                        <br/>

                        <center>
                        <button class="btn btn-primary" id="manage_drone_imagery_standard_process_drone_run_band_step">Go to Next Step</button>
                        </center>
                    </div>
                </div>
            </div>

        </&>
        <&| /util/workflow.mas:step, title=> "Rotate" &>
            <& /page/page_title.mas, title=>"Rotate your selected drone run band" &>

            <div class="well well-sm">
                <ul>
                    <li>Here you can do a rotation of your drone run image.</li>
                    <li>Your image should have precise horizontal alignment.</li>
                </ul>
            </div>

            <div class="well well-sm">

                <form class="form-horizontal">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-6 control-label">Rotate Counter-Clockwise Degrees: </label>
                        <div class="col-sm-6">
                            <input class="form-control" id="drone_imagery_standard_process_rotate_degrees_input" name="drone_imagery_standard_process_rotate_degrees_input" type="text" placeholder="Number of degrees to rotate" value="0.00"/>
                        </div>
                    </div>
                </form>

                <button class="btn btn-primary" id="drone_imagery_standard_process_rotate_stitched_view">Rotate Image (Does Not Save)</button>
                <button class="btn btn-default" id="drone_imagery_standard_process_rotate_stitched_crosshairs">Draw Crosshairs Assist</button>
                <button class="btn btn-default" id="drone_imagery_standard_process_rotate_stitched_restart">Restart</button>
                <button class="btn btn-primary" id="manage_drone_imagery_standard_process_rotate_step">Save Rotated Image And Go To Next Step</button>
            </div>

            <div id="manage_drone_imagery_standard_process_rotate_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_rotate_original_stitched_div">
            </canvas>

        </&>
        <&| /util/workflow.mas:step, title=> "Cropping" &>
            <& /page/page_title.mas, title=>"Crop your drone run band to specific area" &>
            
            <div class="well well-sm">
                <ul>
                    <li>Here you can do a rough cropping of the stitched ortho image to focus only on the actual field experiment.</li>
                    <li>Click on five points in the image to make a four-sided polygon.</li>
                    <li>Only the last polygon that you draw will be used for the cropping.</li>
                </ul>
                <br/>
                <button class="btn btn-primary" id="manage_drone_imagery_standard_process_cropping_step">Save and Go to Next Step</button>
            </div>

            <div id="manage_drone_imagery_standard_process_crop_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_crop_original_stitched_div"></canvas>

        </&>
        <&| /util/workflow.mas:step, title=> "Thresholding" &>
            <& /page/page_title.mas, title=>"Threshold your drone run band to remove background" &>

            <div class="well">
                <&| /page/info_section.mas, title => 'Remove Background Using Graphical Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>

                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="well well-sm">
                                <h5>The background can be removed by placing a threshold on pixel values</h5>
                                <ul>
                                    <li><b>1.</b> Click on the two right-most, highest peaks in the histogram. The right most peak represents the pixels we are interested in, while the peak immediately to the left of that peak represents the soil background.</li>
                                    <li><b>2.</b> Click on the "Find Minimum" button.</li>
                                    <li><b>3.</b> If the image looks good with the applied threshold, click Save. Otherwise, you can start over.</li>
                                </ul>
                            </div>

                            <div class="well well-sm">
                                <div name="drone_imagery_remove_background_threshold_current"></div>
                                <div name="drone_imagery_remove_background_threshold"></div>
                            </div>

                            <canvas id="drone_imagery_standard_process_remove_background_histogram_div"></canvas>
                            <hr>
                            <button class="btn btn-primary" id="drone_imagery_standard_process_remove_background_find_minimum">Find Minimum</button>
                            <button class="btn btn-default" id="drone_imagery_standard_process_remove_background_start_over">Start Over</button>
                            <button class="btn btn-primary" id="drone_imagery_standard_process_remove_background_submit">Save</button>
                            <hr>
                        </div>
                    </div>
                </&>
            </div>
            <div class="well">
                <&| /page/info_section.mas, title => 'Remove Background Using User Defined Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Pixels with Value Lower Than: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_lower_threshold" name="drone_imagery_standard_process_remove_background_lower_threshold" type="number" max="255" min="0" placeholder="e.g. 10 (Min 0)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Pixels with Value Higher Than: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_upper_threshold" name="drone_imagery_standard_process_remove_background_upper_threshold" type="number" max="255" min="0" placeholder="e.g. 200 (Max 255)"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button id="drone_imagery_standard_process_remove_background_defined_submit" class="btn btn-primary">Apply Threshold</button>
                        </div>
                    </div>
                </&>
            </div>
            <div class="well">
                <&| /page/info_section.mas, title => 'Remove Background Using Percentage Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background by specifying percentage threshold value' &>
                    <div class="panel panel-default">
                        <div class="panel-body">
                            <div class="row">
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Lowest Percent of Pixel Values: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_lower_threshold_percentage" name="drone_imagery_standard_process_remove_background_lower_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of lowest pixel values (Min 0, Max 100)" />
                                        </div>
                                    </div>
                                </div>
                                <div class="col-sm-6">
                                    <div class="form-group form-group-sm">
                                        <label class="col-sm-6 control-label">Discard Highest Percent of Pixel Values: </label>
                                        <div class="col-sm-6">
                                            <input class="form-control" id="drone_imagery_standard_process_remove_background_upper_threshold_percentage" name="drone_imagery_standard_process_remove_background_upper_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of highest pixel values (Min 0, Max 100)"/>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button id="drone_imagery_standard_process_remove_background_defined_percentage_submit" class="btn btn-primary">Apply Threshold</button>
                        </div>
                    </div>
                </&>
            </div>
            
            <hr>

            <div id="manage_drone_imagery_standard_process_remove_background_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_remove_background_original"></canvas>

        </&>
        <&| /util/workflow.mas:step, title=> "Plot Polygons" &>
            <& /page/page_title.mas, title=>"Define plot polygons relative to the field layout" &>

            <& /page/detail_page_2_col_section.mas, info_section_collapsible=>1, info_section_collapsed=>0, info_section_title => "<h4 style='display:inline'>Generate Polygon Template Tool</h4>", info_section_subtitle => 'Overlay a uniform grid over the image.', icon_class => "glyphicon glyphicon-th-large", info_section_id => "manage_drone_imagery_standard_process_generate_plot_polygons_section" &>

            <div class="well well-sm">
                <div id="drone_imagery_standard_process_plot_polygons_top_section"></div>

                <button id="drone_imagery_standard_process_plot_polygons_clear" class="btn btn-danger">Clear All Polygons</button>
            </div>

            <div id="manage_drone_imagery_standard_process_plot_polygons_load_div">
                <img src="/img/wheel.gif" />
            </div>

            <canvas id="drone_imagery_standard_process_plot_polygons_original_stitched_div"></canvas>

            <div id="drone_imagery_standard_process_generated_polygons_div"></div>

            <hr>
            <div class="well well-sm">
                <div id="drone_imagery_standard_process_trial_layout_div"></div>
            </div>

        </&>
        <&| /util/workflow.mas:step, title=> "Apply" &>
            <& /page/page_title.mas, title=>"Apply these same steps to other drone run bands" &>


            <br/>

            <center>
            <button type="button" class="btn btn-info" id="manage_drone_imagery_standard_process_apply_step">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Indices" &>
            <& /page/page_title.mas, title=>"Create and apply these same steps to vegetative indices" &>


            <br/>

            <center>
            <button type="button" class="btn btn-info" id="manage_drone_imagery_standard_process_indices_step">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Phenotypes" &>
            <& /page/page_title.mas, title=>"Calculate phenotypes for all plot polygon images" &>


            <br/>

            <center>
            <button type="button" class="btn btn-info" id="manage_drone_imagery_standard_process_phenotypes_step">Go to Next Step</button>
            </center>
        </&>
        <&| /util/workflow.mas:step, title=> "Submit" &>

            <center>
            <button type="button" class="btn btn-info" id="manage_drone_imagery_standard_process_submit_step">Submit</button>
            </center>
        </&>

    </&>

</div>

<div id="manage_drone_imagery_rotate_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Rotate Stitched Image" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can rotate the stitched image so that the rows and columns align exactly vertically and horizontally.</li>
            <li>The rotation can be done on decimals of degrees.</li>
            <li>Negative values mean clock-wise and positive values mean counter-clockwise.</li>
            <li>Crosshairs are only for assisting in alignment and they will not be saved.</li>
        </ul>
    </div>
    <div class="well well-sm">

        <form class="form-horizontal">
            <div class="form-group form-group-sm">
                <label class="col-sm-6 control-label">Rotate Counter-Clockwise Degrees: </label>
                <div class="col-sm-6">
                    <input class="form-control" id="drone_imagery_rotate_degrees_input" name="drone_imagery_rotate_degrees_input" type="text" placeholder="Number of degrees to rotate" value="0.00"/>
                </div>
            </div>
        </form>

        <button class="btn btn-primary" id="drone_imagery_rotate_stitched_view">Rotate Image (Does Not Save)</button>
        <button class="btn btn-default" id="drone_imagery_rotate_stitched_crosshairs">Draw Crosshairs Assist</button>
        <button class="btn btn-default" id="drone_imagery_rotate_stitched_restart">Restart</button>
        <button class="btn btn-primary" id="drone_imagery_rotate_stitched_submit">Save Rotated Image</button>
    </div>

    <div id="manage_drone_imagery_rotate_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_rotate_original_stitched_div">
    </canvas>
</div>

<div id="manage_drone_imagery_crop_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Crop Stitched Image To Field Experiment" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can do a rough cropping of the stitched ortho image to focus only on the actual field experiment.</li>
            <li>Click on five points in the image to make a four-sided polygon.</li>
            <li>Only the last polygon that you draw will be used for the cropping.</li>
        </ul>
        <br/>
        <button class="btn btn-primary" id="drone_imagery_crop_stitched_submit">Crop Image To Selected Polygon</button>
    </div>

    <div class="well well-sm">
        <form class="form-horizontal">
            <div class="row">
                <div class="col-sm-12">
                    <div class="form-group form-group-sm">
                        <label class="col-sm-6 control-label">Previously Used Image Cropping For This Field Trial: </label>
                        <div class="col-sm-6">
                            <div id="plot_polygons_previously_saved_image_cropping_templates">
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </form>
        <button class="btn btn-primary" id="drone_imagery_cropping_use_previous_cropping">Use Image Cropping</button>
    </div>

    <div id="manage_drone_imagery_crop_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_crop_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_vegetative_index_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Convert to Vegetative Index" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can convert to a vegetative index.</li>
            <li>If you have a NIR band, you can calculate "Normalized difference vegetative index", NDVI.</li>
            <li>If you have an RGB image, you can calculate "Visible atmospheric resistant index", VARI, or "Triangular greenness index", TGI.</li>
            <li>If you have red or blue or green, or images from any spectral band, you can calculate ratios to use as your vegetative index.</li>
        </ul>
    </div>

    <hr>
    <div id="manage_drone_imagery_vegetative_index_tgi_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_TGI">Calculate "Triangular Greenness Index" TGI. TGI = {Green band2} - 0.39*{Red band3} - 0.61*{Blue band1}</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_vari_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_VARI">Calculate "Visible Atmospheric Resistant Index" VARI. VARI = ({Green band2} - {Red band3}) / ({Green band2} + {Red band3} - {Blue band1})</button>
        <hr>
    </div>
    <div id="manage_drone_imagery_vegetative_index_ndvi_div" style="display:none">
        <button class="btn btn-primary" id="drone_imagery_vegetative_index_NDVI">Calculate "Normalized Difference Vegetative Index" NDVI. NDVI = ({NIR band1} - {Red band2}) / ({NIR band1} + {Red band2})</button>
        <hr>
    </div>

    <button class="btn btn-success" id="drone_imagery_rgb_vegetative_index_submit">Finish and Save Vegetative Index</button>
    <hr>

    <canvas id="drone_imagery_vegetative_index_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_remove_background_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Remove Background" &>

    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using Graphical Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>

            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="well well-sm">
                        <h5>The background can be removed by placing a threshold on pixel values</h5>
                        <ul>
                            <li><b>1.</b> Click on the two right-most, highest peaks in the histogram. The right most peak represents the pixels we are interested in, while the peak immediately to the left of that peak represents the soil background.</li>
                            <li><b>2.</b> Click on the "Find Minimum" button.</li>
                            <li><b>3.</b> If the image looks good with the applied threshold, click Save. Otherwise, you can start over.</li>
                        </ul>
                    </div>

                    <div class="well well-sm">
                        <div name="drone_imagery_remove_background_threshold_current"></div>
                        <div name="drone_imagery_remove_background_threshold"></div>
                    </div>

                    <canvas id="drone_imagery_remove_background_histogram_div"></canvas>
                    <hr>
                    <button class="btn btn-primary" id="drone_imagery_remove_background_find_minimum">Find Minimum</button>
                    <button class="btn btn-default" id="drone_imagery_remove_background_start_over">Start Over</button>
                    <button class="btn btn-primary" id="drone_imagery_remove_background_submit">Save</button>
                    <hr>
                </div>
            </div>
        </&>
    </div>
    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using User Defined Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a simple threshold value' &>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Pixels with Value Lower Than: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_lower_threshold" name="drone_imagery_remove_background_lower_threshold" type="number" max="255" min="0" placeholder="e.g. 10 (Min 0)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Pixels with Value Higher Than: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_upper_threshold" name="drone_imagery_remove_background_upper_threshold" type="number" max="255" min="0" placeholder="e.g. 200 (Max 255)"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button id="drone_imagery_remove_background_defined_submit" class="btn btn-primary">Apply Threshold</button>
                </div>
            </div>
        </&>
    </div>
    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using Percentage Threshold', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background by specifying percentage threshold value' &>
            <div class="panel panel-default">
                <div class="panel-body">
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Lowest Percent of Pixel Values: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_lower_threshold_percentage" name="drone_imagery_remove_background_lower_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of lowest pixel values (Min 0, Max 100)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group form-group-sm">
                                <label class="col-sm-6 control-label">Discard Highest Percent of Pixel Values: </label>
                                <div class="col-sm-6">
                                    <input class="form-control" id="drone_imagery_remove_background_upper_threshold_percentage" name="drone_imagery_remove_background_upper_threshold_percentage" type="number" max="99" min="0" placeholder="e.g. 10% of highest pixel values (Min 0, Max 100)"/>
                                </div>
                            </div>
                        </div>
                    </div>
                    <button id="drone_imagery_remove_background_defined_percentage_submit" class="btn btn-primary">Apply Threshold</button>
                </div>
            </div>
        </&>
    </div>
    <div class="well">
        <&| /page/info_section.mas, title => 'Remove Background Using Vegetative Index Mask', collapsible=>1, collapsed => 1, subtitle=> 'Remove the background using a vegetative index mask, either TGI, VARI, or NDVI' &>
            <div class="panel panel-default">
                <div class="panel-body">
                </div>
            </div>
        </&>
    </div>

    <hr>

    <div id="manage_drone_imagery_remove_background_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_remove_background_original"></canvas>
</div>

<div id="manage_drone_imagery_plot_polygons_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Define Plot Polygons" &>
    
    <& /page/detail_page_2_col_section.mas, info_section_collapsible=>1, info_section_collapsed=>0, info_section_title => "<h4 style='display:inline'>Generate Polygon Template Tool</h4>", info_section_subtitle => 'Overlay a uniform grid over the image.', icon_class => "glyphicon glyphicon-th-large", info_section_id => "manage_drone_imagery_generate_plot_polygons_section" &>

    <div class="well well-sm">
        <div id="drone_imagery_plot_polygons_top_section"></div>

        <button id="drone_imagery_plot_polygons_clear" class="btn btn-danger">Clear All Polygons</button>
    </div>

    <div id="manage_drone_imagery_plot_polygons_load_div">
        <img src="/img/wheel.gif" />
    </div>

    <canvas id="drone_imagery_plot_polygons_original_stitched_div"></canvas>

    <div id="drone_imagery_generated_polygons_div"></div>

    <hr>
    <div class="well well-sm">
        <div id="drone_imagery_trial_layout_div"></div>
    </div>
</div>

<div id="manage_drone_imagery_calculate_phenotypes_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery: Calculate Phenotypes" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can calculate phenotypes for all plot polygons at once.</li>
        </ul>
    </div>

    <hr>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_zonal_stats">Zonal Statistics</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_sift">Calculate SIFT Features</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_surf">Calculate SURF Features</button>
    <button class="btn btn-primary" id="drone_imagery_calculate_phenotypes_orb">Calculate ORB Features</button>
    <hr>

    <div id="manage_drone_imagery_calculate_phenotypes_show_zonal_stats" style="overflow:scroll"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_sift"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_surf"></div>
    <div id="manage_drone_imagery_calculate_phenotypes_show_orb"></div>

</div>

<div class="modal fade" id="drone_imagery_assign_plot_dialog" name="drone_imagery_assign_plot_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryAssignPlotDialog" data-backdrop="static">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryAssignPlotDialog">Assign Plot</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal" id="drone_imagery_assign_plot_form">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Plot Name:</label>
                    <div class="col-sm-7">
                        <input class="form-control" id="drone_imagery_plot_polygon_assign_plot_name" name="drone_imagery_plot_polygons_autocomplete" type="text" placeholder="Auto-completes plot name..." />
                    </div>
                </div>
            </form>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_plot_polygon_assign_add">Assign Plot</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_merge_channels_dialog" name="drone_imagery_merge_channels_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryMergeChannelsDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryMergeChannelsDialog">Merge Drone Run Bands Into Single 3-channel image</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal" id="drone_imagery_merge_bands_form">
                <div class="form-group">
                    <label class="col-sm-5 control-label">First Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band1_select"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Second Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band2_select"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Third Band:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_merge_bands_band3_select"></div>
                    </div>
                </div>
            </form>
        </div>

        <ul>
            <li>TGI = {GREEN band2} - 0.39*{RED band3} - 0.61*{BLUE band1}</li>
            <li>VARI = ( {GREEN band2} - {RED band3} ) / ( {GREEN band2} + {RED band3} - {BLUE band1} )</li>
            <li>NDVI = ( {NIR band1} - {RED band 2} ) / ( {NIR band1} + {RED band2} )</li>
        </ul>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_merge_bands_submit">Merge Bands</button>
      </div>
    </div>
  </div>
</div>

<div class="modal fade" id="drone_imagery_calc_phenotypes_zonal_channel_dialog" name="drone_imagery_calc_phenotypes_zonal_channel_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryCalcPhenotypesZonalChannelDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryCalcPhenotypesZonalChannelDialog">Select the Channel to Calculate Zonal Statistics On</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Channel:</label>
                    <div class="col-sm-7">
                        <select class="form-control" id="drone_imagery_calculate_phenotypes_zonal_stats_channel_select_input">
                            <option value="0">Channel 1</option>
                            <option value="1">Channel 2</option>
                            <option value="2">Channel 3</option>
                        </select>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-5 control-label">Select Week In Drone Run Series:</label>
                    <div class="col-sm-7">
                        <div id="drone_imagery_calculate_phenotypes_zonal_stats_time_select_div">
                        </div>
                    </div>
                </div>
            </form>
        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_calculate_phenotypes_zonal_stats_channel_select">Calculate Zonal Statistics</button>
      </div>
    </div>
  </div>
</div>


<div class="modal fade" id="drone_imagery_train_keras_cnn_dialog" name="drone_imagery_train_keras_cnn_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryTrainKerasCNNDialog" data-backdrop="static">
  <div class="modal-dialog modal-xl" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryTrainKerasCNNDialog">Select a dataset to train Keras CNN</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">

            <&| /util/workflow.mas, id=> "drone_imagery_train_keras_model_workflow" &>
                <&| /util/workflow.mas:step, title=> "Intro" &>
                    <& /page/page_title.mas, title=>"This workflow will guide you through training a keras model using images and phenotypes in the database" &>
                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" onclick="Workflow.complete(this); return false;">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Field Trial" &>
                    <& /page/page_title.mas, title=>"Select the field trial you are interested in" &>
                    <br/><br/>
                    <div class="form-group">
                        <label class="col-sm-3 control-label">Field Trial: </label>
                        <div class="col-sm-9" >
                            <div id="drone_imagery_train_keras_cnn_trial_select_div"></div>
                        </div>
                    </div>
                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_field_trial_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Trait Selection" &>
                    <& /page/page_title.mas, title=>"Select the trait you are interested in predicting" &>
                    <br/><br/>
                    <div class="form-group">
                        <label class="col-sm-5 control-label">Traits Phenotyped in the Selected Field Trial: </label>
                        <div class="col-sm-7" >
                            <div id="drone_imagery_train_keras_cnn_trait_select_div"></div>
                        </div>
                    </div>
                    <br/><br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_trait_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Drone Run Selection" &>
                    <& /page/page_title.mas, title=>"Select the drone runs you are interested in using in the model" &>

                    <table class="table table-bordered table-hover" id="drone_image_train_keras_drone_runs_table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Drone Run Name</th>
                                <th>Drone Run Type</th>
                                <th>Drone Run Description</th>
                                <th>Drone Run Date</th>
                                <th>Field Trial Name</th>
                                <th>Field Trial Description</th>
                            </tr>
                        </thead>
                    </table>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_drone_run_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Images Selection" &>
                    <& /page/page_title.mas, title=>"Select the types of images you are interested in using in the model" &>

                    <table class="table table-bordered table-hover" id="drone_image_train_keras_plot_polygon_image_type_table">
                        <thead>
                            <tr>
                                <th>Select</th>
                                <th>Field Trial</th>
                                <th>Drone Run Name</th>
                                <th>Drone Run Band Name</th>
                                <th>Drone Run Band Type</th>
                                <th>Plot Polygon Type</th>
                                <th>Number of Images</th>
                            </tr>
                        </thead>
                    </table>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_plot_polygon_type_select_step">Go to Next Step</button>
                    </center>
                </&>
                <&| /util/workflow.mas:step, title=> "Confirm" &>
                    <& /page/page_title.mas, title=>"Train the model!" &>

                    <br/><br/>
                    <center>
                    <button class="btn btn-primary" id="drone_imagery_train_keras_model_confirm_step">Submit</button>
                    </center>
                </&>
            </&>

        </div>

      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<& /breeders_toolbox/drone_imagery/upload_drone_imagery_dialogs.mas &>
<& /breeders_toolbox/drone_imagery/drone_imagery_fourier_transform_dialogs.mas &>

<script>

jQuery(document).ready(function() {

    //
    // Standard Process for Drone Runs
    //

    var manage_drone_imagery_standard_process_drone_run_project_id;
    var manage_drone_imagery_standard_process_drone_run_band_project_id;
    var manage_drone_imagery_standard_process_rotate_stitched_image_id;
    var manage_drone_imagery_standard_process_rotate_drone_run_band_project_id;
    var manage_drone_imagery_standard_process_rotate_stitched_image_degrees;
    var manage_drone_imagery_standard_process_rotated_stitched_image_id;
    var manage_drone_imagery_standard_process_cropped_image_id;
    var manage_drone_imagery_standard_process_denoised_image_id;
    var manage_drone_imagery_standard_process_removed_background_image_id;
    var manage_drone_imagery_standard_process_current_image_type = 'threshold_background_removed_stitched_drone_imagery';

    jQuery(document).on('click', 'button[name="project_drone_imagery_standard_process"]', function(){
        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').show();

        window.scrollTo(0,0);

        manage_drone_imagery_standard_process_drone_run_project_id = jQuery(this).data('drone_run_project_id');

        jQuery('#manage_drone_imagery_standard_process_drone_run_bands_table').DataTable({
            destroy : true,
            ajax : '/ajax/drone_imagery/drone_run_bands?select_checkbox_name=drone_run_standard_process_band_select&drone_run_project_id='+manage_drone_imagery_standard_process_drone_run_project_id
        });
    });

    jQuery('#manage_drone_imagery_standard_process_drone_run_band_step').click(function(){
        var selected = [];
        jQuery('input[name="drone_run_standard_process_band_select"]:checked').each(function() {
            selected.push(jQuery(this).val());
        });
        if (selected.length < 1){
            alert('Please select at least one drone run band!');
            return false;
        } else if (selected.length > 1){
            alert('Please select only one drone run band!');
            return false;
        } else {
            manage_drone_imagery_standard_process_drone_run_band_project_id = selected[0];
            jQuery.ajax({
                url : '/ajax/drone_imagery/get_project_md_image?drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id+'&project_image_type_name=stitched_drone_imagery',
                success: function(response){
                    console.log(response);
                    manage_drone_imagery_standard_process_rotate_stitched_image_id = response.data[0]['image_id'];
                    manage_drone_imagery_standard_process_rotate_stitched_image_degrees = 0.00;

                    showRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, 'drone_imagery_standard_process_rotate_original_stitched_div', 'manage_drone_imagery_standard_process_rotate_load_div');
                },
                error: function(response){
                    alert('Error getting standard process image rotation step!')
                }
            });
        
            Workflow.complete("#manage_drone_imagery_standard_process_drone_run_band_step");
            Workflow.focus('#manage_drone_imagery_standard_process_workflow', 2);
        }
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_view').click(function(){
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = parseFloat(jQuery('#drone_imagery_standard_process_rotate_degrees_input').val());
        applyShowRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, manage_drone_imagery_standard_process_drone_run_band_project_id, manage_drone_imagery_standard_process_rotate_stitched_image_degrees, 'drone_imagery_standard_process_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_crosshairs').click(function(){
        drawRotateCrosshairs(getRandomColor(), 'drone_imagery_standard_process_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_standard_process_rotate_stitched_restart').click(function(){
        showRotateImage(manage_drone_imagery_standard_process_rotate_stitched_image_id, 'drone_imagery_standard_process_rotate_original_stitched_div', 'manage_drone_imagery_standard_process_rotate_load_div');
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = 0.00;
    });

    jQuery('#manage_drone_imagery_standard_process_rotate_step').click(function() {
        var rotate_stitched_image_degrees_text = jQuery('#drone_imagery_standard_process_rotate_degrees_input').val();
        if (rotate_stitched_image_degrees_text == '') {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        if (isNaN(rotate_stitched_image_degrees_text)) {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        manage_drone_imagery_standard_process_rotate_stitched_image_degrees = parseFloat(rotate_stitched_image_degrees_text);
        jQuery.ajax({
            url : '/ajax/drone_imagery/rotate_image?image_id='+manage_drone_imagery_standard_process_rotate_stitched_image_id+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id+'&angle='+manage_drone_imagery_standard_process_rotate_stitched_image_degrees,
            success: function(response){
                console.log(response);
                manage_drone_imagery_standard_process_rotated_stitched_image_id = response.rotated_image_id;
                showCropImageStart(manage_drone_imagery_standard_process_rotated_stitched_image_id, 'drone_imagery_standard_process_crop_original_stitched_div', 'manage_drone_imagery_standard_process_crop_load_div');

                Workflow.complete("#manage_drone_imagery_standard_process_rotate_step");
                Workflow.focus('#manage_drone_imagery_standard_process_workflow', 3);
            },
            error: function(response){
                alert('Error saving standard process rotated image image!')
            }
        });
    });

    jQuery(document).on('click', '#manage_drone_imagery_standard_process_cropping_step', function(){
        console.log(crop_points);
        jQuery.ajax({
            url : '/ajax/drone_imagery/crop_image?image_id='+manage_drone_imagery_standard_process_rotated_stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
            success: function(response){
                console.log(response);
                manage_drone_imagery_standard_process_cropped_image_id = response.cropped_image_id;

                jQuery.ajax({
                    url : '/ajax/drone_imagery/denoise?image_id='+manage_drone_imagery_standard_process_cropped_image_id+'&drone_run_band_project_id='+manage_drone_imagery_standard_process_drone_run_band_project_id,
                    success: function(response){
                        console.log(response);
                        manage_drone_imagery_standard_process_denoised_image_id = response.denoised_image_id;
                        remove_background_current_image_id = manage_drone_imagery_standard_process_denoised_image_id;
                        remove_background_drone_run_band_project_id = manage_drone_imagery_standard_process_drone_run_band_project_id;
    
                        showRemoveBackgroundHistogramStart(manage_drone_imagery_standard_process_denoised_image_id, 'drone_imagery_standard_process_remove_background_original', 'drone_imagery_standard_process_remove_background_histogram_div', 'manage_drone_imagery_standard_process_remove_background_load_div');
                        
                        Workflow.complete("#manage_drone_imagery_standard_process_cropping_step");
                        Workflow.focus('#manage_drone_imagery_standard_process_workflow', 4);
                    },
                    error: function(response){
                        alert('Error standard process denoising image!')
                    }
                });
            },
            error: function(response){
                alert('Error standard process cropping image!')
            }
        });
    });

    jQuery('#drone_imagery_standard_process_remove_background_find_minimum').click(function(){
        if (!removeBackgroundThresholdPeak1 || !removeBackgroundThresholdPeak2) {
            alert('Please click on the two right-most peaks in the histogram first!');
        } else {
            showRemoveBackgroundHistogramMinimum(manage_drone_imagery_standard_process_denoised_image_id, 'drone_imagery_standard_process_remove_background_original', 'drone_imagery_standard_process_remove_background_histogram_div');
        }
        return false;
    });

    jQuery('#drone_imagery_standard_process_remove_background_start_over').click(function(){
        removeBackgroundThresholdPeak1 = undefined;
        removeBackgroundThresholdPeak2 = undefined;
        removeBackgroundThresholdPeak1pixels = undefined;
        removeBackgroundThresholdPeak2pixels = undefined;

        showRemoveBackgroundHistogramStart(manage_drone_imagery_standard_process_denoised_image_id, 'drone_imagery_standard_process_remove_background_original', 'drone_imagery_standard_process_remove_background_histogram_div', 'manage_drone_imagery_standard_process_remove_background_load_div');
    });

    jQuery('#drone_imagery_standard_process_remove_background_submit').click(function(){
        manage_drone_imagery_standard_process_remove_background_threshold_save(manage_drone_imagery_standard_process_denoised_image_id, manage_drone_imagery_standard_process_current_image_type, manage_drone_imagery_standard_process_drone_run_band_project_id, removeBackgroundThresholdValue, '255');
    });

    jQuery('#drone_imagery_standard_process_remove_background_defined_submit').click(function(){
        var remove_background_drone_run_band_lower_threshold = jQuery('#drone_imagery_standard_process_remove_background_lower_threshold').val();
        var remove_background_drone_run_band_upper_threshold = jQuery('#drone_imagery_standard_process_remove_background_upper_threshold').val();
        manage_drone_imagery_standard_process_remove_background_threshold_save(manage_drone_imagery_standard_process_denoised_image_id, manage_drone_imagery_standard_process_current_image_type, manage_drone_imagery_standard_process_drone_run_band_project_id, remove_background_drone_run_band_lower_threshold, remove_background_drone_run_band_upper_threshold);
    });

    jQuery('#drone_imagery_standard_process_remove_background_defined_percentage_submit').click(function(){
        var drone_imagery_remove_background_lower_percentage = Number(jQuery('#drone_imagery_standard_process_remove_background_lower_threshold_percentage').val())/100;
        var drone_imagery_remove_background_upper_percentage = Number(jQuery('#drone_imagery_standard_process_remove_background_upper_threshold_percentage').val())/100;
    
        var threshold_value_return = calculateThresholdPercentageValues('drone_imagery_remove_background_original', drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage);

        manage_drone_imagery_standard_process_remove_background_threshold_save(manage_drone_imagery_standard_process_denoised_image_id, manage_drone_imagery_standard_process_current_image_type, manage_drone_imagery_standard_process_drone_run_band_project_id, threshold_value_return[0], threshold_value_return[1]);
    });

    function manage_drone_imagery_standard_process_remove_background_threshold_save(image_id, image_type, drone_run_band_project_id, lower_threshold, upper_threshold){
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/remove_background_save',
            dataType: "json",
            data: {
                'image_id': image_id,
                'image_type': image_type,
                'drone_run_band_project_id': drone_run_band_project_id,
                'lower_threshold': lower_threshold,
                'upper_threshold': upper_threshold
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }
                manage_drone_imagery_standard_process_removed_background_image_id = response.removed_background_image_id;

                showPlotPolygonStart(manage_drone_imagery_standard_process_removed_background_image_id, drone_run_band_project_id, 'drone_imagery_plot_polygons_original_stitched_div', 'drone_imagery_plot_polygons_top_section');

                Workflow.complete("#drone_imagery_standard_process_remove_background_defined_percentage_submit");
                Workflow.focus('#manage_drone_imagery_standard_process_workflow', 5);
            },
            error: function(response){
                alert('Error saving standard process removed background image!')
            }
        });
    }

    //
    // Keras CNN Training JS
    //

    var manage_drone_imagery_train_keras_drone_run_ids = [];
    var manage_drone_imagery_train_keras_field_trial_id;
    var manage_drone_imagery_train_keras_trait_id;
    var manage_drone_imagery_train_keras_plot_polygon_type_ids = [];

    jQuery('#keras_cnn_drone_imagery_link').click(function(){
        get_select_box('trials', 'drone_imagery_train_keras_cnn_trial_select_div', { 'name' : 'drone_imagery_train_keras_cnn_field_trial_id', 'id' : 'drone_imagery_train_keras_cnn_field_trial_id', 'empty':1, 'multiple':0 });
        jQuery('#drone_imagery_train_keras_cnn_dialog').modal('show');

        manage_drone_imagery_train_keras_drone_run_ids = [];
        manage_drone_imagery_train_keras_field_trial_id = undefined;
        manage_drone_imagery_train_keras_trait_id = undefined;
        manage_drone_imagery_train_keras_plot_polygon_type_ids = [];
    });

    jQuery('#drone_imagery_train_keras_model_field_trial_select_step').click(function(){
        manage_drone_imagery_train_keras_field_trial_id = jQuery('#drone_imagery_train_keras_cnn_field_trial_id').val();
        if (manage_drone_imagery_train_keras_field_trial_id == '') {
            alert('Please select a field trial first!');
        } else {
            Workflow.complete("#drone_imagery_train_keras_model_field_trial_select_step");

            get_select_box('traits', 'drone_imagery_train_keras_cnn_trait_select_div', { 'name' : 'drone_imagery_train_keras_cnn_trait_id', 'id' : 'drone_imagery_train_keras_cnn_trait_id', 'empty':1, 'multiple':0, 'trial_ids':manage_drone_imagery_train_keras_field_trial_id, 'stock_type':'plot' });

            jQuery('#drone_image_train_keras_drone_runs_table').DataTable({
                destroy : true,
                ajax : '/ajax/drone_imagery/drone_runs?select_checkbox_name=train_keras_drone_imagery_drone_run_select&field_trial_id='+manage_drone_imagery_train_keras_field_trial_id
            });

            Workflow.focus('#drone_imagery_train_keras_model_workflow', 2);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_trait_select_step').click(function(){
        manage_drone_imagery_train_keras_trait_id = jQuery('#drone_imagery_train_keras_cnn_trait_id').val();
        if (manage_drone_imagery_train_keras_trait_id == undefined || manage_drone_imagery_train_keras_trait_id == 'null' || manage_drone_imagery_train_keras_trait_id == '') {
            alert('Please select a phenotyped trait first!');
        } else {
            Workflow.complete("#drone_imagery_train_keras_model_trait_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 3);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_drone_run_select_step').click(function(){
        jQuery('input[name="train_keras_drone_imagery_drone_run_select"]:checked').each(function() {
            manage_drone_imagery_train_keras_drone_run_ids.push(jQuery(this).val());
        });
        if (manage_drone_imagery_train_keras_drone_run_ids.length < 1){
            alert('Please select at least one drone run!');
        } else {
        
            jQuery('#drone_image_train_keras_plot_polygon_image_type_table').DataTable({
                destroy : true,
                paging : false,
                ajax : '/ajax/drone_imagery/plot_polygon_types?select_checkbox_name=train_keras_drone_imagery_plot_polygon_type_select&field_trial_id='+manage_drone_imagery_train_keras_field_trial_id+'&drone_run_ids='+JSON.stringify(manage_drone_imagery_train_keras_drone_run_ids)
            });

            Workflow.complete("#drone_imagery_train_keras_model_drone_run_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 4);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_plot_polygon_type_select_step').click(function(){
        jQuery('input[name="train_keras_drone_imagery_plot_polygon_type_select"]:checked').each(function() {
            manage_drone_imagery_train_keras_plot_polygon_type_ids.push(jQuery(this).val());
        });
        if (manage_drone_imagery_train_keras_plot_polygon_type_ids.length < 1){
            alert('Please select at least one plot polygon type!');
        } else {
            Workflow.complete("#drone_imagery_train_keras_model_plot_polygon_type_select_step");
            Workflow.focus('#drone_imagery_train_keras_model_workflow', 5);
        }
        return false;
    });

    jQuery('#drone_imagery_train_keras_model_confirm_step').click(function(){
        jQuery.ajax({
            url : '/ajax/drone_imagery/train_keras_model?field_trial_id='+manage_drone_imagery_train_keras_field_trial_id+'&trait_id='+manage_drone_imagery_train_keras_trait_id+'&drone_run_ids='+JSON.stringify(manage_drone_imagery_train_keras_drone_run_ids)+'&plot_polygon_type_ids='+JSON.stringify(manage_drone_imagery_train_keras_plot_polygon_type_ids),
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error training keras model!')
            }
        });
    });

    //
    // Image Rotating JS
    //

    var rotate_stitched_image_id;
    var rotate_drone_run_band_project_id;
    var rotate_stitched_image_degrees;

    jQuery(document).on('click', 'button[name="project_drone_imagery_rotate_image"]', function() {
        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        window.scrollTo(0,0);

        rotate_stitched_image_id = jQuery(this).data('stitched_image_id');
        rotate_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        rotate_stitched_image_degrees = 0.00;

        showRotateImage(rotate_stitched_image_id, 'drone_imagery_rotate_original_stitched_div', 'manage_drone_imagery_rotate_load_div');
    });

    jQuery('#drone_imagery_rotate_stitched_view').click(function(){
        rotate_stitched_image_degrees = parseFloat(jQuery('#drone_imagery_rotate_degrees_input').val());
        applyShowRotateImage(rotate_stitched_image_id, rotate_drone_run_band_project_id, rotate_stitched_image_degrees, 'drone_imagery_rotate_original_stitched_div');
    });

    jQuery('#drone_imagery_rotate_stitched_restart').click(function(){
        showRotateImage(rotate_stitched_image_id, 'drone_imagery_rotate_original_stitched_div', 'manage_drone_imagery_rotate_load_div');
        rotate_stitched_image_degrees = 0.00;
    });

    function applyShowRotateImage(rotate_stitched_image_id, rotate_drone_run_band_project_id, rotate_stitched_image_degrees, canvas_div_id) {
        jQuery.ajax({
            url : '/ajax/drone_imagery/rotate_image?image_id='+rotate_stitched_image_id+'&drone_run_band_project_id='+rotate_drone_run_band_project_id+'&angle='+rotate_stitched_image_degrees+'&view_only=1',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                };
                image.src = response.rotated_image_url;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error getting rotated image!')
            }
        });
    }

    function showRotateImage(rotate_stitched_image_id, canvas_div_id, load_div_id) {
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+rotate_stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                    jQuery('#'+load_div_id).hide();
                };
                image.src = response.image_url;

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    function getRandomColor() {
        var letters = '0123456789ABCDEF';
        var color = '#';
        for (var i = 0; i < 6; i++) {
            color += letters[Math.floor(Math.random() * 16)];
        }
        return color;
    }

    jQuery('#drone_imagery_rotate_stitched_crosshairs').click(function(){
        drawRotateCrosshairs(getRandomColor(), 'drone_imagery_rotate_original_stitched_div');
    });

    function drawRotateCrosshairs(color, canvas_div_id) {
        var canvas = document.getElementById(canvas_div_id);
        var rotate_image_width = canvas.width;
        var rotate_image_height = canvas.height;
        var ctx = canvas.getContext("2d");

        ctx.beginPath();
        ctx.moveTo(rotate_image_width/2,0);
        ctx.lineTo(rotate_image_width/2, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(rotate_image_width*1/4,0);
        ctx.lineTo(rotate_image_width*1/4, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(rotate_image_width*3/4,0);
        ctx.lineTo(rotate_image_width*3/4, rotate_image_height);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height/2);
        ctx.lineTo(rotate_image_width, rotate_image_height/2);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height*1/4);
        ctx.lineTo(rotate_image_width, rotate_image_height*1/4);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();

        ctx.beginPath();
        ctx.moveTo(0,rotate_image_height*3/4);
        ctx.lineTo(rotate_image_width, rotate_image_height*3/4);
        ctx.strokeStyle = color;
        ctx.lineWidth=5;
        ctx.stroke();
    }

    jQuery('#drone_imagery_rotate_stitched_submit').click(function() {
        var rotate_stitched_image_degrees_text = jQuery('#drone_imagery_rotate_degrees_input').val();
        if (rotate_stitched_image_degrees_text == '') {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        if (isNaN(rotate_stitched_image_degrees_text)) {
            alert('Please give a number of degrees first! Can be a decimal amount.');
            return;
        }
        rotate_stitched_image_degrees = parseFloat(rotate_stitched_image_degrees_text);
        jQuery.ajax({
            url : '/ajax/drone_imagery/rotate_image?image_id='+rotate_stitched_image_id+'&drone_run_band_project_id='+rotate_drone_run_band_project_id+'&angle='+rotate_stitched_image_degrees,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving rotated image image!')
            }
        });
    });

    //
    // Image Cropping JS
    //

    var ctx;
    var trial_id;
    var stitched_image_id;
    var rotated_stitched_image_id;
    var stitched_image;
    var drone_run_project_id;
    var drone_run_band_project_id;
    var crop_points = [];
    var crop_display_points = [];
    var dronecroppingImg;

    jQuery(document).on('click', 'button[name="project_drone_imagery_crop_image"]', function() {
        trial_id = jQuery(this).data('field_trial_id');
        stitched_image_id = jQuery(this).data('stitched_image_id');
        stitched_image = jQuery(this).data('stitched_image');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        rotated_stitched_image_id = jQuery(this).data('rotated_stitched_image_id');

        get_select_box('drone_imagery_parameter_select','plot_polygons_previously_saved_image_cropping_templates', {'name':'drone_imagery_previously_saved_image_cropping_select', 'id':'drone_imagery_previously_saved_image_cropping_select', 'empty':1, 'field_trial_id':trial_id, 'parameter':'image_cropping' });

        jQuery('#manage_drone_imagery_crop_div').show();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        showCropImageStart(rotated_stitched_image_id, 'drone_imagery_crop_original_stitched_div', 'manage_drone_imagery_crop_load_div');

        window.scrollTo(0,0);
    });

    function showCropImageStart(rotated_stitched_image_id, canvas_div_id, load_div_id) {
        crop_points = [];
        crop_display_points = [];
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+rotated_stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                    jQuery('#'+load_div_id).hide();
                };
                image.src = response.image_url;
                dronecroppingImg = canvas;
                dronecroppingImg.onmousedown = GetCoordinatesCroppedImage;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    function FindPosition(oElement) {
        if(typeof( oElement.offsetParent ) != "undefined") {
            for(var posX = 0, posY = 0; oElement; oElement = oElement.offsetParent) {
                posX += oElement.offsetLeft;
                posY += oElement.offsetTop;
            }
            return [ posX, posY ];
        } else {
            return [ oElement.x, oElement.y ];
        }
    }

    function GetCoordinatesCroppedImage(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(dronecroppingImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (crop_points.length < 4){
            crop_points.push({x:PosX, y:PosY});
            crop_display_points.push({x:PosX, y:PosY});
        } else {
            crop_display_points.push({x:PosX, y:PosY});
        }
        if (crop_display_points.length > 5){
            crop_points = [];
            crop_display_points = [];
        }
        drawPolyline(crop_display_points);
        drawWaypoints(crop_display_points, undefined, 0);
    }

    function drawPolyline(points){
        if (points.length == 4) {
            points.push(points[0]);
        }
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.moveTo(points[0].x,points[0].y);
            for(var i=1;i<points.length;i++){
                ctx.lineTo(points[i].x,points[i].y);
            }
            ctx.strokeStyle='blue';
            ctx.lineWidth=5;
            ctx.stroke();    
        }
    }

    function drawWaypoints(points, label, random_factor){
        var plot_polygon_random_number = Math.random() * random_factor;
        if (points.length > 0 && label != undefined) {
            ctx.font = "bold 18px Arial";
            ctx.fillStyle = 'red';
            ctx.fillText(label, points[0].x + 3, points[0].y + 14 + plot_polygon_random_number);
        }
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.arc(points[i].x,points[i].y,4,0,Math.PI*2);
            ctx.closePath();
            ctx.strokeStyle='black';
            ctx.lineWidth=1;
            ctx.stroke();
            ctx.fillStyle='white';
            ctx.fill();
        }
    }

    jQuery(document).on('click', '#drone_imagery_crop_stitched_submit', function(){
        jQuery.ajax({
            url : '/ajax/drone_imagery/crop_image?image_id='+rotated_stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_band_project_id='+drone_run_band_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error cropping image!')
            }
        });
    });

    jQuery(document).on('click', '#drone_imagery_cropping_use_previous_cropping', function() {
        var plot_polygons_use_previously_saved_cropping = jQuery('#drone_imagery_previously_saved_image_cropping_select').val();
        jQuery.ajax({
            url : '/ajax/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_cropping,
            success: function(response){
                console.log(response);
                jQuery.ajax({
                    url : '/ajax/drone_imagery/crop_image?image_id='+rotated_stitched_image_id+'&polygon='+JSON.stringify(response.parameter[0])+'&drone_run_band_project_id='+drone_run_band_project_id,
                    beforeSend: function() {
                        jQuery("#working_modal").modal("show");
                    },
                    success: function(response){
                        console.log(response);
                        jQuery("#working_modal").modal("hide");
                        location.reload();
                    },
                    error: function(response){
                        jQuery("#working_modal").modal("hide");
                        alert('Error cropping image!')
                    }
                });
            },
            error: function(response){
                alert('Error retrieving saved cropping template!');
            }
        });
        return;
    });

    //
    // Denoising JS
    //

    var gridData = new Array();

    jQuery(document).on('click', 'button[name="project_drone_imagery_denoise"]', function() {
        var trial_id = jQuery(this).data('field_trial_id');
        var drone_run_project_id = jQuery(this).data('drone_run_project_id');
        var drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        var cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        var stitched_image = jQuery(this).data('stitched_image');
        var cropped_stitched_image = jQuery(this).data('cropped_stitched_image');

        jQuery.ajax({
            url : '/ajax/drone_imagery/denoise?image_id='+cropped_stitched_image_id+'&drone_run_band_project_id='+drone_run_band_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");       
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error denoising image!')
            }
        });

    });

    //
    //Define Plot Polygons JS
    //

    var canvas;
    var background_image_url;
    var background_image_width;
    var background_image_height;
    var plot_polygons_display_points = [];
    var plot_polygons_ind_points = [];
    var plot_polygons_ind_4_points = [];
    var drone_imagery_plot_polygons = {};
    var drone_imagery_plot_generated_polygons = {};
    var drone_imagery_plot_polygons_display = {};
    var field_trial_layout_response = {};
    var plot_polygon_name;
    var plotpolygonsImg;
    var drone_imagery_plot_polygons_available_stock_names = [];
    var trial_id;
    var cropped_stitched_image_id;
    var denoised_stitched_image_id;
    var background_removed_stitched_image_id;
    var drone_run_project_id;
    var drone_run_band_project_id;
    var assign_plot_polygons_type;

    jQuery(document).on('click', 'button[name="project_drone_imagery_plot_polygons"]', function(){
        trial_id = jQuery(this).data('field_trial_id');
        cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        background_removed_stitched_image_id = jQuery(this).data('background_removed_stitched_image_id');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        assign_plot_polygons_type = jQuery(this).data('assign_plot_polygons_type');

        get_select_box('drone_imagery_parameter_select','plot_polygons_previously_saved_plot_polygon_templates', {'empty':1, 'field_trial_id':trial_id, 'parameter':'plot_polygons' });

        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        field_trial_layout_response = {};

        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').show();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        window.scrollTo(0,0);
    
        showPlotPolygonStart(background_removed_stitched_image_id, drone_run_band_project_id, 'drone_imagery_plot_polygons_original_stitched_div', 'drone_imagery_plot_polygons_top_section');
    
        jQuery.ajax({
            url : '/ajax/breeders/trial/'+trial_id+'/layout_table',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                field_trial_layout_response = response;
                var layout = field_trial_layout_response.output;
                for (var i=1; i<layout.length; i++) {
                    drone_imagery_plot_polygons_available_stock_names.push(layout[i][0]);
                }
                droneImageryDrawLayoutTable(response, {});
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving trial layout and design!')
            }
        });

    });

    function showPlotPolygonStart(background_removed_stitched_image_id, drone_run_band_project_id, canvas_div_id, info_div_id){
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_contours?image_id='+background_removed_stitched_image_id+'&drone_run_band_project_id='+drone_run_band_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                background_image_url = response.contours_image_url;

                background_image_width = response.image_width;
                background_image_height = response.image_height;

                var top_section_html = '<h4>Total Image Width: '+response.image_width+'px. Total Image Height: '+response.image_height+'px.</h4>';
                top_section_html = top_section_html + '<button class="btn btn-default btn-sm" id="drone_imagery_plot_polygons_switch" data-image_url="'+response.image_url+'" data-image_fullpath="'+response.image_fullpath+'" data-contours_image_url="'+response.contours_image_url+'" data-contours_image_fullpath="'+response.contours_image_fullpath+'">Switch Image View</button><br/><br/>';
                jQuery('#'.info_div_id).html(top_section_html);

                canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                draw_canvas_image(background_image_url, 0);

                plotpolygonsImg = document.getElementById(canvas_div_id);
                //plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygons;
                plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygonsPoint;

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving contours for image!')
            }
        });
    }

    var drone_imagery_plot_polygon_current_background_toggle = 1;
    jQuery(document).on('click', '#drone_imagery_plot_polygons_switch', function(){
        var image_url;
        if (drone_imagery_plot_polygon_current_background_toggle == 0) {
            drone_imagery_plot_polygon_current_background_toggle = 1;
            image_url = jQuery(this).data('contours_image_url');
        } else if (drone_imagery_plot_polygon_current_background_toggle == 1) {
            drone_imagery_plot_polygon_current_background_toggle = 0;
            image_url = jQuery(this).data('image_url');
        }
        draw_canvas_image(image_url, plot_polygons_total_height_generated/plot_polygons_num_rows_generated);

        return;
    });

    jQuery('#plot_polygons_use_previously_saved_template').click(function() {
        var plot_polygons_use_previously_saved_template = jQuery('#drone_imagery_plot_polygon_select').val();
        if (plot_polygons_use_previously_saved_template == '') {
            alert('Please select a previously saved template before trying to apply it. If there is not a template listed, then you can create one using the templating tool above.');
            return;
        }

        jQuery.ajax({
            url : '/ajax/drone_imagery/retrieve_parameter_template?plot_polygons_template_projectprop_id='+plot_polygons_use_previously_saved_template,
            success: function(response){
                console.log(response);

                drone_imagery_plot_polygons_display = response.parameter;
                drone_imagery_plot_polygons = response.parameter;

                draw_canvas_image(background_image_url, 0);
                droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);
                droneImageryRectangleLayoutTable(drone_imagery_plot_polygons);
            },
            error: function(response){
                alert('Error retrieving plot polygons template!');
            }
        });
        return;
    });

    var plot_polygons_num_rows_generated;
    var plot_polygons_num_cols_generated;
    var plot_polygons_number_generated;
    var plot_polygons_total_height_generated;

    jQuery('#drone_imagery_plot_polygons_rectangles_apply').click(function() {
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];

        var num_rows_val = jQuery('#drone_imagery_plot_polygons_num_rows').val();
        var num_cols_val = jQuery('#drone_imagery_plot_polygons_num_cols').val();
        var section_top_left_offset_val = jQuery('#drone_imagery_plot_polygons_top_left_offset').val();
        var section_bottom_left_offset_val = jQuery('#drone_imagery_plot_polygons_bottom_left_offset').val();
        var section_top_offset_val = jQuery('#drone_imagery_plot_polygons_top_offset').val();
        var section_top_right_offset_val = jQuery('#drone_imagery_plot_polygons_top_right_offset').val();
        var section_bottom_offset_val = jQuery('#drone_imagery_plot_polygons_bottom_offset').val();

        if (num_rows_val == ''){
            alert('Please give the number of rows!');
            return;
        }
        if (num_cols_val == ''){
            alert('Please give the number of columns!');
            return;
        }
        if (section_top_left_offset_val == ''){
            alert('Please give the top left margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_bottom_left_offset_val == ''){
            alert('Please give the bottom left margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_top_offset_val == ''){
            alert('Please give the top margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_top_right_offset_val == ''){
            alert('Please give the top right margin! This can be 0 if there is no offset.');
            return;
        }
        if (section_bottom_offset_val == ''){
            alert('Please give the bottom margin! This can be 0 if there is no offset.');
            return;
        }

        plot_polygons_num_rows_generated = parseInt(num_rows_val);
        plot_polygons_num_cols_generated = parseInt(num_cols_val);
        var section_width = background_image_width;
        var section_height = background_image_height;
        var section_top_left_offset = parseInt(section_top_left_offset_val);
        var section_bottom_left_offset = parseInt(section_bottom_left_offset_val);
        var section_top_offset = parseInt(section_top_offset_val);
        var section_top_right_offset = parseInt(section_top_right_offset_val);
        var section_bottom_offset = parseInt(section_bottom_offset_val);

        var total_left_shift = section_bottom_left_offset - section_top_left_offset;
        var col_left_shift = total_left_shift / plot_polygons_num_rows_generated;

        var col_width = (section_width - section_top_left_offset - section_top_right_offset) / plot_polygons_num_cols_generated;
        var row_height = (section_height - section_top_offset - section_bottom_offset) / plot_polygons_num_rows_generated;

        var x_pos = section_top_left_offset;
        var y_pos = section_top_offset;
        var generated_polygons = [];
        var row_num = 1;
        for (var i=0; i<plot_polygons_num_rows_generated; i++) {
            for (var j=0; j<plot_polygons_num_cols_generated; j++) {
                generated_polygons.push([
                    {x:x_pos, y:y_pos},
                    {x:x_pos + col_width, y:y_pos},
                    {x:x_pos + col_width, y:y_pos + row_height},
                    {x:x_pos, y:y_pos + row_height}
                ]);
                x_pos = x_pos + col_width;
            }
            x_pos = section_top_left_offset + (row_num * col_left_shift);
            y_pos = y_pos + row_height;
            row_num = row_num + 1;
        }
        //console.log(generated_polygons);

        plot_polygons_total_height_generated = row_height * plot_polygons_num_rows_generated;
        plot_polygons_number_generated = generated_polygons.length;

        for (var i=0; i<generated_polygons.length; i++) {
            plot_polygons_ind_4_points = generated_polygons[i];
            plot_polygons_display_points = plot_polygons_ind_4_points;
            plot_polygons_display_points.push(plot_polygons_ind_4_points[0]);
            drawPolyline(plot_polygons_display_points);
            drawWaypoints(plot_polygons_display_points, i, 0);
            drone_imagery_plot_generated_polygons[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_display[i] = plot_polygons_display_points;
        }

        droneImageryRectangleLayoutTable(drone_imagery_plot_generated_polygons);
    });

    jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
        source: drone_imagery_plot_polygons_available_stock_names
    });

    jQuery(document).on('click', '#drone_imagery_plot_polygons_clear', function(){
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw_canvas_image(background_image_url, 0);
        jQuery('#drone_imagery_generated_polygons_div').html('');
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);
    });

    function draw_canvas_image(image_url, random_scaling) {
        var image = new Image();
        image.onload = function () {
            canvas.width = this.naturalWidth;
            canvas.height = this.naturalHeight;
            ctx.drawImage(this, 0, 0);

            for (key in drone_imagery_plot_polygons_display) {
                var plot_polygons_display_points_again = drone_imagery_plot_polygons_display[key];
                drawPolyline(plot_polygons_display_points_again);
                drawWaypoints(plot_polygons_display_points_again, key, random_scaling);
            }
            jQuery('#manage_drone_imagery_plot_polygons_load_div').hide();
        };
        image.src = image_url;
    }

    function GetCoordinatesPlotPolygons(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (plot_polygons_ind_points.length <= 4){
            plot_polygons_ind_points.push({x:PosX, y:PosY});
            plot_polygons_display_points.push({x:PosX, y:PosY});

            if (plot_polygons_ind_points.length == 4) {
                plot_polygons_ind_4_points = plot_polygons_ind_points;
            }
        } else if (plot_polygons_ind_points.length > 4) {
            if (plot_polygons_display_points.length == 5) {
                jQuery('#drone_imagery_assign_plot_dialog').modal('show');
            }
            plot_polygons_ind_points = [];
        }
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, undefined, 0);
    }

    function GetCoordinatesPlotPolygonsPoint(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        alert('X Coordinate: '+PosX+'. Y Coordinate: '+PosY+'.');
    }

    jQuery('#drone_imagery_assign_plot_dialog').on('shown.bs.modal', function (e) {
        jQuery("#drone_imagery_plot_polygon_assign_plot_name").focus();
    });

    jQuery('#drone_imagery_assign_plot_dialog').on('hide.bs.modal', function (e) {
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, plot_polygon_name, 0);
        drone_imagery_plot_polygons_display[plot_polygon_name] = plot_polygons_display_points;
        plot_polygons_display_points = [];
    });

    jQuery('#drone_imagery_plot_polygon_assign_add').click(function(){
        plot_polygon_name = jQuery('#drone_imagery_plot_polygon_assign_plot_name').val();
        if (plot_polygon_name == ''){
            alert('Please give a name name (plot name, plant name, etc)');
        }
        drone_imagery_plot_polygons[plot_polygon_name] = plot_polygons_ind_4_points;
        jQuery('#drone_imagery_assign_plot_dialog').modal('hide');
        console.log(drone_imagery_plot_polygons);
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);
    });

    jQuery('#drone_imagery_assign_plot_form').on('keyup keypress', function(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            jQuery("#drone_imagery_plot_polygon_assign_add").trigger( "click" );
            return false;
        }
    });

    jQuery(document).on('click', 'button[name=drone_imagery_plot_polygons_submit_bottom]', function(){

        jQuery('input[name="drone_imagery_plot_polygons_autocomplete"]').each(function() {
            var stock_name = this.value;
            if (stock_name != '') {
                var polygon = drone_imagery_plot_generated_polygons[jQuery(this).data('generated_polygon_key')];
                drone_imagery_plot_polygons[stock_name] = polygon;
            }
        });
        
        submit_assignment_plot_polygons();
    });

    function submit_assignment_plot_polygons() {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/assign_plot_polygons',
            dataType: "json",
            data: {
                'image_id': background_removed_stitched_image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'stock_polygons': JSON.stringify(drone_imagery_plot_polygons),
                'assign_plot_polygons_type': assign_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving assigned plot polygons!')
            }
        });
    }

    jQuery(document).on('click', '#drone_imagery_plot_polygons_generated_assign', function() {
        jQuery('input[name="drone_imagery_plot_polygons_autocomplete"]').each(function() {
            var stock_name = this.value;
            if (stock_name != '') {
                var polygon = drone_imagery_plot_generated_polygons[jQuery(this).data('generated_polygon_key')];
                drone_imagery_plot_polygons[stock_name] = polygon;
            }
        });

        var plot_polygons_num_border_rows_left = parseInt(jQuery('#drone_imagery_plot_polygons_num_border_rows_left').val());
        var plot_polygons_num_border_rows_right = parseInt(jQuery('#drone_imagery_plot_polygons_num_border_rows_right').val());
        var plot_polygons_num_border_rows_top = parseInt(jQuery('#drone_imagery_plot_polygons_num_border_rows_top').val());
        var plot_polygons_num_border_rows_bottom = parseInt(jQuery('#drone_imagery_plot_polygons_num_border_rows_bottom').val());
        var plot_polygons_first_plot_start = jQuery('#drone_imagery_plot_polygons_first_plot_start').val();
        var plot_polygons_second_plot_follows = jQuery('#drone_imagery_plot_polygons_second_plot_follows').val();
        var plot_polygons_plot_orientation = jQuery('#drone_imagery_plot_polygons_plot_orientation').val();

        var plot_polygons_layout = field_trial_layout_response.output;
        var plot_polygons_plot_numbers = [];
        var plot_polygons_plot_numbers_plot_names = {};
        for (var i=1; i<plot_polygons_layout.length; i++) {
            var plot_polygons_plot_number = parseInt(plot_polygons_layout[i][2]);
            plot_polygons_plot_numbers.push(plot_polygons_plot_number);
            plot_polygons_plot_numbers_plot_names[plot_polygons_plot_number] = plot_polygons_layout[i][0];
        }
        plot_polygons_plot_numbers = plot_polygons_plot_numbers.sort(function (a, b) {  return a - b;  });
        var plot_polygons_current_plot_number_index = 0;

        var plot_polygon_new_display = {};
        if (plot_polygons_first_plot_start == 'top_left') {
            var generated_polygon_key_first_plot_number = 0 + (plot_polygons_num_border_rows_top * plot_polygons_num_cols_generated) + plot_polygons_num_border_rows_left;
            if (plot_polygons_second_plot_follows == 'left' || plot_polygons_second_plot_follows == 'up') {
                alert('Second plot cannot follow left or up from first plot if the first plot starts at the top left.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'right') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length; j++){
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_current_polygon_index = plot_polygon_current_polygon_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;
                        
                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_current_polygon_index = plot_polygon_current_polygon_index + plot_polygons_num_border_rows_left + plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_right = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length; j++){

                        if (going_right == 1) {
                            plot_polygon_current_polygon_index = plot_polygon_zigzig_polygon_index;
                        }
                        if (going_right == 0) {
                            plot_polygon_current_polygon_index = (plot_polygons_num_cols_generated * plot_polygon_row_count) + (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_right) - plot_polygon_column_count - 1;
                        }
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + plot_polygons_num_border_rows_left + plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_right == 1) {
                                going_right = 0;
                            } else {
                                going_right = 1;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'down') {
                alert('Down not implemented if first plot starts in top left. Please contact us or try rotating your image differently before assigning plot polygons.');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'top_right') {
            var generated_polygon_key_first_plot_number = (plot_polygons_num_border_rows_top * plot_polygons_num_cols_generated) + plot_polygons_num_cols_generated - 1 - plot_polygons_num_border_rows_right;
            if (plot_polygons_second_plot_follows == 'right' || plot_polygons_second_plot_follows == 'up') {
                alert('Second plot cannot follow right or up from first plot if the first plot starts at the top right.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'left') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    console.log(generated_polygon_key_first_plot_number);
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_row_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length; j++){

                        plot_polygon_current_polygon_index = (plot_polygons_num_cols_generated * plot_polygon_row_count) + (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_right) - plot_polygon_column_count - 1;
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_left = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=generated_polygon_key_first_plot_number; j<generated_polygon_key_first_plot_number + plot_polygons_plot_numbers.length; j++){

                        if (going_left == 0) {
                            plot_polygon_current_polygon_index = (plot_polygons_num_cols_generated * plot_polygon_row_count) + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        }
                        if (going_left == 1) {
                            plot_polygon_current_polygon_index = (plot_polygons_num_cols_generated * plot_polygon_row_count) + plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygon_column_count - 1;
                        }
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index + plot_polygons_num_border_rows_left + plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_left == 1) {
                                going_left = 0;
                            } else {
                                going_left = 1;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'down') {
                alert('Down not implemented if your first plot starts in top right. Please contact us or try rotating your image differently before assigning plot polygons.');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'bottom_left') {
            var generated_polygon_key_first_plot_number = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right;
            if (plot_polygons_second_plot_follows == 'left' || plot_polygons_second_plot_follows == 'down') {
                alert('Second plot cannot follow left or down from the first plot if the first plot starts at the bottom left.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'right') {
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var going_right = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        if (going_right == 0) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right - plot_polygon_column_count - 1;
                        }
                        if (going_right == 1) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        }
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_right == 1) {
                                going_right = 0;
                            } else {
                                going_right = 1;
                            }
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'up') {
                alert('Up not implemented if your first plot starts in bottom left. Please contact us or try rotating your image differently before assigning plot polygons.');
                return;
            }
        }
        if (plot_polygons_first_plot_start == 'bottom_right') {
            var generated_polygon_key_first_plot_number = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - plot_polygons_num_border_rows_right - 1;
            if (plot_polygons_second_plot_follows == 'right' || plot_polygons_second_plot_follows == 'down') {
                alert('Second plot cannot follow right or down from the first plot if the first plot starts at the bottom right.');
                return;
            }
            if (plot_polygons_second_plot_follows == 'left') {
                if (plot_polygons_plot_orientation == 'zigzag') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];
                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_current_polygon_index = plot_polygon_current_polygon_index - 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_current_polygon_index = plot_polygon_current_polygon_index - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                        }
                    }
                }
                if (plot_polygons_plot_orientation == 'serpentine') {
                    var plot_polygon_current_polygon_index = generated_polygon_key_first_plot_number;
                    var plot_polygon_column_count = 0;
                    var plot_polygon_zigzig_polygon_index = generated_polygon_key_first_plot_number;
                    var going_left = 1;
                    var plot_polygon_row_count = 0;
                    for (var j=0; j<plot_polygons_plot_numbers.length; j++){

                        if (going_left == 1) {
                            plot_polygon_current_polygon_index = plot_polygon_zigzig_polygon_index;
                        }
                        if (going_left == 0) {
                            plot_polygon_current_polygon_index = plot_polygons_number_generated - (plot_polygons_num_border_rows_bottom * plot_polygons_num_cols_generated) - (plot_polygon_row_count * plot_polygons_num_cols_generated) - plot_polygons_num_cols_generated + plot_polygons_num_border_rows_left + plot_polygon_column_count;
                        }
                        plot_polygon_new_display[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] =  drone_imagery_plot_polygons_display[plot_polygon_current_polygon_index];
                        drone_imagery_plot_polygons[plot_polygons_plot_numbers_plot_names[plot_polygons_plot_numbers[plot_polygons_current_plot_number_index]]] = drone_imagery_plot_generated_polygons[plot_polygon_current_polygon_index];

                        plot_polygons_current_plot_number_index = plot_polygons_current_plot_number_index + 1;
                        plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index - 1;
                        plot_polygon_column_count = plot_polygon_column_count + 1;

                        if (plot_polygon_column_count == (plot_polygons_num_cols_generated - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right)) {
                            plot_polygon_zigzig_polygon_index = plot_polygon_zigzig_polygon_index - plot_polygons_num_border_rows_left - plot_polygons_num_border_rows_right;
                            plot_polygon_column_count = 0;
                            plot_polygon_row_count = plot_polygon_row_count + 1;
                            if (going_left == 1) {
                                going_left = 0;
                            } else {
                                going_left = 1;
                            }
                        }
                    }
                }
            }
            if (plot_polygons_second_plot_follows == 'up') {
                alert('Up not implemented if your first plot starts in bottom right. Please contact us or try rotating your image differently before assigning plot polygons.');
                return;
            }
        }

        console.log(drone_imagery_plot_polygons);
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);

        drone_imagery_plot_polygons_display = plot_polygon_new_display;
        draw_canvas_image(background_image_url, plot_polygons_total_height_generated/plot_polygons_num_rows_generated);
    });

    function droneImageryRectangleLayoutTable(generated_polygons) {
        var html = '<hr><div class="well well-sm"><h2>Assign Plot Polygons to Field Trial Entities</h2>';
        html = html + '<div class="panel panel-default"><div class="panel-body">';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Number of Border Rows on Left: </label><div class="col-sm-6"><input class="form-control" id="drone_imagery_plot_polygons_num_border_rows_left" name="drone_imagery_plot_polygons_num_border_rows_left" type="number" placeholder="Number of border rows assigned on left" value="0"/></div></div></div><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Number of Border Rows on Right: </label><div class="col-sm-6"><input class="form-control" id="drone_imagery_plot_polygons_num_border_rows_right" name="drone_imagery_plot_polygons_num_border_rows_right" type="number" placeholder="Number of border rows assigned on right" value="0"/></div></div></div></div>';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Number of Border Rows on Top: </label><div class="col-sm-6"><input class="form-control" id="drone_imagery_plot_polygons_num_border_rows_top" name="drone_imagery_plot_polygons_num_border_rows_top" type="number" placeholder="Number of border rows on top" value="0"/></div></div></div><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Number of Border Rows on Bottom: </label><div class="col-sm-6"><input class="form-control" id="drone_imagery_plot_polygons_num_border_rows_bottom" name="drone_imagery_plot_polygons_num_border_rows_bottom" type="number" placeholder="Number of border rows on bottom" value="0"/></div></div></div></div>';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Location of First Plot (e.g. plot number 1): </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_first_plot_start" name="drone_imagery_plot_polygons_first_plot_start"><option value="top_left">Top Left</option><option value="top_right">Top Right</option><option value="bottom_left">Bottom Left</option><option value="bottom_right">Bottom Right</option></select></div></div></div><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Second Plot Follows First Plot Going: </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_second_plot_follows" name="drone_imagery_plot_polygons_second_plot_follows"><option value="right">Right</option><option value="up">Up</option><option value="down">Down</option><option value="left">Left</option></select></div></div></div></div>';
        html = html + '<div class="row"><div class="col-sm-6"><div class="form-group form-group-sm"><label class="col-sm-6 control-label">Plot Number Orientation: </label><div class="col-sm-6"><select class="form-control" id="drone_imagery_plot_polygons_plot_orientation" name="drone_imagery_plot_polygons_plot_orientation"><option value="serpentine">Serpentine</option><option value="zigzag">Zigzag (Not Serpentine)</option></select></div></div></div></div>';
        html = html + '</div></div></div>';
        //html = html + '<table class="table table-borders table-hover" id="drone_imagery_generated_polygons_table"><thead><tr><th>Generated Number</th><th>Field Trial Observation Unit</th></tr></thead><tbody>';
        //for (key in generated_polygons) {
        //    html = html + '<tr><td>' + key + '</td><td><input class="form-control" type="text" name="drone_imagery_plot_polygons_autocomplete" data-generated_polygon_key="'+key+'"/></td></tr>';
        //}
        //html = html + '</tbody></table>';
        html = html + '<button class="btn btn-primary" id="drone_imagery_plot_polygons_generated_assign">Generate Assignments (Does Not Save)</button>&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" name="drone_imagery_plot_polygons_submit_bottom">Finish and Save Polygons To Plots</button></div>';
        jQuery('#drone_imagery_generated_polygons_div').html(html);
        jQuery('#drone_imagery_generated_polygons_table').DataTable({'paging':false});

        jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
            source: drone_imagery_plot_polygons_available_stock_names
        });
    }

    function droneImageryDrawLayoutTable(response, plot_polygons) {
        var output = response.output;
        var header = output[0];
        var html = '<table class="table table-borders table-hover" id="drone_imagery_layout_table"><thead><tr>';
        for (var i=0; i<header.length; i++){
            html = html + '<td>'+header[i]+'</td>';
        }
        html = html + '<td>Polygon Assigned</td>';
        html = html + '</tr></thead><tbody>';
        for (var i=1; i<output.length; i++){
            html = html + '<tr>';
            for (var j=0; j<output[i].length; j++){
                html = html + '<td>'+output[i][j]+'</td>';
            }
            if (output[i][0] in plot_polygons){
                html = html + '<td>Yes</td>';
            } else {
                html = html + '<td></td>';
            }
            html = html + '</tr>';
        }
        html = html + '</tbody></table>';
        jQuery('#drone_imagery_trial_layout_div').html(html);
        jQuery('#drone_imagery_layout_table').DataTable();
    }

    //
    //Remove Background Histogram
    //

    var removeBackgroundHistogramImg;
    var removeBackgroundDisplayImg;
    var removeBackgroundThresholdPeak1;
    var removeBackgroundThresholdPeak1pixels;
    var removeBackgroundThresholdPeak2;
    var removeBackgroundThresholdPeak2pixels;
    var removeBackgroundThresholdValue;
    var remove_background_denoised_stitched_image_id;
    var remove_background_current_image_id;
    var remove_background_current_image_type;
    var remove_background_drone_run_band_project_id;

    jQuery(document).on('click', 'button[name=project_drone_imagery_remove_background]', function(){
        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').show();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        window.scrollTo(0,0);

        remove_background_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        remove_background_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        remove_background_current_image_id = jQuery(this).data('remove_background_current_image_id');
        remove_background_current_image_type = jQuery(this).data('remove_background_current_image_type');

        showRemoveBackgroundHistogramStart(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div', 'manage_drone_imagery_remove_background_load_div');
    });

    function showRemoveBackgroundHistogramStart(remove_background_current_image_id, canvas_div_id, histogram_canvas_div_id, load_div_id) {
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+remove_background_current_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                removeBackgroundDisplayImg = canvas;
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);

                    var src = cv.imread(canvas_div_id);
                    cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
                    var srcVec = new cv.MatVector();
                    srcVec.push_back(src);
                    var accumulate = false;
                    var channels = [0];
                    var histSize = [256];
                    var ranges = [0, 255];
                    var hist = new cv.Mat();
                    var mask = new cv.Mat();
                    var color = new cv.Scalar(255, 255, 255);
                    var scale = 3;
                    var hist_height = src.rows/2;

                    cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
                    var result = cv.minMaxLoc(hist, mask);
                    var max = result.maxVal;
                    var dst = new cv.Mat.zeros(hist_height, histSize[0] * scale, cv.CV_8UC3);
                    // draw histogram
                    for (let i = 0; i < histSize[0]; i++) {
                        var binVal = hist.data32F[i] * hist_height / max;
                        var point1 = new cv.Point(i * scale, hist_height - 1);
                        var point2 = new cv.Point((i + 1) * scale - 1, hist_height - binVal);
                        cv.rectangle(dst, point1, point2, color, cv.FILLED);
                    }
                    cv.imshow(histogram_canvas_div_id, dst);
                    src.delete(); dst.delete(); srcVec.delete(); mask.delete(); hist.delete();

                    removeBackgroundHistogramImg = document.getElementById(histogram_canvas_div_id);
                    removeBackgroundHistogramImg.onmousemove = GetCoordinatesRemoveBackgrounHistogram;
                    removeBackgroundHistogramImg.onmousedown = GetCoordinatesRemoveBackgrounHistogramDrawLine;

                    jQuery('#'+load_div_id).hide();

                };
                image.src = response.image_url;

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    jQuery('#drone_imagery_remove_background_find_minimum').click(function(){
        if (!removeBackgroundThresholdPeak1 || !removeBackgroundThresholdPeak2) {
            alert('Please click on the two right-most peaks in the histogram first!');
        } else {
            showRemoveBackgroundHistogramMinimum(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div');
        }
    });

    function showRemoveBackgroundHistogramMinimum(remove_background_current_image_id, canvas_div_id, histogram_canvas_div_id) {
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+remove_background_current_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById(canvas_div_id);
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);

                    var src = cv.imread(canvas_div_id);
                    cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
                    var srcVec = new cv.MatVector();
                    srcVec.push_back(src);
                    var accumulate = false;
                    var channels = [0];
                    var histSize = [256];
                    var ranges = [0, 255];
                    var hist = new cv.Mat();
                    var mask = new cv.Mat();
                    var color = new cv.Scalar(255, 255, 255);
                    var scale = 3;
                    var hist_height = src.rows/2;

                    cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
                    var result = cv.minMaxLoc(hist, mask);
                    var max = result.maxVal;
                    var dst = new cv.Mat.zeros(hist_height, histSize[0] * scale, cv.CV_8UC3);
                    // draw histogram
                    var minimum_x_val = 0;
                    var minimum_x_val_pix = 0;
                    var minimum_y_val = 1000000000000000000000000000;

                    if (removeBackgroundThresholdPeak1pixels > removeBackgroundThresholdPeak2pixels) {
                        var removeBackgroundThresholdPeak1pixels_original = removeBackgroundThresholdPeak1pixels;
                        removeBackgroundThresholdPeak1pixels = removeBackgroundThresholdPeak2pixels;
                        removeBackgroundThresholdPeak2pixels = removeBackgroundThresholdPeak1pixels_original;
                    }

                    for (let i = 0; i < histSize[0]; i++) {
                        var binVal = hist.data32F[i] * hist_height / max;
                        
                        var x_start = i * scale;
                        if (x_start >= removeBackgroundThresholdPeak1pixels && x_start <= removeBackgroundThresholdPeak2pixels){
                            //console.log('x: '+i.toString()+' y: '+binVal.toString());
                            if (binVal < minimum_y_val) {
                                minimum_y_val = binVal;
                                minimum_x_val = i;
                                minimum_x_val_pix = x_start;
                            }
                        }
                        
                        var point1 = new cv.Point(x_start, hist_height - 1);
                        var point2 = new cv.Point((i + 1) * scale - 1, hist_height - binVal);
                        cv.rectangle(dst, point1, point2, color, cv.FILLED);
                    }
                    cv.imshow('drone_imagery_remove_background_histogram_div', dst);
                    src.delete(); dst.delete(); srcVec.delete(); mask.delete(); hist.delete();

                    removeBackgroundHistogramImg = document.getElementById(histogram_canvas_div_id);
                    removeBackgroundHistogramImg.onmousemove = GetCoordinatesRemoveBackgrounHistogram;
                    removeBackgroundHistogramImg.onmousedown = GetCoordinatesRemoveBackgrounHistogramDrawLine;

                    jQuery('div[name="drone_imagery_remove_background_threshold"]').html('<h5>Selected Threshold Value: '+ minimum_x_val );

                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, removeBackgroundThresholdPeak1pixels, removeBackgroundHistogramImg.height, '#ff0000');
                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, removeBackgroundThresholdPeak2pixels, removeBackgroundHistogramImg.height, '#ff0000');
                    removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, minimum_x_val_pix, removeBackgroundHistogramImg.height, '#0000ff');

                    removeBackgroundThresholdValue = minimum_x_val;

                    removeBackgroundHistogramImgReDraw();
                };
                image.src = response.image_url;
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });
    }

    jQuery('#drone_imagery_remove_background_start_over').click(function(){
        removeBackgroundThresholdPeak1 = undefined;
        removeBackgroundThresholdPeak2 = undefined;
        removeBackgroundThresholdPeak1pixels = undefined;
        removeBackgroundThresholdPeak2pixels = undefined;

        showRemoveBackgroundHistogramStart(remove_background_current_image_id, 'drone_imagery_remove_background_original', 'drone_imagery_remove_background_histogram_div', 'manage_drone_imagery_remove_background_load_div');
    });

    function removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, position, image_height, color) {
        var ctx = removeBackgroundHistogramImg.getContext("2d");
        ctx.beginPath();
        ctx.moveTo(position,0);
        ctx.lineTo(position, image_height);
        ctx.strokeStyle = color;
        ctx.stroke();
    }

    function removeBackgroundHistogramImgReDraw() {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/remove_background_display',
            dataType: "json",
            data: {
                'image_id': remove_background_current_image_id,
                'drone_run_band_project_id': remove_background_drone_run_band_project_id,
                'lower_threshold': removeBackgroundThresholdValue,
                'upper_threshold': '255',
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                var canvas = removeBackgroundDisplayImg;
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = function () {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                };
                image.src = response.removed_background_image_url;
            },
            error: function(response){
                alert('Error saving removed background display image!')
            }
        });
    }

    function GetCoordinatesRemoveBackgrounHistogram(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(removeBackgroundHistogramImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];

        jQuery('div[name="drone_imagery_remove_background_threshold_current"]').html('<h5>Current Mouse Value: '+ (((PosX+1)/3)-1) );
    }

    function GetCoordinatesRemoveBackgrounHistogramDrawLine(e) {
        var PosX = 0;
        var PosY = 0;
        var image_width = removeBackgroundHistogramImg.width;
        var image_height = removeBackgroundHistogramImg.height;

        var ImgPos;
        ImgPos = FindPosition(removeBackgroundHistogramImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];

        if (!removeBackgroundThresholdPeak1 || !removeBackgroundThresholdPeak2) {
            removeBackgroundHistogramImgDrawLine(removeBackgroundHistogramImg, PosX, image_height, '#ff0000');
            
            var threshold_value = Math.round( (((PosX+1)/3)-1) );
            if (removeBackgroundThresholdPeak1) {
                removeBackgroundThresholdPeak2 = threshold_value;
                removeBackgroundThresholdPeak2pixels = PosX;
            } else {
                removeBackgroundThresholdPeak1 = threshold_value;
                removeBackgroundThresholdPeak1pixels = PosX;
            }
        }
    }

    jQuery('#drone_imagery_remove_background_submit').click(function(){
        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, removeBackgroundThresholdValue, '255');
    });

    jQuery('#drone_imagery_remove_background_defined_submit').click(function(){
        var remove_background_drone_run_band_lower_threshold = jQuery('#drone_imagery_remove_background_lower_threshold').val();
        var remove_background_drone_run_band_upper_threshold = jQuery('#drone_imagery_remove_background_upper_threshold').val();
        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, remove_background_drone_run_band_lower_threshold, remove_background_drone_run_band_upper_threshold);
    });

    function calculateThresholdPercentageValues(canvas_div_id, drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage) {
        var src = cv.imread(canvas_div_id);
        cv.cvtColor(src, src, cv.COLOR_RGBA2GRAY, 0);
        var srcVec = new cv.MatVector();
        srcVec.push_back(src);
        var total_pixels = src.cols * src.rows;
        var accumulate = false;
        var channels = [0];
        var histSize = [256];
        var ranges = [0, 255];
        var hist = new cv.Mat();
        var mask = new cv.Mat();

        cv.calcHist(srcVec, channels, mask, hist, histSize, ranges, accumulate);
        var summing = 0;
        var drone_imagery_remove_background_lower_percentage_threshold;
        var drone_imagery_remove_background_upper_percentage_threshold;
        for (let i = 0; i < histSize[0]; i++) {
            var binVal = hist.data32F[i];
            summing = summing + binVal;
            var percentage = summing / total_pixels;
            if (percentage >= drone_imagery_remove_background_lower_percentage) {
                drone_imagery_remove_background_lower_percentage_threshold = i;
                break;
            }
        }
        summing = 0;
        for (let i = 0; i < histSize[0]; i++) {
            var binVal = hist.data32F[i];
            summing = summing + binVal;
            var percentage = summing / total_pixels;
            if (percentage >= 1-drone_imagery_remove_background_upper_percentage) {
                drone_imagery_remove_background_upper_percentage_threshold = i;
                break;
            }
        }
        return [drone_imagery_remove_background_lower_percentage_threshold, drone_imagery_remove_background_upper_percentage_threshold];
    }

    jQuery('#drone_imagery_remove_background_defined_percentage_submit').click(function(){
        var drone_imagery_remove_background_lower_percentage = Number(jQuery('#drone_imagery_remove_background_lower_threshold_percentage').val())/100;
        var drone_imagery_remove_background_upper_percentage = Number(jQuery('#drone_imagery_remove_background_upper_threshold_percentage').val())/100;
    
        var threshold_value_return = calculateThresholdPercentageValues('drone_imagery_remove_background_original', drone_imagery_remove_background_lower_percentage, drone_imagery_remove_background_upper_percentage);
        
        manage_drone_imagery_remove_background_threshold_save(remove_background_current_image_id, remove_background_current_image_type, remove_background_drone_run_band_project_id, threshold_value_return[0], threshold_value_return[1]);
    });

    function manage_drone_imagery_remove_background_threshold_save(image_id, image_type, drone_run_band_project_id, lower_threshold, upper_threshold){
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/remove_background_save',
            dataType: "json",
            data: {
                'image_id': image_id,
                'image_type': image_type,
                'drone_run_band_project_id': drone_run_band_project_id,
                'lower_threshold': lower_threshold,
                'upper_threshold': upper_threshold
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                }

                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving removed background image!')
            }
        });
    }

    //
    //Calculate Phenotypes JS
    //

    var manage_drone_imagery_calculate_phenotypes_drone_run_band_id;
    var manage_drone_imagery_calculate_phenotypes_drone_run_band_type;
    var manage_drone_imagery_calculate_phenotypes_plot_polygons_type;

    jQuery(document).on('click', 'button[name=project_drone_imagery_get_phenotypes]', function() {
        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').show();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').hide();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        window.scrollTo(0,0);

        manage_drone_imagery_calculate_phenotypes_drone_run_band_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_calculate_phenotypes_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');
        manage_drone_imagery_calculate_phenotypes_plot_polygons_type = jQuery(this).data('plot_polygons_type');
    });

    jQuery('#drone_imagery_calculate_phenotypes_sift').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/calculate_phenotypes?method=sift',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>SIFT Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_sift').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating sift features!')
            }
        });
    
    });

    jQuery('#drone_imagery_calculate_phenotypes_orb').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/calculate_phenotypes?method=orb',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>ORB Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_orb').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating ORB features!')
            }
        });
    
    });

    jQuery('#drone_imagery_calculate_phenotypes_surf').click(function(){

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/calculate_phenotypes?method=surf',
            dataType: "json",
            data: {
                'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                if(response.error) {
                    alert(response.error);
                    return;
                }

                var html = '<table class="table table-bordered table-hover"><thead><tr><th>Observation Unit</th><th>SURF Features Image</th></tr></thead><tbody>';
                for (var i=0; i<response.results.length; i++) {
                    html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td></tr>';
                }
                jQuery('#manage_drone_imagery_calculate_phenotypes_show_surf').html(html);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error calculating surf features!')
            }
        });
    
    });

    jQuery('#drone_imagery_calculate_phenotypes_zonal_stats').click(function(){
        get_select_box('ontology_children','drone_imagery_calculate_phenotypes_zonal_stats_time_select_div', {'selectbox_id':'drone_imagery_calculate_phenotypes_zonal_stats_time_select', 'selectbox_name':'drone_imagery_calculate_phenotypes_zonal_stats_time_select', 'empty':1, 'rel_cvterm':'is_a', 'rel_cv':'relationship', 'parent_node_cvterm':'time of year|TIME:0000005' });
        jQuery('#drone_imagery_calc_phenotypes_zonal_channel_dialog').modal('show');
    });

    jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_channel_select').click(function(){

        var manage_drone_imagery_calculate_phenotypes_zonal_channel = jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_channel_select_input').val();
        var manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id = jQuery('#drone_imagery_calculate_phenotypes_zonal_stats_time_select').val();

        if ( ( (manage_drone_imagery_calculate_phenotypes_plot_polygons_type == 'tgi') || (manage_drone_imagery_calculate_phenotypes_drone_run_band_type != 'Merged 3 Bands' && manage_drone_imagery_calculate_phenotypes_drone_run_band_type != 'RGB Color Image') ) && (manage_drone_imagery_calculate_phenotypes_zonal_channel == '1' || manage_drone_imagery_calculate_phenotypes_zonal_channel == '2') ) {
            alert('The current image is composed of only a single channel, and so only channel 1 can be selected here!');
            return false;
        }
        else {

            jQuery.ajax({
                type: 'POST',
                url: '/ajax/drone_imagery/calculate_phenotypes?method=zonal',
                dataType: "json",
                data: {
                    'drone_run_band_project_id': manage_drone_imagery_calculate_phenotypes_drone_run_band_id,
                    'drone_run_band_project_type': manage_drone_imagery_calculate_phenotypes_drone_run_band_type,
                    'image_band': manage_drone_imagery_calculate_phenotypes_zonal_channel,
                    'time_cvterm_id': manage_drone_image_calculate_phenotypes_zonal_time_cvterm_id,
                    'plot_polygons_type': manage_drone_imagery_calculate_phenotypes_plot_polygons_type,
                },
                beforeSend: function() {
                    jQuery("#working_modal").modal("show");
                },
                success: function(response){
                    console.log(response);
                    jQuery("#working_modal").modal("hide");

                    if(response.error) {
                        alert(response.error);
                        return false;
                    }

                    var html = '<table class="table table-bordered table-hover" id="manage_drone_imagery_zonal_stats_table"><thead><tr><th>Observation Unit</th><th>Image</th>';
                    for (var i=0; i<response.result_header.length; i++) {
                        html = html + '<th>'+response.result_header[i]+'</th>';
                    }
                    html = html + '</tr></thead><tbody>';
                    for (var i=0; i<response.results.length; i++) {
                        html = html + '<tr><td><a target="_blank" href="/stock/' + response.results[i].stock_id + '/view" >' + response.results[i].stock_uniquename + '</a></td><td>' + response.results[i].image + '</td>';
                        for (var j=0; j<response.results[i].result.length; j++){
                            html = html + '<td>'+response.results[i].result[j]+'</td>';
                        }
                        html = html + '</tr>';
                    }
                    jQuery('#manage_drone_imagery_calculate_phenotypes_show_zonal_stats').html(html);
                    jQuery('#manage_drone_imagery_zonal_stats_table').DataTable();

                    jQuery('#drone_imagery_calc_phenotypes_zonal_channel_dialog').modal('hide');
                    return false;
                },
                error: function(response){
                    jQuery("#working_modal").modal("hide");
                    alert('Error calculating zonal stats!')
                }
            });
        }
    
    });

    //
    //RGB/3band Image Vegetative Index
    //

    var manage_drone_imagery_vi_rgb_drone_run_band_project_id;
    var manage_drone_imagery_vi_rgb_denoised_stitched_image_id;
    var manage_drone_imagery_vi_drone_run_band_type;
    var manage_drone_imagery_vi_selected_index;

    jQuery(document).on('click', 'button[name="project_drone_imagery_rgb_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').show();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        jQuery('#manage_drone_imagery_vegetative_index_tgi_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_vari_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').hide();

        window.scrollTo(0,0);
    });

    jQuery(document).on('click', 'button[name="project_drone_imagery_3_band_vegetative"]', function(){
        manage_drone_imagery_vi_rgb_drone_run_band_project_id = jQuery(this).data('drone_run_band_project_id');
        manage_drone_imagery_vi_rgb_denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        manage_drone_imagery_vi_drone_run_band_type = jQuery(this).data('drone_run_band_project_type');

        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
        jQuery('#manage_drone_imagery_calculate_phenotypes_div').hide();
        jQuery('#manage_drone_imagery_remove_background_div').hide();
        jQuery('#manage_drone_imagery_rotate_div').hide();
        jQuery('#manage_drone_imagery_vegetative_index_div').show();
        jQuery('#manage_drone_imagery_standard_process_div').hide();

        jQuery('#manage_drone_imagery_vegetative_index_tgi_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_vari_div').show();
        jQuery('#manage_drone_imagery_vegetative_index_ndvi_div').show();

        window.scrollTo(0,0);
    });

    jQuery('#drone_imagery_vegetative_index_TGI').click(function(){
        manage_drone_imagery_vi_selected_index = 'TGI';
        getVegetativeIndex('calculate_rgb_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1);
    });

    jQuery('#drone_imagery_vegetative_index_VARI').click(function(){
        manage_drone_imagery_vi_selected_index = 'VARI';
        getVegetativeIndex('calculate_rgb_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1);
    });

    jQuery('#drone_imagery_vegetative_index_NDVI').click(function(){
        manage_drone_imagery_vi_selected_index = 'NDVI';
        getVegetativeIndex('calculate_rgb_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 1);
    });

    jQuery('#drone_imagery_rgb_vegetative_index_submit').click(function(){
        getVegetativeIndex('calculate_rgb_vegetative_index', manage_drone_imagery_vi_rgb_denoised_stitched_image_id, manage_drone_imagery_vi_rgb_drone_run_band_project_id, manage_drone_imagery_vi_drone_run_band_type, manage_drone_imagery_vi_selected_index, 0);
    });

    function getVegetativeIndex(url_part, image_id, drone_run_band_project_id, drone_run_band_project_type, index, view_only) {
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/'+url_part,
            dataType: "json",
            data: {
                'image_id': image_id,
                'drone_run_band_project_id': drone_run_band_project_id,
                'vegetative_index': index,
                'drone_run_band_project_type': drone_run_band_project_type,
                'view_only': view_only
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                if (view_only == 1) {
                    var canvas = document.getElementById('drone_imagery_vegetative_index_original_stitched_div');
                    ctx = canvas.getContext('2d');
                    var image = new Image();
                    image.onload = function () {
                        canvas.width = this.naturalWidth;
                        canvas.height = this.naturalHeight;
                        ctx.drawImage(this, 0, 0);
                    };
                    image.src = response.index_image_url;
                } else {
                    location.reload();
                }
            },
            error: function(response){
                alert('Error getting vegetative index!')
            }
        });
    }

    //
    // Apply Mask From Background Removed TGI Vegetative Index to Denoised Image
    //

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_tgi_removed_background_mask_to_denoised_image"]', function(){
        var mask_remove_background_denoised_image_id = jQuery(this).data('denoised_stitched_image_id');
        var mask_remove_background_tgi_image_id = jQuery(this).data('background_removed_tgi_stitched_image_id');
        var mask_remove_background_drone_run_project_id = jQuery(this).data('drone_run_band_project_id');

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/mask_remove_background',
            dataType: "json",
            data: {
                'image_id': mask_remove_background_denoised_image_id,
                'mask_image_id': mask_remove_background_tgi_image_id,
                'drone_run_band_project_id': mask_remove_background_drone_run_project_id,
                'mask_type': 'denoised_background_removed_thresholded_tgi_mask_original'
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                alert('Error removing background using mask of TGI vegetative index!')
            }
        });
    });

    //
    // Apply Mask From Background Removed VARI Vegetative Index to Denoised Image
    //

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_vari_removed_background_mask_to_denoised_image"]', function(){
        var mask_remove_background_denoised_image_id = jQuery(this).data('denoised_stitched_image_id');
        var mask_remove_background_tgi_image_id = jQuery(this).data('background_removed_vari_stitched_image_id');
        var mask_remove_background_drone_run_project_id = jQuery(this).data('drone_run_band_project_id');

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/mask_remove_background',
            dataType: "json",
            data: {
                'image_id': mask_remove_background_denoised_image_id,
                'mask_image_id': mask_remove_background_tgi_image_id,
                'drone_run_band_project_id': mask_remove_background_drone_run_project_id,
                'mask_type': 'denoised_background_removed_thresholded_vari_mask_original'
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                alert('Error removing background using mask of VARI vegetative index!')
            }
        });
    });

    //
    // Apply Mask From Background Removed NDVI Vegetative Index to Denoised Image
    //

    jQuery(document).on('click', 'button[name="project_drone_imagery_apply_ndvi_removed_background_mask_to_denoised_image"]', function(){
        var mask_remove_background_denoised_image_id = jQuery(this).data('denoised_stitched_image_id');
        var mask_remove_background_ndvi_image_id = jQuery(this).data('background_removed_ndvi_stitched_image_id');
        var mask_remove_background_drone_run_project_id = jQuery(this).data('drone_run_band_project_id');

        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/mask_remove_background',
            dataType: "json",
            data: {
                'image_id': mask_remove_background_denoised_image_id,
                'mask_image_id': mask_remove_background_ndvi_image_id,
                'drone_run_band_project_id': mask_remove_background_drone_run_project_id,
                'mask_type': 'denoised_background_removed_thresholded_ndvi_mask_original'
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                alert('Error removing background using mask of NDVI vegetative index!')
            }
        });
    });

    //
    // Merge bands into single image
    //

    var drone_imagery_merge_channels_drone_run_project_id;
    var drone_imagery_merge_channels_drone_run_project_name;
    jQuery(document).on('click', 'button[name="project_drone_imagery_merge_channels"]', function() {
        drone_imagery_merge_channels_drone_run_project_id = jQuery(this).data('drone_run_project_id');
        drone_imagery_merge_channels_drone_run_project_name = jQuery(this).data('drone_run_project_name');

        jQuery('#drone_imagery_merge_channels_dialog').modal('show');

        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band1_select', {'id':'drone_run_merge_band_select_1', 'name':'drone_run_merge_band_select_1', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band2_select', {'id':'drone_run_merge_band_select_2', 'name':'drone_run_merge_band_select_2', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
        get_select_box('drone_imagery_drone_run_band','drone_imagery_merge_bands_band3_select', {'id':'drone_run_merge_band_select_3', 'name':'drone_run_merge_band_select_3', 'empty':1, 'drone_run_project_id':drone_imagery_merge_channels_drone_run_project_id });
    });

    jQuery('#drone_imagery_merge_bands_submit').click(function(){
        var band_1_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_1').val();
        var band_2_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_2').val();
        var band_3_drone_run_band_project_id = jQuery('#drone_run_merge_band_select_3').val();
        jQuery.ajax({
            type: 'POST',
            url: '/ajax/drone_imagery/merge_bands',
            dataType: "json",
            data: {
                'band_1_drone_run_band_project_id': band_1_drone_run_band_project_id,
                'band_2_drone_run_band_project_id': band_2_drone_run_band_project_id,
                'band_3_drone_run_band_project_id': band_3_drone_run_band_project_id,
                'drone_run_project_id': drone_imagery_merge_channels_drone_run_project_id,
                'drone_run_project_name': drone_imagery_merge_channels_drone_run_project_name
            },
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                if(response.error) {
                    alert(response.error);
                }

                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error merging bands!')
            }
        });
    });

});

</script>

