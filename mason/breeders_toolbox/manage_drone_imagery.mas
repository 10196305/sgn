
<%args>
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery.iframe-post-form', 'CXGN.BreederSearch', 'd3.d3v4Min.js', 'CXGN.BreedersToolbox.DroneImagery', 'CXGN.BreedersToolbox.DroneImagery.DragAndDrop' ] &>

<style>
.ui-autocomplete { z-index:2147483647; }
</style>

<div id="manage_drone_imagery_top_div">

    <& /page/page_title.mas, title=>"Manage Drone Imagery" &>

    <& /page/detail_page_2_col_section.mas, info_section_collapsed => 0, info_section_title => "<h4 style='display:inline'>Drone Imagery</h4>", info_section_subtitle => 'Upload and view field drone imagery', buttons_html => "<button class='btn btn-primary' style='margin:3px' id='upload_drone_imagery_link'>Upload Drone Imagery</button>", icon_class => "glyphicon glyphicon-th", info_section_id => "manage_drone_imagery_main" &>

</div>

<div id="manage_drone_imagery_crop_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery : Crop Stitched Image To Field Experiment" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can do a rough cropping of the stitched ortho image to focus only of the actual field experiment.</li>
            <li>Click on five points in the image to make a four-sided polygon.</li>
            <li>Only the last polygon that you draw will be used for the cropping.</li>
        </ul>
        <button class="btn btn-primary" id="drone_imagery_crop_stitched_submit">Crop Image To Selected Polygon</button>
    </div>

    <canvas id="drone_imagery_crop_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_plot_polygons_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery : Define Plot Polygons" &>
    
    <div class="well well-sm">
        <ul>
            <li>There are two options for defining plot polygons:</li>
            <ul>
                <li>Using the automated "Generate Polygon Template Tool"</li>
                <li>Or clicking on five points in the image to make a four-sided polygon.</li>
            </ul>
        </ul>
    </div>

    <& /page/detail_page_2_col_section.mas, info_section_title => "<h4 style='display:inline'>Generate Polygon Template Tool</h4>", info_section_subtitle => 'Overlay a uniform grid over the image.', icon_class => "glyphicon glyphicon-th-large", info_section_id => "manage_drone_imagery_generate_plot_polygons_section" &>

    <div class="well well-sm">
        <div id="drone_imagery_plot_polygons_top_section"></div>

        <button id="drone_imagery_plot_polygons_clear" class="btn btn-danger">Clear All Polygons</button>&nbsp;&nbsp;&nbsp;<button class="btn btn-primary" id="drone_imagery_plot_polygons_submit">Finish and Save Polygons To Plots</button>
    </div>

    <canvas id="drone_imagery_plot_polygons_original_stitched_div"></canvas>

    <div id="drone_imagery_generated_polygons_div"></div>

    <hr>
    <div class="well well-sm">
        <div id="drone_imagery_trial_layout_div"></div>
    </div>
</div>

<div class="modal fade" id="drone_imagery_assign_plot_dialog" name="drone_imagery_assign_plot_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryAssignPlotDialog" data-backdrop="static">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryAssignPlotDialog">Assign Plot</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal" id="drone_imagery_assign_plot_form">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Plot Name:</label>
                    <div class="col-sm-7">
                        <input class="form-control" id="drone_imagery_plot_polygon_assign_plot_name" name="drone_imagery_plot_polygons_autocomplete" type="text" placeholder="Auto-completes plot name..." />
                    </div>
                </div>
            </form>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary" id="drone_imagery_plot_polygon_assign_add">Assign Plot</button>
      </div>
    </div>
  </div>
</div>

<& /breeders_toolbox/drone_imagery/upload_drone_imagery_dialogs.mas &>
<& /breeders_toolbox/drone_imagery/drone_imagery_fourier_transform_dialogs.mas &>

<script>

jQuery(document).ready(function() {

    //
    // Image Cropping JS
    //

    var ctx;
    var trial_id;
    var stitched_image_id;
    var stitched_image;
    var drone_run_project_id;
    var crop_points = [];
    var crop_display_points = [];

    jQuery(document).on('click', 'button[name="project_drone_imagery_crop_image"]', function() {
        trial_id = jQuery(this).data('field_trial_id');
        stitched_image_id = jQuery(this).data('stitched_image_id');
        stitched_image = jQuery(this).data('stitched_image');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');

        crop_points = [];
        crop_display_points = [];

        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById('drone_imagery_crop_original_stitched_div');
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = drawImageActualSize;
                image.src = response.image_url;

                function drawImageActualSize() {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                }

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });

        jQuery('#manage_drone_imagery_crop_div').show();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
    });

    function FindPosition(oElement) {
        if(typeof( oElement.offsetParent ) != "undefined") {
            for(var posX = 0, posY = 0; oElement; oElement = oElement.offsetParent) {
                posX += oElement.offsetLeft;
                posY += oElement.offsetTop;
            }
            return [ posX, posY ];
        } else {
            return [ oElement.x, oElement.y ];
        }
    }

    function GetCoordinatesCroppedImage(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(dronecroppingImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (crop_points.length < 4){
            crop_points.push({x:PosX, y:PosY});
            crop_display_points.push({x:PosX, y:PosY});
        } else {
            crop_display_points.push({x:PosX, y:PosY});
        }
        if (crop_display_points.length > 5){
            crop_points = [];
            crop_display_points = [];
        }
        drawPolyline(crop_display_points);
        drawWaypoints(crop_display_points, undefined);
    }

    var dronecroppingImg = document.getElementById("drone_imagery_crop_original_stitched_div");
    dronecroppingImg.onmousedown = GetCoordinatesCroppedImage;

    function drawPolyline(points){
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.moveTo(points[0].x,points[0].y);
            for(var i=1;i<points.length;i++){
                ctx.lineTo(points[i].x,points[i].y);
            }
            ctx.strokeStyle='blue';
            ctx.lineWidth=5;
            ctx.stroke();    
        }
    }

    function drawWaypoints(points, label){
        if (points.length > 0 && label != undefined) {
            ctx.font = "bold 18px Arial";
            ctx.fillStyle = 'red';
            ctx.fillText(label, points[0].x + 3, points[0].y + 14 );
        }
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.arc(points[i].x,points[i].y,4,0,Math.PI*2);
            ctx.closePath();
            ctx.strokeStyle='black';
            ctx.lineWidth=1;
            ctx.stroke();
            ctx.fillStyle='white';
            ctx.fill();
        }
    }

    jQuery(document).on('click', '#drone_imagery_crop_stitched_submit', function(){

        jQuery.ajax({
            url : '/ajax/drone_imagery/crop_image?image_id='+stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error cropping image!')
            }
        });

    });

    //
    // Denoising JS
    //

    var gridData = new Array();

    jQuery(document).on('click', 'button[name="project_drone_imagery_denoise"]', function() {
        var trial_id = jQuery(this).data('field_trial_id');
        var drone_run_project_id = jQuery(this).data('drone_run_project_id');
        var cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        var stitched_image = jQuery(this).data('stitched_image');
        var cropped_stitched_image = jQuery(this).data('cropped_stitched_image');

        jQuery.ajax({
            url : '/ajax/drone_imagery/denoise?image_id='+cropped_stitched_image_id+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");       
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error denoising image!')
            }
        });

    });

    //
    //Define Plot Polygons JS
    //

    var canvas;
    var background_image_url;
    var background_image_width;
    var background_image_height;
    var plot_polygons_display_points = [];
    var plot_polygons_ind_points = [];
    var plot_polygons_ind_4_points = [];
    var drone_imagery_plot_polygons = {};
    var drone_imagery_plot_generated_polygons = {};
    var drone_imagery_plot_polygons_display = {};
    var field_trial_layout_response = {};
    var plot_polygon_name;
    var plotpolygonsImg;
    var drone_imagery_plot_polygons_available_stock_names = [];
    var trial_id;
    var cropped_stitched_image_id;
    var denoised_stitched_image_id;
    var drone_run_project_id;

    jQuery(document).on('click', 'button[name="project_drone_imagery_plot_polygons"]', function(){
        trial_id = jQuery(this).data('field_trial_id');
        cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');

        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        field_trial_layout_response = {};

        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').show();
    
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_contours?image_id='+denoised_stitched_image_id+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                background_image_url = response.contours_image_url;

                background_image_width = response.image_width;
                background_image_height = response.image_height;

                var top_section_html = '<h4>Total Image Width: '+response.image_width+'px. Total Image Height: '+response.image_height+'px.</h4>';
                top_section_html = top_section_html + '<button class="btn btn-default btn-sm" id="drone_imagery_plot_polygons_switch" data-image_url="'+response.image_url+'" data-image_fullpath="'+response.image_fullpath+'" data-contours_image_url="'+response.contours_image_url+'" data-contours_image_fullpath="'+response.contours_image_fullpath+'">Switch Image View</button><br/><br/>';
                jQuery('#drone_imagery_plot_polygons_top_section').html(top_section_html);

                canvas = document.getElementById('drone_imagery_plot_polygons_original_stitched_div');
                ctx = canvas.getContext('2d');
                draw_canvas_image(background_image_url);

                plotpolygonsImg = document.getElementById("drone_imagery_plot_polygons_original_stitched_div");
                plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygons;

                //var html = '<canvas id="drone_imagery_plot_polygons_original_stitched_div" style="background:url('+response.contours_image_url+'); //background-repeat:no-repeat; width:'+response.image_width+'; height:'+response.image_height+';" ></canvas>';
                //jQuery('#drone_imagery_plot_polygons_original_stitched_outer_div').html(html);

                //var s = new CanvasState(document.getElementById('drone_imagery_plot_polygons_original_stitched_div'));
                //s.addShape(new Shape(40,40,50,50)); // The default is gray
                //s.addShape(new Shape(60,140,40,60, 'lightskyblue'));
                //s.addShape(new Shape(80,150,60,30, 'rgba(127, 255, 212, .5)'));
                //s.addShape(new Shape(125,80,30,80, 'rgba(245, 222, 179, .7)'));

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving contours for image!')
            }
        });
    
        jQuery.ajax({
            url : '/ajax/breeders/trial/'+trial_id+'/layout_table',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                field_trial_layout_response = response;
                var layout = field_trial_layout_response.output;
                for (var i=1; i<layout.length; i++) {
                    drone_imagery_plot_polygons_available_stock_names.push(layout[i][0]);
                }
                droneImageryDrawLayoutTable(response, {});
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving trial layout and design!')
            }
        });

    });

    var drone_imagery_plot_polygon_current_background_toggle = 1;
    jQuery(document).on('click', '#drone_imagery_plot_polygons_switch', function(){
        var image_url;
        if (drone_imagery_plot_polygon_current_background_toggle == 0) {
            drone_imagery_plot_polygon_current_background_toggle = 1;
            image_url = jQuery(this).data('contours_image_url');
        } else if (drone_imagery_plot_polygon_current_background_toggle == 1) {
            drone_imagery_plot_polygon_current_background_toggle = 0;
            image_url = jQuery(this).data('image_url');
        }
        draw_canvas_image(image_url);

        return;
    });

    jQuery('#drone_imagery_plot_polygons_rectangles_apply').click(function() {
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];

        var num_rows_val = jQuery('#drone_imagery_plot_polygons_num_rows').val();
        var num_cols_val = jQuery('#drone_imagery_plot_polygons_num_cols').val();
        var section_left_offset_val = jQuery('#drone_imagery_plot_polygons_left_offset').val();
        var section_top_offset_val = jQuery('#drone_imagery_plot_polygons_top_offset').val();
        var section_right_offset_val = jQuery('#drone_imagery_plot_polygons_right_offset').val();
        var section_bottom_offset_val = jQuery('#drone_imagery_plot_polygons_bottom_offset').val();

        if (num_rows_val == ''){
            alert('Please give the number of rows!');
            return;
        }
        if (num_cols_val == ''){
            alert('Please give the number of columns!');
            return;
        }
        if (section_left_offset_val == ''){
            alert('Please give the section left offset! This can be 0 if there is no offset.');
            return;
        }
        if (section_top_offset_val == ''){
            alert('Please give the section top offset! This can be 0 if there is no offset.');
            return;
        }
        if (section_right_offset_val == ''){
            alert('Please give the section right offset! This can be 0 if there is no offset.');
            return;
        }
        if (section_bottom_offset_val == ''){
            alert('Please give the section bottom offset! This can be 0 if there is no offset.');
            return;
        }

        var num_rows = parseInt(num_rows_val);
        var num_cols = parseInt(num_cols_val);
        var section_width = background_image_width;
        var section_height = background_image_height;
        var section_left_offset = parseInt(section_left_offset_val);
        var section_top_offset = parseInt(section_top_offset_val);
        var section_right_offset = parseInt(section_right_offset_val);
        var section_bottom_offset = parseInt(section_bottom_offset_val);

        var col_width = (section_width - section_left_offset - section_right_offset) / num_cols;
        var row_width = (section_height - section_top_offset - section_bottom_offset) / num_rows;

        var x_pos = section_left_offset;
        var y_pos = section_top_offset;
        var generated_polygons = [];
        for (var i=0; i<num_rows; i++) {
            for (var j=0; j<num_cols; j++) {
                generated_polygons.push([
                    {x:x_pos, y:y_pos},
                    {x:x_pos + col_width, y:y_pos},
                    {x:x_pos + col_width, y:y_pos + row_width},
                    {x:x_pos, y:y_pos + row_width}
                ]);
                x_pos = x_pos + col_width;
            }
            x_pos = section_left_offset;
            y_pos = y_pos + row_width;
        }
        //console.log(generated_polygons);

        for (var i=0; i<generated_polygons.length; i++) {
            plot_polygons_ind_4_points = generated_polygons[i];
            plot_polygons_display_points = plot_polygons_ind_4_points;
            plot_polygons_display_points.push(plot_polygons_ind_4_points[0]);
            drawPolyline(plot_polygons_display_points);
            drawWaypoints(plot_polygons_display_points, i);
            drone_imagery_plot_generated_polygons[i] = plot_polygons_ind_4_points;
            drone_imagery_plot_polygons_display[i] = plot_polygons_display_points;
        }

        droneImageryRectangleLayoutTable(drone_imagery_plot_generated_polygons);
    });

    jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
        source: drone_imagery_plot_polygons_available_stock_names
    });

    jQuery(document).on('click', '#drone_imagery_plot_polygons_clear', function(){
        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_ind_4_points = [];
        drone_imagery_plot_polygons = {};
        drone_imagery_plot_generated_polygons = {};
        drone_imagery_plot_polygons_display = {};
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        draw_canvas_image(background_image_url);
        jQuery('#drone_imagery_generated_polygons_div').html('');
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);
    });

    function draw_canvas_image(image_url) {
        var image = new Image();
        image.onload = drawImageActualSize;
        image.src = image_url;
        function drawImageActualSize() {
            canvas.width = this.naturalWidth;
            canvas.height = this.naturalHeight;
            ctx.drawImage(this, 0, 0);

            for (key in drone_imagery_plot_polygons_display) {
                var plot_polygons_display_points_again = drone_imagery_plot_polygons_display[key];
                drawPolyline(plot_polygons_display_points_again);
                drawWaypoints(plot_polygons_display_points_again, key);
            }
        }
    }

    function GetCoordinatesPlotPolygons(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (plot_polygons_ind_points.length <= 4){
            plot_polygons_ind_points.push({x:PosX, y:PosY});
            plot_polygons_display_points.push({x:PosX, y:PosY});

            if (plot_polygons_ind_points.length == 4) {
                plot_polygons_ind_4_points = plot_polygons_ind_points;
            }
        } else if (plot_polygons_ind_points.length > 4) {
            if (plot_polygons_display_points.length == 5) {
                jQuery('#drone_imagery_assign_plot_dialog').modal('show');
            }
            plot_polygons_ind_points = [];
        }
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, undefined);
    }

    jQuery('#drone_imagery_assign_plot_dialog').on('shown.bs.modal', function (e) {
        jQuery("#drone_imagery_plot_polygon_assign_plot_name").focus();
    });

    jQuery('#drone_imagery_assign_plot_dialog').on('hide.bs.modal', function (e) {
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points, plot_polygon_name);
        drone_imagery_plot_polygons_display[plot_polygon_name] = plot_polygons_display_points;
        plot_polygons_display_points = [];
    });

    jQuery('#drone_imagery_plot_polygon_assign_add').click(function(){
        plot_polygon_name = jQuery('#drone_imagery_plot_polygon_assign_plot_name').val();
        if (plot_polygon_name == ''){
            alert('Please give a name name (plot name, plant name, etc)');
        }
        drone_imagery_plot_polygons[plot_polygon_name] = plot_polygons_ind_4_points;
        jQuery('#drone_imagery_assign_plot_dialog').modal('hide');
        console.log(drone_imagery_plot_polygons);
        droneImageryDrawLayoutTable(field_trial_layout_response, drone_imagery_plot_polygons);
    });

    jQuery('#drone_imagery_assign_plot_form').on('keyup keypress', function(e) {
        var keyCode = e.keyCode || e.which;
        if (keyCode === 13) {
            e.preventDefault();
            jQuery("#drone_imagery_plot_polygon_assign_add").trigger( "click" );
            return false;
        }
    });

    jQuery('#drone_imagery_plot_polygons_submit').click(function(){
        jQuery.ajax({
            url : '/ajax/drone_imagery/assign_plot_polygons?image_id='+denoised_stitched_image_id+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);

                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error saving assigned plot polygons!')
            }
        });
    });

    function droneImageryRectangleLayoutTable(generated_polygons) {
        var html = '<hr><div class="well well-sm"><table class="table table-borders table-hover" id="drone_imagery_generated_polygons_table"><thead><tr><th>Generated Number</th><th>Field Trial Observation Unit</th></tr></thead><tbody>';
        for (key in generated_polygons) {
            html = html + '<tr><td>' + key + '</td><td><input class="form-control" type="text" name="drone_imagery_plot_polygons_autocomplete" /></td></tr>';
        }
        html = html + '</tbody></table></div>';
        jQuery('#drone_imagery_generated_polygons_div').html(html);
        jQuery('#drone_imagery_generated_polygons_table').DataTable();

        jQuery('input[name=drone_imagery_plot_polygons_autocomplete]').autocomplete({
            source: drone_imagery_plot_polygons_available_stock_names
        });
    }

    function droneImageryDrawLayoutTable(response, plot_polygons) {
        var output = response.output;
        var header = output[0];
        var html = '<table class="table table-borders table-hover" id="drone_imagery_layout_table"><thead><tr>';
        for (var i=0; i<header.length; i++){
            html = html + '<td>'+header[i]+'</td>';
        }
        html = html + '<td>Polygon Assigned</td>';
        html = html + '</tr></thead><tbody>';
        for (var i=1; i<output.length; i++){
            html = html + '<tr>';
            for (var j=0; j<output[i].length; j++){
                html = html + '<td>'+output[i][j]+'</td>';
            }
            if (output[i][0] in plot_polygons){
                html = html + '<td>Yes</td>';
            } else {
                html = html + '<td></td>';
            }
            html = html + '</tr>';
        }
        html = html + '</tbody></table>';
        jQuery('#drone_imagery_trial_layout_div').html(html);
        jQuery('#drone_imagery_layout_table').DataTable();
    }

});

</script>

