
<%args>
</%args>

<& /util/import_javascript.mas, classes => [ 'jquery.iframe-post-form', 'CXGN.BreederSearch', 'd3.d3v4Min.js', 'CXGN.BreedersToolbox.DroneImagery' ] &>

<div id="manage_drone_imagery_top_div">

    <& /page/page_title.mas, title=>"Manage Drone Imagery" &>

    <& /page/detail_page_2_col_section.mas, info_section_collapsed => 0, info_section_title => "<h4 style='display:inline'>Drone Imagery</h4>", info_section_subtitle => 'Upload and view field drone imagery', buttons_html => "<button class='btn btn-primary' style='margin:3px' id='upload_drone_imagery_link'>Upload Drone Imagery</button>", icon_class => "glyphicon glyphicon-th", info_section_id => "manage_drone_imagery_main" &>

</div>

<div id="manage_drone_imagery_crop_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery : Crop Stitched Image To Field Experiment" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can do a rough cropping of the stitched ortho image to focus only of the actual field experiment.</li>
            <li>Click on five points in the image to make a four-sided polygon.</li>
            <li>Only the last polygon that you draw will be used for the cropping.</li>
        </ul>
        <button class="btn btn-primary" id="drone_imagery_crop_stitched_submit">Crop Image To Selected Polygon</button>
    </div>

    <canvas id="drone_imagery_crop_original_stitched_div"></canvas>
</div>

<div id="manage_drone_imagery_plot_polygons_div" style="display:none">

    <& /page/page_title.mas, title=>"Manage Drone Imagery : Define Plot Polygons" &>
    
    <div class="well well-sm">
        <ul>
            <li>Here you can cut and assign the observation units (plots, plants, etc) that you want to phenotype</li>
            <li>Click on five points in the image to make a four-sided polygon.</li>
        </ul>
        <button class="btn btn-primary" id="drone_imagery_plot_polygons_submit">Assign Plots To Selected Polygons</button>
    </div>

    <canvas id="drone_imagery_plot_polygons_original_stitched_div"></canvas>
    <hr>
    <div class="well well-sm">
        <div id="drone_imagery_trial_layout_div"></div>
    </div>
</div>

<div class="modal fade" id="drone_imagery_assign_plot_dialog" name="drone_imagery_assign_plot_dialog" tabindex="-1" role="dialog" aria-labelledby="droneImageryAssignPlotDialog">
  <div class="modal-dialog modal-sm" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
        <h4 class="modal-title" id="droneImageryAssignPlotDialog">Assign Plot</h4>
      </div>
      <div class="modal-body">
        <div class="container-fluid">
            <form class="form-horizontal">
                <div class="form-group">
                    <label class="col-sm-5 control-label">Plot Name:</label>
                    <div class="col-sm-7">
                        <input class="form-control" id="drone_imagery_plot_polygon_assign_plot_name" name="drone_imagery_plot_polygon_assign_plot_name" type="text" placeholder="Auto-completes plot name..." />
                    </div>
                </div>
            </form>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
        <button type="button" class="btn btn-primary">Assign Plot</button>
      </div>
    </div>
  </div>
</div>

<& /breeders_toolbox/drone_imagery/upload_drone_imagery_dialogs.mas &>
<& /breeders_toolbox/drone_imagery/drone_imagery_fourier_transform_dialogs.mas &>

<script>

jQuery(document).ready(function() {

    //
    // Image Cropping JS
    //

    var rectangleOverlayData = new Array();

    var ctx;
    var trial_id;
    var stitched_image_id;
    var stitched_image;
    var drone_run_project_id;
    var crop_points = [];
    var crop_display_points = [];

    jQuery(document).on('click', 'button[name="project_drone_imagery_crop_image"]', function() {
        trial_id = jQuery(this).data('field_trial_id');
        stitched_image_id = jQuery(this).data('stitched_image_id');
        stitched_image = jQuery(this).data('stitched_image');
        drone_run_project_id = jQuery(this).data('drone_run_project_id');

        crop_points = [];
        crop_display_points = [];

        jQuery.ajax({
            url : '/ajax/drone_imagery/get_image?image_id='+stitched_image_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");

                var canvas = document.getElementById('drone_imagery_crop_original_stitched_div');
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = drawImageActualSize;
                image.src = response.image_url;

                function drawImageActualSize() {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                }

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving image!')
            }
        });

        jQuery('#manage_drone_imagery_crop_div').show();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').hide();
    });

    function FindPosition(oElement) {
        if(typeof( oElement.offsetParent ) != "undefined") {
            for(var posX = 0, posY = 0; oElement; oElement = oElement.offsetParent) {
                posX += oElement.offsetLeft;
                posY += oElement.offsetTop;
            }
            return [ posX, posY ];
        } else {
            return [ oElement.x, oElement.y ];
        }
    }

    function GetCoordinatesCroppedImage(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(dronecroppingImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (crop_points.length < 4){
            crop_points.push({x:PosX, y:PosY});
            crop_display_points.push({x:PosX, y:PosY});
        } else {
            crop_display_points.push({x:PosX, y:PosY});
        }
        if (crop_display_points.length > 5){
            crop_points = [];
            crop_display_points = [];
        }
        drawPolyline(crop_display_points);
        drawWaypoints(crop_display_points);
    }

    var dronecroppingImg = document.getElementById("drone_imagery_crop_original_stitched_div");
    dronecroppingImg.onmousedown = GetCoordinatesCroppedImage;

    function drawPolyline(points){
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.moveTo(points[0].x,points[0].y);
            for(var i=1;i<points.length;i++){
                ctx.lineTo(points[i].x,points[i].y);
            }
            ctx.strokeStyle='blue';
            ctx.lineWidth=5;
            ctx.stroke();    
        }
    }

    function drawWaypoints(points){
        for(var i=0;i<points.length;i++){
            ctx.beginPath();
            ctx.arc(points[i].x,points[i].y,4,0,Math.PI*2);
            ctx.closePath();
            ctx.strokeStyle='black';
            ctx.lineWidth=1;
            ctx.stroke();
            ctx.fillStyle='white';
            ctx.fill();
        }
    }

    jQuery(document).on('click', '#drone_imagery_crop_stitched_submit', function(){

        jQuery.ajax({
            url : '/ajax/drone_imagery/crop_image?image_id='+stitched_image_id+'&polygon='+JSON.stringify(crop_points)+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error cropping image!')
            }
        });

    });

    //
    // Denoising JS
    //

    var gridData = new Array();

    jQuery(document).on('click', 'button[name="project_drone_imagery_denoise"]', function() {
        var trial_id = jQuery(this).data('field_trial_id');
        var drone_run_project_id = jQuery(this).data('drone_run_project_id');
        var cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        var stitched_image = jQuery(this).data('stitched_image');
        var cropped_stitched_image = jQuery(this).data('cropped_stitched_image');

        jQuery.ajax({
            url : '/ajax/drone_imagery/denoise?image_id='+cropped_stitched_image_id+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");       
                location.reload();
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error denoising image!')
            }
        });

    });

    //
    //Define Plot Polygons JS
    //

    var plot_polygons_display_points = [];
    var plot_polygons_ind_points = [];
    var plot_polygons_points = [];

    jQuery(document).on('click', 'button[name="project_drone_imagery_plot_polygons"]', function(){
        var trial_id = jQuery(this).data('field_trial_id');
        var cropped_stitched_image_id = jQuery(this).data('cropped_stitched_image_id');
        var denoised_stitched_image_id = jQuery(this).data('denoised_stitched_image_id');
        var drone_run_project_id = jQuery(this).data('drone_run_project_id');

        plot_polygons_display_points = [];
        plot_polygons_ind_points = [];
        plot_polygons_points = [];

        jQuery('#manage_drone_imagery_crop_div').hide();
        jQuery('#manage_drone_imagery_top_div').hide();
        jQuery('#manage_drone_imagery_plot_polygons_div').show();
    
        jQuery.ajax({
            url : '/ajax/drone_imagery/get_contours?image_id='+denoised_stitched_image_id+'&drone_run_project_id='+drone_run_project_id,
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                jQuery("#working_modal").modal("hide");
                var canvas = document.getElementById('drone_imagery_plot_polygons_original_stitched_div');
                ctx = canvas.getContext('2d');
                var image = new Image();
                image.onload = drawImageActualSize;
                image.src = response.contours_image_url;

                function drawImageActualSize() {
                    canvas.width = this.naturalWidth;
                    canvas.height = this.naturalHeight;
                    ctx.drawImage(this, 0, 0);
                }

            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving contours for image!')
            }
        });
    
        jQuery.ajax({
            url : '/ajax/breeders/trial/'+trial_id+'/layout_table',
            beforeSend: function() {
                jQuery("#working_modal").modal("show");
            },
            success: function(response){
                console.log(response);
                var output = response.output;
                var header = output[0];
                var html = '<table class="table table-borders table-hover" id="drone_imagery_layout_table"><thead><tr>';
                for (var i=0; i<header.length; i++){
                    html = html + '<td>'+header[i]+'</td>';
                }
                html = html + '</tr></thead><tbody>';
                for (var i=1; i<output.length; i++){
                    html = html + '<tr>';
                    for (var j=0; j<output[i].length; j++){
                        html = html + '<td>'+output[i][j]+'</td>';
                    }
                    html = html + '</tr>';
                }
                html = html + '</tbody></table>';
                jQuery('#drone_imagery_trial_layout_div').html(html);
                jQuery('#drone_imagery_layout_table').DataTable();
                jQuery("#working_modal").modal("hide");
            },
            error: function(response){
                jQuery("#working_modal").modal("hide");
                alert('Error retrieving trial layout and design!')
            }
        });

    });

    function GetCoordinatesPlotPolygons(e) {
        var PosX = 0;
        var PosY = 0;
        var ImgPos;
        ImgPos = FindPosition(plotpolygonsImg);
        if (!e) var e = window.event;
        if (e.pageX || e.pageY) {
            PosX = e.pageX;
            PosY = e.pageY;
        }
        else if (e.clientX || e.clientY) {
            PosX = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft;
            PosY = e.clientY + document.body.scrollTop + document.documentElement.scrollTop;
        }
        PosX = PosX - ImgPos[0];
        PosY = PosY - ImgPos[1];
        if (plot_polygons_ind_points.length <= 4){
            plot_polygons_ind_points.push({x:PosX, y:PosY});
            plot_polygons_display_points.push({x:PosX, y:PosY});

            if (plot_polygons_ind_points.length == 4) {
                console.log(plot_polygons_ind_points);
                var plot_polygons_ind_points_sep = plot_polygons_ind_points;
                plot_polygons_points.push(plot_polygons_ind_points_sep);
            }
        } else if (plot_polygons_ind_points.length > 4) {
            if (plot_polygons_display_points.length == 5) {
                plot_polygons_display_points = [];

                jQuery('#drone_imagery_assign_plot_dialog').modal('show');
            }
            plot_polygons_ind_points = [];
        }
        drawPolyline(plot_polygons_display_points);
        drawWaypoints(plot_polygons_display_points);
    }

    var plotpolygonsImg = document.getElementById("drone_imagery_plot_polygons_original_stitched_div");
    plotpolygonsImg.onmousedown = GetCoordinatesPlotPolygons;

    jQuery('#drone_imagery_assign_plot_dialog').on('shown.bs.modal', function (e) {
        jQuery("#drone_imagery_plot_polygon_assign_plot_name").focus();
    });

});

</script>

