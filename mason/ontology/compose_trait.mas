
<%args>
$composable_cvs => undef
$allowed_combinations => undef
</%args>

<& /util/import_javascript.mas, classes => ['CXGN.BreederSearch'] &>

<& /page/page_title.mas, title=>"Compose a new trait" &>
</br>

<div class="panel panel-default">
  <div class="panel-heading" data-toggle="collapse" data-parent="#accordion" data-target="#collapse1">
    <div class="panel-title"><a href="#form" class="accordion-toggle">Base Trait</a><span class="pull-right clickable" onmouseover="" style="cursor: pointer;"><i class="glyphicon glyphicon-chevron-up"></i></span></div>
  </div>
  <div id="collapse1" class="panel-collapse collapse in">
    <div class="panel-body form-horizontal container-fluid" style="overflow:hidden">
        <div class="col-sm-12 col-md-12 col-lg-12">
        <div id="object_div" class="col-md-6" style="display: none;">
            <label for="object_select_div" class="control-label">Object</label>
            <p class="help-block"><small>Pick the object on which the new trait is measured</small></p>
            <div id="object_select_div"></div><br>
            <button class="btn btn-default btn-sm" id="object_select_all" name="object_select_all"/>Select All</button>
            <button class="btn btn-default btn-sm" id="object_select_clear" name="object_select_clear"/>Clear</button>
        </div>
        <div id="attribute_div" class="col-md-6" style="display: none;">
            <label for="attribute_select_div" class="control-label">Attribute</label>
            <p class="help-block"><small>Pick the attribute the new trait measures</small></p>
            <div id="attribute_select_div"></div><br>
            <button class="btn btn-default btn-sm" id="attribute_select_all" name="attribute_select_all"/>Select All</button>
            <button class="btn btn-default btn-sm" id="attribute_select_clear" name="attribute_select_clear"/>Clear</button>
        </div>

        <div id="method_div" class="col-md-6" style="display: none;">
            <label for="method_select_div" class="control-label">Method</label>
            <p class="help-block"><small>Pick the method by which the new trait is measured</small></p>
            <div id="method_select_div"></div><br>
            <button class="btn btn-default btn-sm" id="method_select_all" name="method_select_all"/>Select All</button>
            <button class="btn btn-default btn-sm" id="method_select_clear" name="method_select_clear"/>Clear</button>
        </div>
        <div id="unit_div" class="col-md-6" style="display: none;">
            <label for="unit_select_div" class="control-label">Unit</label>
            <p class="help-block"><small>Pick the units in which the new trait is measured</small></p>
            <div id="unit_select_div"></div><br>
            <button class="btn btn-default btn-sm" id="unit_select_all" name="unit_select_all"/>Select All</button>
            <button class="btn btn-default btn-sm" id="unit_select_clear" name="unit_select_clear"/>Clear</button>
        </div>

        <div id="trait_div" class="col-md-6" style="display: none;">
            <label for="trait_select_div" class="control-label">Trait</label>
            <p class="help-block"><small>Pick an existing trait</small></p>
            <div id="trait_select_div"></div><br>
            <button class="btn btn-default btn-sm" id="trait_select_all" name="trait_select_all"/>Select All</button>
            <button class="btn btn-default btn-sm" id="trait_select_clear" name="trait_select_clear"/>Clear</button>
        </div>
        </div>
</div>
</div>
</div>

<div class="panel panel-default">
  <div class="panel-heading" data-toggle="collapse" data-parent="#accordion" data-target="#collapse2">
    <div class="panel-title"><a href="#form" class="accordion-toggle">Time Terms</a><span class="pull-right clickable" onmouseover="" style="cursor: pointer;"><i class="glyphicon glyphicon-chevron-up"></i></span></div>
  </div>
  <div id="collapse2" class="panel-collapse collapse in">
    <div class="panel-body form-horizontal container-fluid" style="overflow:hidden">
    <div class="col-sm-12 col-md-12 col-lg-12">
    <div id="tod_div" class="col-md-6" style="display: none;">
      <label for="tod_select_div" class="control-label">Time of Day</label>
      <p class="help-block"><small><i>Optional</i> Pick the time of day at which the new trait is measured</small></p>
      <div id="tod_select_div"></div><br>
      <button class="btn btn-default btn-sm" id="tod_select_all" name="tod_select_all"/>Select All</button>
      <button class="btn btn-default btn-sm" id="tod_select_clear" name="tod_select_clear"/>Clear</button>
    </div>
    <div id="toy_div" class="col-md-6" style="display: none;">
      <label for="toy_select_div" class="control-label">Time of Year</label>
      <p class="help-block"><small><i>Optional</i> Pick the week or month in which the new trait is measured</small></p>
      <div id="toy_select_div"></div><br>
      <button class="btn btn-default btn-sm" id="toy_select_all" name="toy_select_all"/>Select All</button>
      <button class="btn btn-default btn-sm" id="toy_select_clear" name="toy_select_clear"/>Clear</button>
    </div>
    <div id="gen_div" class="col-md-6" style="display: none;">
      <label for="gen_select_div" class="control-label">Generation</label>
      <p class="help-block"><small><i>Optional</i> Pick the generation on which the new trait is measured</small></p>
      <div id="gen_select_div"></div><br>
      <button class="btn btn-default btn-sm" id="gen_select_all" name="gen_select_all"/>Select All</button>
      <button class="btn btn-default btn-sm" id="gen_select_clear" name="gen_select_clear"/>Clear</button>
    </div>
    </div>
  </div>
  </div>
  </div>


  <div class="panel panel-default">
    <div class="panel-heading" data-toggle="collapse" data-parent="#accordion" data-target="#collapse3">
      <div class="panel-title"><a href="#form" class="accordion-toggle">Combinations</a><span class="pull-right clickable" onmouseover="" style="cursor: pointer;"><i class="glyphicon glyphicon-chevron-up"></i></span></div>
    </div>
    <div id="collapse3" class="panel-collapse collapse in">
      <div class="panel-body form-horizontal container-fluid" style="overflow:hidden">
<div class="col-sm-12 col-md-12 col-lg-12">
<div class="col-md-6">
  <center><label class="control-label">Existing Traits</label></center>
  <center><p class="help-block"><small>Existing traits that match the current selections</small></p></center>
  <select multiple class="form-control" id="existing_traits"></select>
  </br>
  <div id="existing_traits_to_list"></div>
</div>
<div class="col-md-6">
  <center><label class="control-label">New Traits</label></center>
  <center><p class="help-block"><small>New traits that can be made from the current selections</small></p></center>
  <select multiple class="form-control" id="new_traits"></select></br>
  <center><button id="compose_trait" title="Select at least one new trait to create before submitting" class="btn btn-primary">Submit</button></center>
</div>
</div>



  </div>
  </div>
</div>

<div class="modal fade" id="traits_saved_dialog" tabindex="-1" role="dialog" aria-labelledby="traitsSavedDialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content ui-front">
            <div class="modal-header text-center">
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                <h4 class="modal-title" id="traitsSavedDialog">Results</h4>
            </div>
            <div id="traits_saved_body" class="container-fluid">
            </div>
            <div class="modal-footer">
                <button id="traits_saved_close_button" type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>

// retrieve composable cvtypes an only load them as multiselects

console.log("composable cvs are "+'<% $composable_cvs %>');
create_multi_selects('<% $composable_cvs %>');

addToListMenu('existing_traits_to_list', 'existing_traits', {
  selectText: true,
  listType: 'traits'
});

jQuery(document).on('change','#object_select, #attribute_select, #method_select, #unit_select, #trait_select, #tod_select, #toy_select, #gen_select', function() { // retrieve matching traits each time component selection changes
  if (jQuery(this).attr('name') == 'trait_select') {
    console.log("trait select changed");
    clearAllOptions(document.getElementById('object_select'));
    clearAllOptions(document.getElementById('attribute_select'));
    clearAllOptions(document.getElementById('method_select'));
    clearAllOptions(document.getElementById('unit_select'));
  }
  else if ((jQuery(this).attr('name') == 'object_select') || (jQuery(this).attr('name') == 'attribute_select') || (jQuery(this).attr('name') == 'method_select') || (jQuery(this).attr('name') == 'unit_select')) {
    console.log("component select changed");
    clearAllOptions(document.getElementById('trait_select'));
  }
  display_matching_traits();
});

jQuery('#object_select_all, #attribute_select_all, #method_select_all, #unit_select_all, #trait_select_all, #tod_select_all, #toy_select_all, #gen_select_all').click( // select all data in a panel
  function() {
  var name = jQuery(this).attr('name');
  var select_id = name.substring(0, name.length - 4);
  selectAllOptions(document.getElementById(select_id));
  display_matching_traits();
});

jQuery('#object_select_clear, #attribute_select_clear, #method_select_clear, #unit_select_clear, #trait_select_clear, #gen_select_clear, #tod_select_clear, #toy_select_clear').click( // clear all selections in a panel
  function() {
  var name = jQuery(this).attr('name');
  var select_id = name.substring(0, name.length - 6);
  clearAllOptions(document.getElementById(select_id));
  display_matching_traits();
});

jQuery('#existing_traits').dblclick(function() { // open trait detail page in new window on double-click
    window.open("../../cvterm/"+this.value+"/view");
});

jQuery("#new_traits").change(function() {
var selected = jQuery("#new_traits").val();
if (selected && selected.length > 0) {
    jQuery('#compose_trait').prop('disabled', false);
}
else {
    jQuery('#compose_trait').prop('disabled', true);
}
});

jQuery('#compose_trait').on('click', function () {
    disable_ui();
    console.log("just disabled ui");
var new_traits = jQuery("#new_traits").val();
var new_trait_names = [];
jQuery("#new_traits option:selected").each(function () {
   if (jQuery(this).length) {
    new_trait_names.push(jQuery(this).text());
   }
});
//console.log("new trait names = "+new_trait_names);
var successes = [];
var errors = [];
var names = [];
for (var i = 0; i < new_traits.length; i++) {
  var component_ids = new_traits[i];
  var matching_trait_id = retrieve_exact_trait(component_ids);
    jQuery.ajax( {
      url: '/ajax/onto/compose',
      timeout: 60000,
      async: false,
      method: 'POST',
      data: {'ids': component_ids},
      success: function(response) {
      if (response.success) {
        successes.push("<li class='list-group-item list-group-item-success'>"+response.success+"</li>");
        console.log("Name is "+response.name);
        names.push(response.name+"\n");
        return;
      }
      else {
        errors.push("<li class='list-group-item list-group-item-danger'>"+new_trait_names[i]+": "+response.error+"</li>");
        return;
      }
      },
      error: function(request, status, err) {
        errors.push("<li class='list-group-item list-group-item-danger'>"+new_trait_names[i]+": Save trait AJAX request failed. This trait was not saved.</li>");
        return;
      }
    });
}
enable_ui();
// display results
var results_html = '';
if (successes.length > 0) {
    results_html += '<div class="modal-body col-sm-12" id="traits_saved"><label id="success_label" class="control-label">Traits saved</label><ul class="list-group" id="traits_saved_message">'+successes+'</ul></div>';
}
if (errors.length > 0) {
    results_html += '<div class="modal-body col-sm-12" id="traits_errors"><label id="error_label" class="control-label">Errors</label><ul class="list-group" id="traits_saved_message">'+errors+'</ul></div>';
}

if (successes.length > 0) {
    results_html += '<label id="list_label" class="control-label">Copy new traits to a list</label><div class="modal-body col-sm-12" id="results_to_list_menu"></div><div id="new_trait_names" style="display: none;"></div>';
}
document.getElementById('traits_saved_body').innerHTML = results_html;
jQuery('#new_trait_names').html(names);
addToListMenu('results_to_list_menu', 'new_trait_names', {
  listType: 'traits'
});
jQuery('#traits_saved_dialog').modal("show");
});

function create_multi_selects(cv_names) {
//console.log("creating the following multi_selects"+cv_names);
jQuery('#compose_trait').prop('disabled', true);
var names = cv_names.split(',');
 for(i = 0; i < names.length; i++){
 var cv_name = names[i];
 var name = cv_name.trim();
 console.log("working on "+ name +'_select_div');

 switch (name)
 {
 case "object":
case "attribute":
 case "method":
 case "unit":
 case "trait":
    jQuery('#'+name+'_div').show();
     get_select_box('trait_components', name +'_select_div', { 'id' : name +'_select', 'name': name +'_select', 'multiple': 'true', 'cv_type': name +'_ontology' });
     break;
 case "time":
 jQuery("#tod_div,#toy_div,#gen_div").show();
get_select_box('ontology_children', 'tod_select_div', { 'selectbox_id' : 'tod_select', 'selectbox_name': 'tod_select', 'multiple': 'true', 'parent_node_cvterm': 'time of day|TIME:0000001', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
get_select_box('ontology_children', 'toy_select_div', { 'selectbox_id' : 'toy_select', 'selectbox_name': 'toy_select', 'multiple': 'true', 'parent_node_cvterm': 'time of year|TIME:0000005', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
get_select_box('ontology_children', 'gen_select_div', { 'selectbox_id' : 'gen_select', 'selectbox_name': 'gen_select', 'multiple': 'true', 'parent_node_cvterm': 'generation|TIME:0000072', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
     break;
 case "tod":
 jQuery("#tod_div").show();
 get_select_box('ontology_children', 'tod_select_div', { 'selectbox_id' : 'tod_select', 'selectbox_name': 'tod_select', 'multiple': 'true', 'parent_node_cvterm': 'time of day|TIME:0000001', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
     break;
 case "toy":
 jQuery("#toy_div").show();
 get_select_box('ontology_children', 'toy_select_div', { 'selectbox_id' : 'toy_select', 'selectbox_name': 'toy_select', 'multiple': 'true', 'parent_node_cvterm': 'time of year|TIME:0000005', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
     break;
 case "gen":
 jQuery("#gen_div").show();
 get_select_box('ontology_children', 'gen_select_div', { 'selectbox_id' : 'gen_select', 'selectbox_name': 'gen_select', 'multiple': 'true', 'parent_node_cvterm': 'generation|TIME:0000072', 'rel_cvterm': 'is_a', 'rel_cv': 'relationship' });
     break;
 default:
     if (window.console) console.log("Did not recognize "+name+" category");
 }
  }
}

function display_matching_traits () {

var component_ids = get_component_ids();
// restrict to allowed combos here
console.log("component_ids are "+component_ids);
var response = retrieve_matching_traits(component_ids);
var matching_traits = [];
if (response[0]) {matching_traits = response[0]};
var new_traits = [];
if (response[1]) { new_traits = response[1]};
console.log("New traits are "+new_traits);
var trait_html;
var new_trait_html;

if (matching_traits.length > 0) {
  trait_html = format_options_list(matching_traits);
}
else {
  trait_html = 'No matching traits.';
}
if (new_traits.length > 0) {
  new_trait_html = format_options_list(new_traits);
}
else {
  new_trait_html = 'No new traits.';
  jQuery('#compose_trait').prop('disabled', true);
}

jQuery('#existing_traits').html(trait_html);
jQuery('#new_traits').html(new_trait_html);
if (jQuery('#new_traits').val()) {
    jQuery('#compose_trait').prop('disabled', false);
}
else {
    jQuery('#compose_trait').prop('disabled', true);
}

}

function get_component_ids () {
  var component_ids = [];
  if (jQuery("#object_select").val()) { component_ids.push(jQuery("#object_select").val()); }
  if (jQuery("#attribute_select").val()) { component_ids.push(jQuery("#attribute_select").val()); }
  if (jQuery("#method_select").val()) { component_ids.push(jQuery("#method_select").val()); }
  if (jQuery("#unit_select").val()) { component_ids.push(jQuery("#unit_select").val()); }
  if (jQuery("#trait_select").val()) { component_ids.push(jQuery("#trait_select").val()); }
  if (jQuery("#tod_select").val()) { component_ids.push(jQuery("#tod_select").val()); }
  if (jQuery("#toy_select").val()) { component_ids.push(jQuery("#toy_select").val()); }
  if (jQuery("#gen_select").val()) { component_ids.push(jQuery("#gen_select").val()); }
  return component_ids;
}

function retrieve_exact_trait (component_ids) {
jQuery.ajax( {
  url: '/ajax/onto/get_trait_from_exact_components',
  async: false,
  data: {'ids': component_ids},
  success: function(response) {
    if(response.trait_id) {
      trait_id = response.trait_id;
    }
    if(response.error) {
      trait_id = 0;
    };
  },
  error: function(request, status, err) {
    console.log("Error retrieving exact match");
  }
});
  return trait_id;
}


function retrieve_matching_traits (component_ids) {
  if (component_ids.length < 1) {
    return [];
  }
  var ids = {};
  ids["object_ids"] = jQuery("#object_select").val();
  ids["attribute_ids"] = jQuery("#attribute_select").val();
  ids["method_ids"] = jQuery("#method_select").val();
  ids["unit_ids"] = jQuery("#unit_select").val();
  ids["trait_ids"] = jQuery("#trait_select").val();
  ids["tod_ids"] = jQuery("#tod_select").val();
  ids["toy_ids"] = jQuery("#toy_select").val();
  ids["gen_ids"] = jQuery("#gen_select").val();

jQuery.ajax( {
  url: '/ajax/onto/get_traits_from_component_categories',
  async: false,
  data: { 'object_ids': ids["object_ids"],
          'attribute_ids': ids["attribute_ids"],
          'method_ids': ids["method_ids"],
          'unit_ids': ids["unit_ids"],
          'trait_ids': ids["trait_ids"],
          'tod_ids': ids["tod_ids"],
          'toy_ids': ids["toy_ids"],
          'gen_ids': ids["gen_ids"],
        },
  success: function(response) {
    traits = response.existing_traits || [];
    new_traits = response.new_traits || [];
    console.log("traits="+traits+"\n newtraits="+new_traits);
  },
  error: function(request, status, err) {
    console.log("Error retrieving matches");
  }
});
  return [traits, new_traits];
}




</script>
