<%doc>
  NAME: expression_info.mas
  VERSION: 1.0
  DESCRIPTION: This is a mason code get the all the expression associated to a template an return the HTML as table; 
  AUTHOR: Aureliano Bombarely (ab782@cornell.edu)
</%doc>


<%perl>
use strict;
use warnings;

use CXGN::SEDM::Schema;
use CXGN::Page::FormattingHelpers  qw/ info_section_html info_table_html columnar_table_html page_title_html html_break_string /;
use Math::BigFloat;

my $experiment_info_content;


## The GO system is not still developed, so it use the follow array (it should be replace as soon as will be developed the GO for 
## the samples)

my %tissues = ( 'TobEA vegetative shoot apex'       => 'Shoot',
                'TobEA floral shoot apex'           => 'Shoot',
                'TobEA closed bud'                  => 'Bud', 
                'TobEA open bud'                    => 'Bud',
                'TobEA cotyledons'                  => 'Cotyledons',
                'TobEA flower'                      => 'Flower',
                'TobEA young leaf'                  => 'Leaf',
                'TobEA mature leaf'                 => 'Leaf',
                'TobEA early senescent leaf'        => 'Leaf', 
                'TobEA mid/early senescent leaf'    => 'Leaf',
                'TobEA mid/late senescent leaf'     => 'Leaf',
                'TobEA late senescent leaf'         => 'Leaf',
                'TobEA cauline leaf'                => 'Leaf',
                'TobEA young root'                  => 'Root',
                'TobEA young root cultivar FC K327' => 'Root',
                'TobEA young root cultivar FC K328' => 'Root',
                'TobEA young root cultivar FC K329' => 'Root',
                'TobEA mature root'                 => 'Root',
                'TobEA seed'                        => 'Seed',
                'TobEA young shoot'                 => 'Shoot',
                'TobEA lower stem'                  => 'Stem',
                'TobEA upper stem'                  => 'Stem' 
      );

## define a hash with keys=experiment_id and values=experiment_name

my %experiments;

## If there aren't any template_row that comes from template_detail.mas, it will return nothing 
## (the message is returned by basic_info.mas).

if (defined $ARGS{'template_row'}) {

   ## Get the template_id and all the expression_experiment_values associated to them with the experimental design

   my (%exp_info, %expdes_info);
   my $template_id = $ARGS{'template_row'}->get_column('template_id');
   my @exp_exp_values_rows = $ARGS{'schema'}->resultset('ExpressionExperimentValues')->search({ template_id => $template_id });

   foreach my $expexp_value_row (@exp_exp_values_rows) {
      my %exp_values = $expexp_value_row->get_columns();

      my $rep_used = $exp_values{'replicates_used'} || 'none';
      my $mean = Math::BigFloat->new( $exp_values{'mean'})->ffround(-2)->bstr(); 
      my $median = Math::BigFloat->new( $exp_values{'median'} )->ffround(-2)->bstr();
      my $sd = Math::BigFloat->new($exp_values{'standard_desviation'})->ffround(-2)->bstr();
      my $cv = Math::BigFloat->new($exp_values{'coefficient_of_variance'})->ffround(-2)->bstr();
      if ($rep_used eq 'none') {
         my $def1 = '<font color=gray>NA</font>';
         ($mean, $median, $sd, $cv) = ($def1, $def1, $def1, $def1);
      } elsif ($rep_used == 1) {
         my $def2 = '<font color=darkcyan>NA</font>';
         ($sd, $cv) = ($def2, $def2);
	 $mean = '<b><font color=darkcyan>'.$mean.'</font></b>';
	 $median = '<b><font color=darkcyan>'.$median.'</font></b>';
      } else {
	  if ($sd < 0.5) {
	      $mean = '<b><font color=darkblue>'.$mean.'</font></b>';
	      $median = '<b><font color=darkblue>'.$median.'</font></b>';
	      $sd = '<b><font color=darkblue>'.$sd.'</font></b>';
	      $cv = '<b><font color=darkblue>'.$cv.'</font></b>';
	  } elsif ($sd < 1) {
	      $mean = '<font color=darkblue>'.$mean.'</font>';
	      $median = '<font color=darkblue>'.$median.'</font>';
	      $sd = '<font color=darkorange>'.$sd.'</font>';
	      $cv = '<font color=darkblue>'.$cv.'</font>';
	  } else {
	      $mean = '<font color=darkblue>'.$mean.'</font>';
	      $median = '<font color=darkblue>'.$median.'</font>';
	      $sd = '<font color=darkred>'.$sd.'</font>';
	      $cv = '<font color=darkblue>'.$cv.'</font>';
	  }
      }
	  
      my $exp_id = $exp_values{'experiment_id'};
      my ($exp_row) = $ARGS{'schema'}->resultset('Experiments')->search({ experiment_id => $exp_id });
      if (defined $exp_row) {
          my $exp_name = $exp_row->get_column('experiment_name');
	  $experiments{$exp_id} = $exp_name;
	  my $exp_name_link = '/sedm/experiment.pl?id='.$exp_id;
	  my $exp_rep = $exp_row->get_column('replicates_nr');
	  my $exp_desid = $exp_row->get_column('experimental_design_id');
	  my ($exp_design_row) =$ARGS{'schema'}->resultset('ExperimentalDesigns')->search({ experimental_design_id => $exp_desid});
	  if (defined $exp_design_row) {
	      my $exp_design = $exp_design_row->get_column('experimental_design_name');
	      my $exp_design_link = '/sedm/experimental_design.pl?id='.$exp_desid;

	      ## Check if exists or not the experimental design. If exists, use " instead the name. Store in an array.

	      if (exists $exp_info{$exp_name}) {
	          my @expdata = @{ $exp_info{$exp_name} };
                  my @expdesigndata = @{ $expdes_info{$exp_design} };
		  push @expdata, ['"', "<a href=$exp_name_link>$exp_name</a>", $tissues{$exp_name}, $exp_rep, $rep_used, $mean, 
                                  $median, $sd, $cv];
                  push @expdesigndata, $exp_name;
		  $exp_info{$exp_name} = \@expdata;
		  $expdes_info{$exp_design} = \@expdesigndata;
              } else {
	          $exp_info{$exp_name} = [ ["<a href=$exp_design_link>$exp_design</a>", "<a href=$exp_name_link>$exp_name</a>", 
                                             $tissues{$exp_name}, $exp_rep, $rep_used, $mean, $median, $sd, $cv] ];
	          $expdes_info{$exp_design} = [$exp_name];
              }
          }
      }
   }

   ## Order the table for TobEA experiments (It should be replace with GO), but for now:

   my @exp_ordened = ('TobEA seed', 'TobEA cotyledons', 'TobEA young root', 'TobEA young root cultivar FC K327', 
                      'TobEA young root cultivar FC K328', 'TobEA young root cultivar FC K329',  'TobEA mature root', 
                      'TobEA young shoot', 'TobEA vegetative shoot apex', 'TobEA floral shoot apex', 'TobEA lower stem', 
                      'TobEA upper stem', 'TobEA young leaf','TobEA mature leaf', 'TobEA early senescent leaf', 
                      'TobEA mid/early senescent leaf', 'TobEA mid/late senescent leaf', 'TobEA late senescent leaf', 
                      'TobEA cauline leaf', 'TobEA closed bud', 'TobEA open bud', 'TobEA flower' );

   ## Build the array for the table ordened

   my %firstdata;
   my @expression_data;
   foreach my $exper_design (keys %expdes_info) {
      my @experid_list = @{ $expdes_info{$exper_design} };
      if ($exper_design eq 'TobEA') {
          @experid_list = @exp_ordened;
      }
      foreach my $exp_o (@experid_list) {
          my $expdata_aref = $exp_info{$exp_o};
          if (defined $expdata_aref) {
	      my @exp_single_list = @{$expdata_aref};
	      foreach my $single_exp (@exp_single_list) {
	         my $first = $single_exp->[0];
	         if (exists $firstdata{$first}) {
		     $single_exp->[0] = ' ';
                 } else {
                     $firstdata{$first} = 1;
                 }
	         push @expression_data, $single_exp;
              } 
          }
      }
  }

   ## Create the table using columnar_table_html
   
   my $experiments_html = columnar_table_html( headings => [ 'Experimental design name', 
                                                             'Experiment name', 
                                                             'Tissue',
                                                             'Experiment replicates', 
                                                             'Replicates pValue<0.05', 
                                                             'Mean', 
                                                             'Median', 
                                                             'SD', 
                                                             'CV' ],
                                               data     => \@expression_data,
					       __align  => ['l', 'l', 'l', 'c', 'c', 'c', 'c', 'c'],
                                              );

   ## If there are any experiment, replace the table for a message
   my $exp_number = scalar(@expression_data);
   if ($exp_number == 0) {
       $experiments_html = 'None experiment was found associated to this template';
   }

   $experiment_info_content = info_section_html( title => "Expression Data by Experiments (".$exp_number.")", 
                                                 contents => $experiments_html, 
						 collapsible =>1,
                                                 collapsed =>1 );

   ## Now we are going to add the expression data by targets (experiment replicates)

   my (%exptemp_info);
   my ($template_signal_type, $statistical_signal_type);
   my @exptemp_values_rows = $ARGS{'schema'}->resultset('ExpressionTemplateValues')->search({ template_id => $template_id });
   foreach my $exptemp_values_row (@exptemp_values_rows) {
   	   my %exp_temp_values = $exptemp_values_row->get_columns();
	   $template_signal_type = $exp_temp_values{'template_signal_type'};
	   $statistical_signal_type = $exp_temp_values{'statistical_value_type'};
	   my $signal = $exp_temp_values{'template_signal'};
           my $stats = $exp_temp_values{'statistical_value'};
           my $fstats;
           if (defined $stats) {
	      	my $number = Math::BigFloat->new($stats);
                if ($number->bcmp(0.05) < 0) {
		    if ($number->bcmp(0.001) < 0) {
		    	my $cvalue = $number->fround(1)->bsstr();
                        $fstats = '<b><font color=green>'.$cvalue.'</font></b>';
                    } else {
		       	my $nvalue = $number->ffround(-3)->bstr();
                        $fstats = '<b><font color=green>'.$nvalue.'</font></b>';  
                    }
                } else {
                    my $mvalue = $number->ffround(-3)->bstr();
		    $fstats = '<b><font color=red>'.$mvalue.'</font></b>';
                }
           }
	   my $hyb_id = $exp_temp_values{'hybridization_id'};
	   my ($hyb_row) = $ARGS{'schema'}->resultset('Hybridizations')->search({ hybridization_id => $hyb_id });
	   my $target_group_id = $hyb_row->get_column('target_group_id');
	   my @group_link_rows = $ARGS{'schema'}->resultset('GroupLinkage')->search({ group_id => $target_group_id,
	                                                                              member_type => 'target' });
	   my @target_list;
	   my $exper_id;
	   foreach my $group_link_row (@group_link_rows) {
	      my $target_id = $group_link_row->get_column('member_id');
	      my ($target_row) = $ARGS{'schema'}->resultset('Targets')->search({ target_id => $target_id });
	      my $target_name = $target_row->get_column('target_name');
	      my $target_link = '/sedm/target.pl?id='.$target_id;
	      $exper_id = $target_row->get_column('experiment_id');	      	      
	      push @target_list, "<a href=$target_link>$target_name</a>";
           }
	   my $target_list = join(';', @target_list);
	   if (defined $exper_id) {
	        my $exper_name = $experiments{$exper_id};
	        my $exper_link = '/sedm/experiment.pl?id='.$exper_id;
	        if (exists $exptemp_info{$exper_name}) {
		    my @exptempdata = @{ $exptemp_info{$exper_name} };
	            push @exptempdata, [' ', $target_list, $signal, $fstats, $exp_temp_values{'flag'}];
		    $exptemp_info{$exper_name} = \@exptempdata;
                } else {
                    $exptemp_info{$exper_name} = [ ["<a href=$exper_link>$exper_name</a>", $target_list, 
		                                    $signal, $fstats, $exp_temp_values{'flag'}] ];
                }
           }
   }	 

   ## Now define the array for the table.
   my @expression_targ_list;
   my @experiment_list = keys %exptemp_info;
   if (exists $exptemp_info{'TobEA seed'}) {
       @experiment_list = @exp_ordened;
   } 
   foreach my $exp_t (@exp_ordened) {
       if (exists $exptemp_info{$exp_t} ) {
           my @target_list = @{ $exptemp_info{$exp_t}};
     	   foreach my $target_data (@target_list) {
               push @expression_targ_list, $target_data;
           }
       }
   }


   my $experiments_by_targets_html;
   my $exprep_n = scalar(@expression_targ_list);
   if ($exprep_n == 0) {
       $experiments_by_targets_html = 'None experiment was found associated to this template';
   } else {
       $experiments_by_targets_html = columnar_table_html( headings => [ 'Experiment name', 
                                                                       'Target name', 
                                                                       $template_signal_type, 
                                                                       $statistical_signal_type, 
                                                                       'flag' ],
                                                           data     => \@expression_targ_list,
					                   __align  => ['l', 'l', 'c', 'c', 'c'],
                                                        );
   }
   $experiment_info_content .= info_section_html( title    => "Expression Data by Targets (experiment replicates) ($exprep_n)", 
                                                  contents => $experiments_by_targets_html,
						  collapsible =>1,
                                                  collapsed =>1 );
   

}

</%perl>

<% $experiment_info_content %>
