<%args>


</%args>

<& /util/import_javascript.mas, classes => [ 'jquery', 'jquery.dataTables' ] &>

<& /page/page_title.mas, title=>'Search Progenies and Crosses' &>


<& /page/detail_page_2_col_section.mas, info_section_collapsed => 1, info_section_title => "<h4 style='display:inline'>Search Progenies</h4>", info_section_subtitle => 'Search progenies of female or male parents, or cross combinations.', icon_class => "glyphicon glyphicon-random", info_section_id => "progeny_search_section" &>
<& /page/detail_page_2_col_section.mas, info_section_collapsed => 1, info_section_title => "<h4 style='display:inline'>Search Crosses</h4>", info_section_subtitle => 'Search cross details of female or male parents, or cross combinations.', icon_class => "glyphicon glyphicon-move", info_section_id => "cross_search_section" &>




<!--



<&| /page/info_section.mas, title=>"About Search Features",  collapsible => 1, collapsed=>1 &>
    <div class="well well-sm">
        <div class="panel panel-default">
            <div class="panel-body">
                <b><p>Search Progenies</p></b>
                <ul>
                    <li>You can search progenies derived from a particular female or male parent by using <b>"Search Progenies Derived from a Female Parent"</b> or <b>"Search Progenies Derived from a Male Parent"</b> search section.</li>
                    <li>If you would like to retrieve all of the progenies derived from the specified female or male accession regardless of the other parent, after providing your female or male parent, clicking on <b>"All Progenies"</b>.</li>
                    <li>If you would like to retrieve only progenies derived from a specific pair of parents. You can retrieve all of the accessions that were used for crossing with the specified accession by clicking on <b>"Male Parent"</b> or <b>"Female Parent"</b>. After selecting an accession of your choice, clicking on <b>"Progenies of these Parents"</b>.</li>
                </ul>
                <b><p>Search Crosses</p></b>
                <ul>
                    <li>You can search crosses that used a particular female parent or male parent by using <b>"Search Crosses of a Female Parent"</b> or <b>"Search Crosses of a Male Parent"</b> search section.</li>
                    <li>If you would like to retrieve all of the crosses that used the specified female or male accession regardless of the other parent, after providing your female or male parent, clicking on <b>"All Crosses"</b>.</li>
                    <li>If you would like to retrieve only crosses derived from a specific pair of parents. You can retrieve all of the accessions that were used for crossing with the specified accession by clicking on <b>"Male Parent"</b> or <b>"Female Parent"</b>. After selecting an accession of your choice, clicking on <b>"Crosses of these Parents"</b>.</li>
                </ul>
            </div>
        </div>
    </div>
</&>
-->


<script>


jQuery(document).ready(function (){

    jQuery("#pedigree_female_parent").autocomplete({
        source:'/ajax/stock/pedigree_female_parent_autocomplete',
    });

    jQuery("#male_parent").autocomplete({
        source:'/ajax/stock/pedigree_male_parent_autocomplete',
    });

    jQuery("#search_pedigree_male_parents").click(function(){

        jQuery.ajax({
            url:'/ajax/search/pedigree_male_parents',
            data:{'pedigree_female_parent':jQuery('#pedigree_female_parent').val()},
            success: function(response){
                console.log(response);
                var html = '<select id = "pedigree_male_parent" >';
                for (var i=0; i<response.data.length; i++) {
                    html = html + "<option value='"+response.data[i][0]+ "'>" + response.data[i][0] + "</option>";
                }
                html = html + "</select>";
                console.log(html);
                if(i ==''){
                    alert("No male parent");
                    return;
                }

                jQuery('#pedigree_male_parent').html(html);
            },
            error:function(response){
                alert("An error occurred");
            }
        });
    });


    jQuery("#search_pedigree_female_parents").click(function(){

        jQuery.ajax({
            url:'/ajax/search/pedigree_female_parents',
            data:{'pedigree_male_parent':jQuery('#male_parent').val()},
            success: function(response){
                console.log(response);
                var html = '<select id = "female_parent" >';
                for (var i=0; i<response.data.length; i++) {
                    html = html + "<option value='"+response.data[i][0]+ "'>" + response.data[i][0] + "</option>";
                }
                html = html + "</select>";
                console.log(html);
                if(i ==''){
                    alert("No female parent");
                    return;
                }

                jQuery('#female_parent').html(html);
            },
            error:function(response){
                alert("An error occurred");
            }
        });
    });


    jQuery('#search_pedigree_female_male').click(function(){

        var table = jQuery('#pedigree_female_male_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax': {'url':'/ajax/search/progenies',
                data:{'pedigree_female_parent':jQuery('#pedigree_female_parent').val(),
                    'pedigree_male_parent':jQuery('#pedigree_male_parent').val(),
                    }
            }
        });

        jQuery('#pedigree_female_male_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) {
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#progeny_names').html(names);

            addToListMenu('progenies_to_list_menu', 'progeny_names',{
                listType:'accessions'
            });
        });
    });


    jQuery('#search_pedigree_male_female').click(function(){

        var table = jQuery('#pedigree_male_female_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax': {'url':'/ajax/search/progenies',
                data:{'pedigree_female_parent':jQuery('#female_parent').val(),
                    'pedigree_male_parent':jQuery('#male_parent').val(),
                    }
            }
        });

        jQuery('#pedigree_male_female_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) {
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#progeny_names').html(names);

            addToListMenu('progenies_to_list_menu', 'progeny_names',{
                listType:'accessions'
            });
        });
    });


    jQuery('#search_all_progenies_using_female').click(function(){

        var table = jQuery('#pedigree_female_male_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax': {'url':'/ajax/search/progenies',
                data:{'pedigree_female_parent':jQuery('#pedigree_female_parent').val()},
            }
        });

        jQuery('#pedigree_female_male_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) {
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }
            jQuery('#progeny_names').html(names);

            addToListMenu('progenies_to_list_menu', 'progeny_names',{
                listType:'accessions'
            });
        });
    });


    jQuery('#search_all_progenies_using_male').click(function(){

        var table = jQuery('#pedigree_male_female_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax': {'url':'/ajax/search/progenies',
                data:{'pedigree_male_parent':jQuery('#male_parent').val()},
            }
        });
        jQuery('#pedigree_male_female_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) {
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }
            jQuery('#progeny_names').html(names);

            addToListMenu('progenies_to_list_menu', 'progeny_names',{
                listType:'accessions'
            });
        });
    });


    jQuery("#cross_female_parent").autocomplete({
        source:'/ajax/stock/cross_female_parent_autocomplete',
    });


    jQuery("#cross_male").autocomplete({
        source:'/ajax/stock/cross_male_parent_autocomplete',
    });


    jQuery("#search_cross_male_parents").click(function(){

        jQuery.ajax({
            url:'/ajax/search/cross_male_parents',
            data:{'female_parent':jQuery('#cross_female_parent').val()},
            success: function(response){
                console.log(response);
                var html = '<select id = "cross_male_parent" >';
                for (var i=0; i<response.data.length; i++) {
                    html = html + "<option value='"+response.data[i][0]+ "'>" + response.data[i][0] + "</option>";
                }
                html = html + "</select>";
                console.log(html);

                if(i ==''){
                    alert("No male parent");
                    return;
                }

                jQuery('#cross_male_parent').html(html);
            },
            error:function(response){
                alert("An error occurred");
            }
        });
    });


    jQuery("#search_cross_female_parents").click(function(){

        jQuery.ajax({
            url:'/ajax/search/cross_female_parents',
            data:{'male_parent':jQuery('#cross_male').val()},
            success: function(response){
                console.log(response);
                var html = '<select id = "cross_female" >';
                for (var i=0; i<response.data.length; i++) {
                    html = html + "<option value='"+response.data[i][0]+ "'>" + response.data[i][0] + "</option>";
                }
                html = html + "</select>";
                console.log(html);

                if(i ==''){
                    alert("No female parent");
                    return;
                }

                jQuery('#cross_female').html(html);
            },
            error:function(response){
                alert("An error occurred");
            }
        });
    });


    jQuery('#search_crosses_female_male').click(function(){

        var table = jQuery('#cross_female_male_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy'    : true,
            'ajax':{'url':'/ajax/search/crosses',
            'data':{'female_parent':jQuery('#cross_female_parent').val(),
                    'male_parent':jQuery('#cross_male_parent').val()},
            }
        });

        jQuery('#cross_female_male_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) { //extract text from anchor tags
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#cross_names').html(names);

            addToListMenu('crosses_to_list_menu', 'cross_names',{
                listType:'crosses'
            });
        });
    });


    jQuery('#search_crosses_male_female').click(function(){

        var table = jQuery('#cross_male_female_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy'    : true,
            'ajax':{'url':'/ajax/search/crosses',
            'data':{'female_parent':jQuery('#cross_female').val(),
                    'male_parent':jQuery('#cross_male').val()},
            }
        });

        jQuery('#cross_male_female_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) { //extract text from anchor tags
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#cross_names').html(names);

            addToListMenu('crosses_to_list_menu', 'cross_names',{
                listType:'crosses'
            });
        });
    });





    jQuery('#search_all_crosses_using_female').click(function(){

        var table = jQuery('#cross_female_male_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax':{'url':'/ajax/search/crosses',
                data:{'female_parent':jQuery('#cross_female_parent').val()},
            }
        });

        jQuery('#cross_female_male_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) { //extract text from anchor tags
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#cross_names').html(names);

            addToListMenu('crosses_to_list_menu', 'cross_names',{
                listType:'crosses'
            });
        });

    });


    jQuery('#search_all_crosses_using_male').click(function(){

        var table = jQuery('#cross_male_female_search_results').DataTable({
            'searching': true,
            'paging': true,
            'ordering': false,
            'destroy': true,
            'ajax':{'url':'/ajax/search/crosses',
                data:{'male_parent':jQuery('#cross_male').val()},
            }
        });

        jQuery('#cross_male_female_search_results').on( 'draw.dt', function (){
            var name_links = table.column(2).data();
            var names = [];
            //console.log("name links are: "+JSON.stringify(name_links));
            for (var i = 0; i < name_links.length; i++) { //extract text from anchor tags
                names.push(name_links[i].match(/<a [^>]+>([^<]+)<\/a>/)[1]+'\n');
            }

            jQuery('#cross_names').html(names);

            addToListMenu('crosses_to_list_menu', 'cross_names',{
                listType:'crosses'
            });
        });

    });


});


</script>
